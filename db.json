{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/mainpicture.jpg","path":"img/mainpicture.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"source/img/header_img/Iron-Man-3.jpg","path":"img/header_img/Iron-Man-3.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"source/img/ironman-draw.png","path":"img/ironman-draw.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tf-logo-dark.png","path":"img/header_img/tf-logo-dark.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/header_img/demo.jpg","path":"img/header_img/demo.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"source/img/header_img/main_pic_blog.JPG","path":"img/header_img/main_pic_blog.JPG","modified":0,"renderable":0},{"_id":"source/img/header_img/tag-bg.png","path":"img/header_img/tag-bg.png","modified":0,"renderable":0},{"_id":"source/img/beantech-desktop.png","path":"img/beantech-desktop.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-2-dark.png","path":"img/header_img/home-bg-2-dark.png","modified":0,"renderable":0},{"_id":"source/img/header_img/archive-bg.png","path":"img/header_img/archive-bg.png","modified":0,"renderable":0},{"_id":"source/img/main2.jpg","path":"img/main2.jpg","modified":0,"renderable":0},{"_id":"source/img/main_photo.JPG","path":"img/main_photo.JPG","modified":0,"renderable":0}],"Cache":[{"_id":"themes/beantech/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1623780470926},{"_id":"themes/beantech/_config.yml","hash":"6afd65c055d9b1c70ae67323cc869f1b4aa60348","modified":1623780470926},{"_id":"source/404.md","hash":"39f655b3f21b27a44a07dadb54f2327ad0fb94c0","modified":1623780470710},{"_id":"source/.DS_Store","hash":"4ea9d4a86fd973870338562fb7969409ec083ec8","modified":1624198178405},{"_id":"themes/beantech/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1623780470926},{"_id":"themes/beantech/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1623780470926},{"_id":"themes/beantech/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1624122131443},{"_id":"themes/beantech/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1623780470926},{"_id":"themes/beantech/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1623780470926},{"_id":"themes/beantech/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1623780470926},{"_id":"themes/beantech/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1623780470926},{"_id":"themes/beantech/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1623780470926},{"_id":"themes/beantech/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1623780470926},{"_id":"source/_posts/.DS_Store","hash":"42bfecb576166f8bcae7f31cff8791faafd068a2","modified":1624198178406},{"_id":"source/_posts/CreateBlog.md","hash":"050c29a62068fcf7365aad6aec80ee908f0c8010","modified":1624242068258},{"_id":"source/_posts/Dashboard-App.md","hash":"af2d5e320d1cdd0dea181ccdaeae9725bcf642a6","modified":1624282693953},{"_id":"source/_posts/Heroku.md","hash":"212eab1a6562ea9719b0a6306fc345389ec1c9cd","modified":1624242063902},{"_id":"source/_posts/Doctorally.md","hash":"7858271b586f26ee7428652d16ee74ca0fc25073","modified":1624242066201},{"_id":"source/_posts/Intro.md","hash":"b8f6177a1e47a466c4b0b1aa079e8938a511bf39","modified":1624242096674},{"_id":"source/_posts/MessengerClone.md","hash":"f6b01af127e73deab343590df48286c703ee3616","modified":1623780470777},{"_id":"source/_posts/Scholarship.md","hash":"3fa9d9785433724a78673faa160ee2ad5c1057d3","modified":1624242078110},{"_id":"source/_posts/TodoApp.md","hash":"fadac078437be0499651bce18d2660bb35bba02f","modified":1624191845924},{"_id":"source/_posts/hexo-theme-beantech.md","hash":"16f735a72237d0fcdf3868e0115dd8bfcc2a5259","modified":1623780470859},{"_id":"source/_drafts/RiceCS.md","hash":"9b9aa36c40e7160f0c46d543cde5ab3428d24586","modified":1623780470710},{"_id":"source/_posts/MyProject.md","hash":"a99cbcab9e0d7ed17abe6ad37e65d85dd76b57c7","modified":1624283751359},{"_id":"themes/beantech/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1623780470926},{"_id":"source/about/index.md","hash":"4f963eb33b2c86e869c2827d07b663825a73c6fc","modified":1623780470879},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1623780470922},{"_id":"themes/beantech/layout/keynote.ejs","hash":"9b8b9c429f91b9c57fd2e45b42929ffc9b55ee8b","modified":1623780470928},{"_id":"themes/beantech/layout/layout.ejs","hash":"56fdfa5269ea816977446bb281642b289bd745c5","modified":1623780470928},{"_id":"themes/beantech/layout/index.ejs","hash":"dc8a6eaa00d1e7c33a40979afe0953ed5d7b512e","modified":1623780470928},{"_id":"themes/beantech/layout/page.ejs","hash":"7413d8eb8af9f8b6c003075b263bbda233400098","modified":1623780470928},{"_id":"themes/beantech/layout/tags.ejs","hash":"a9aaf45ac77da155e619f7ff57829b1cac56903e","modified":1623780470928},{"_id":"themes/beantech/layout/post.ejs","hash":"a34ab015dad94209d59bb5eed5469f1dba365d5b","modified":1623780470928},{"_id":"source/tags/index.md","hash":"9d558ce28d0d44c3463517088689bbca44bbb364","modified":1623780470926},{"_id":"themes/beantech/layout/archive.ejs","hash":"7a1c279c042ce3884438a3b0461c952a92f6fb62","modified":1623780470928},{"_id":"themes/beantech/layout/about.ejs","hash":"c1fe31166c09e54a1e62279c41e10090fb107049","modified":1623780470928},{"_id":"source/archive/index.md","hash":"279ff19668395f5c6b26417da99d2c1f3ecd5886","modified":1623780470879},{"_id":"source/img/mainpicture.jpg","hash":"ad784d28aa8ea8a782c205f71665a06cbcc6f4a1","modified":1623780470923},{"_id":"source/_posts/CreateBlog/actionFlow.PNG","hash":"d35a5d1405e5e12359c17540fbf54e36b89aeba6","modified":1623780470711},{"_id":"source/_posts/CreateBlog/folderStructure.PNG","hash":"ef78b1788c999b9affb105e85289de92d23482df","modified":1623780470711},{"_id":"source/_posts/CreateBlog/mernpic.jpg","hash":"3a34f8ebb30d0ebec4bac10c802ad6e3f37e1bcd","modified":1623780470711},{"_id":"source/_posts/Heroku/folder.png","hash":"2430df9fc70da3642aa39e7c151f79574cfee7e2","modified":1623780470751},{"_id":"source/_posts/Heroku/download.jpg","hash":"624c7b1d5a08735c27653a11791c6e4594df9fcd","modified":1623780470750},{"_id":"source/_posts/Heroku/heroku.png","hash":"2430df9fc70da3642aa39e7c151f79574cfee7e2","modified":1623780470751},{"_id":"source/_posts/Heroku/heroku1.png","hash":"95e72784ae50a7b6388c2b83759b8a6b89731d6a","modified":1623780470751},{"_id":"source/_posts/Heroku/mongodb.png","hash":"29dfbc35ff07c1c23d657eaec9755eaaa5618ebd","modified":1623780470751},{"_id":"source/_posts/MessengerClone/605f46e0efe323669bc2a5a5b7b3835b.png","hash":"139bafdc27d7f862a14ef0a436cac78fff3fba9f","modified":1623780470778},{"_id":"source/_posts/MyProject/chatapp.PNG","hash":"81ef8db9b9ed771c8bc45fab6fad5aa7ea188f9e","modified":1623780470811},{"_id":"source/_posts/Scholarship/cspic.PNG","hash":"cfb4c2cb8c22aa5dac857de939b7f294bf9e2287","modified":1623780470845},{"_id":"source/_posts/Scholarship/scholarship.jpg","hash":"c66c4f4cac2782a8f469ac87a4e1447f5b7a5aff","modified":1623780470846},{"_id":"source/_posts/Scholarship/postimg2.jpg","hash":"e3b9fa6e97e9b6525e443fb40893814a4da188a5","modified":1623780470845},{"_id":"source/_posts/Scholarship/test2.jpg","hash":"e8cf5d0018afcdc2e652a4c55c9e9aa8e277cb32","modified":1623780470847},{"_id":"source/_posts/Scholarship/test3.jpg","hash":"942b50aab86e827babf19dffc5f862885243ae4c","modified":1623780470847},{"_id":"source/_posts/Scholarship/test3.jpg_fit=scale&background=000000","hash":"942b50aab86e827babf19dffc5f862885243ae4c","modified":1623780470848},{"_id":"source/_posts/Scholarship/test5.PNG","hash":"5dc8b7c7ce28e8953df7961b8eb8be212de9473a","modified":1623780470849},{"_id":"source/_posts/Scholarship/thumbnail2.jpg","hash":"dcd2d4619d811d195e8fd054f81fd026c4d9c179","modified":1623780470851},{"_id":"source/_posts/TodoApp/1_PRfM4daPnB3mGU-CCAb7IQ.png","hash":"a49f7c7ad5ddbcfb12615c15d2976253352a5c92","modified":1623780470851},{"_id":"source/_posts/TodoApp/1_qK3XfC6olCxJcygxPx1zBA.png","hash":"72147cc4a7d436005e8f45fc969668254d6ddb91","modified":1623780470852},{"_id":"source/_posts/TodoApp/firebase-blog.png","hash":"51b96173f6857eea8e16d9855c805652073c9cdb","modified":1623780470854},{"_id":"source/_posts/TodoApp/maxresdefault (1).jpg","hash":"4df8d38abb0babcb10c60f99e3b8ed03054b34e5","modified":1623780470855},{"_id":"themes/beantech/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1623780470928},{"_id":"themes/beantech/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1623780470928},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1623780470928},{"_id":"source/_posts/TodoApp/maxresdefault.jpg","hash":"881861794ac004cc9dc342b9b27b3a5d1642f260","modified":1623780470855},{"_id":"themes/beantech/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1623780470929},{"_id":"themes/beantech/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1623780470930},{"_id":"themes/beantech/source/css/toc.styl","hash":"6c9a2d5f6f981624e0c4b64323493e8614efea29","modified":1623780470930},{"_id":"themes/beantech/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1623780470930},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1623780470929},{"_id":"themes/beantech/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1623780470929},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1623780470930},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1623780470930},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1623780470931},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1623780470931},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1623780470931},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1623780470931},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1623780470931},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1623780470932},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1623780470932},{"_id":"themes/beantech/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1623780470933},{"_id":"themes/beantech/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1623780470933},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"c377ff4a57e52ecf321ae5e28e385fda21c44116","modified":1623780470927},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"3542d15bdf73aa59f05f566b7ecd2255e83ee370","modified":1623780470927},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"dcb8ccf3276267b2371b4b81568d7ce831bec9ff","modified":1623780470927},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1623780470927},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1623780470927},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1623780470880},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"837f01e8a20e5023b4b292d1b3141a399567da65","modified":1623780470927},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1624120021791},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1623780470927},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1623780470927},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1624122153271},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1623780470927},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"3b10bd768f6ef30a42b1703fbc9a88627f9bfdf1","modified":1623780470927},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1623780470927},{"_id":"source/_posts/CreateBlog/mongodb.PNG","hash":"c9f518d9a4317f12443aec6b879fafb6e0a7d37e","modified":1623780470711},{"_id":"source/_posts/CreateBlog/mongoexample.PNG","hash":"43a4427a1fa66c5b5a221ed0c1b7132ad8d462b9","modified":1623780470712},{"_id":"source/_posts/Doctorally/hospitalsign1.jpg","hash":"28e424d537336a71e8a59b28379fbd332b323c66","modified":1623780470728},{"_id":"source/_posts/Intro/firstcode.PNG","hash":"a66ff268c1a98ec05db7256511f4f50f90e713ce","modified":1623780470777},{"_id":"source/_posts/MyProject/headerimg1.jpg","hash":"01dbfc703e9cf316d3be80b697ceafbd845101aa","modified":1623780470821},{"_id":"source/_posts/Scholarship/postimg.jpg","hash":"fa759d3ffaa04e192d76467c4c7ee2fd5d66b76b","modified":1623780470845},{"_id":"source/_posts/Scholarship/thumbnail.jpg","hash":"b7a87f7f279eda49064969f439e1e6ab6b1356d8","modified":1623780470851},{"_id":"source/_posts/TodoApp/env.png","hash":"2ba5a070ab5829e9f6de499f4829539662c26ecb","modified":1623780470853},{"_id":"source/_posts/TodoApp/featured.png","hash":"eaf75f3cf8996ff5a8f2eede0b63863d3de98a27","modified":1623780470854},{"_id":"source/_posts/TodoApp/firebase.png","hash":"fcb1e85dcdcf804a24f26f3d571d1c8c982d96bc","modified":1623780470855},{"_id":"source/_posts/TodoApp/todo.png","hash":"2ba5a070ab5829e9f6de499f4829539662c26ecb","modified":1623780470856},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1623780470929},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1623780470930},{"_id":"source/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1623780470889},{"_id":"themes/beantech/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1623780470931},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1623780470932},{"_id":"source/_posts/Dashboard-App/signup.png","hash":"d6d0b10ff32b0735c105745620635e68a09c7820","modified":1624200883468},{"_id":"source/_posts/MyProject/fusion.PNG","hash":"20d5e8260b6cc21ceb1a3280579cfb453b97264b","modified":1623780470821},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1623780470929},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1623780470929},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1623780470929},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-false.png","hash":"86a3a4320012981f2d42eabc6ea172425f2f941a","modified":1623780470876},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1623780470885},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1623780470925},{"_id":"source/img/ironman-draw.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1623780470922},{"_id":"source/_posts/Doctorally/doctorally.png","hash":"554d856047c347f99a757668f6ac08e594372015","modified":1623780470728},{"_id":"source/_posts/Doctorally/material.png","hash":"92374bdf2b641ad6a57b8d5f3ed3eb061b82bc35","modified":1623780470729},{"_id":"source/_posts/Doctorally/mongodb.png","hash":"886cb21bc61d5fea2c3ec26fbb22f919177ec7c8","modified":1623780470731},{"_id":"source/_posts/Intro/codefun.png","hash":"793a757dbc426c8301d9e70ea362eb77efb566e3","modified":1623780470752},{"_id":"source/_posts/Intro/demo.jpg","hash":"7d7949885cb1f3eef04c1f92cf649b8823379309","modified":1623780470753},{"_id":"source/_posts/MessengerClone/back4app-blackburn-resource-management-1140x515.png","hash":"9f1272bb2fae0f3399db5aa4e5fe102f6bdb1a9c","modified":1623780470780},{"_id":"source/_posts/MessengerClone/storage.png","hash":"626051524689a456bf50ade4805fd826ebd0865a","modified":1623780470811},{"_id":"source/_posts/MyProject/riceapps.PNG","hash":"2f069c966a7b04638df882a2c033c60dfd834afc","modified":1623780470832},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-true.png","hash":"a704520b43f26b88d650098f60689af3af5eb106","modified":1623780470879},{"_id":"source/img/header_img/tf-logo-dark.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1623780470921},{"_id":"themes/beantech/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1623780470932},{"_id":"source/_posts/Heroku/flask2.jpg","hash":"78ee2997e69b8d6d56b59dc288fb3f269c65b51d","modified":1623780470751},{"_id":"source/_posts/MyProject/doctorally.PNG","hash":"ca114bd95955d48e7295babd974e7076e0aa176d","modified":1623780470818},{"_id":"source/_posts/Scholarship/test4.jpg","hash":"317e2cbbb8f5259d48d0ecc99fec5471dd7c3019","modified":1623780470848},{"_id":"source/_posts/TodoApp/addproject.png","hash":"1c4c7c7bb725cdc5c8fde9b352da1855c40033ee","modified":1623780470853},{"_id":"source/img/header_img/demo.jpg","hash":"7d7949885cb1f3eef04c1f92cf649b8823379309","modified":1623780470896},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1623780470924},{"_id":"source/_posts/Scholarship/test1.jpg","hash":"fc702ecf62b3a82c72a2b58b56ab0ccbc10701c4","modified":1623780470847},{"_id":"source/_posts/Scholarship/test6.PNG","hash":"98076e42896125b9d68e1b98a568ec286b7a7535","modified":1623780470850},{"_id":"source/_posts/MessengerClone/sideleft.png","hash":"5fd172f8e82ff1513095a8c4d400a18f9c5b27c7","modified":1623780470810},{"_id":"source/_posts/MessengerClone/sideconver.png","hash":"e32c2be9015530a83c0742b3ebce178642224f47","modified":1623780470808},{"_id":"source/_posts/TodoApp/web.png","hash":"35019348b96b584dd5b53ef9fe627211484b335b","modified":1623780470857},{"_id":"source/_posts/Dashboard-App/navigator.png","hash":"c919191ef0fe10f9bdab394416d432c2a849f232","modified":1624198245311},{"_id":"source/_posts/MyProject/software-engineering-stock.jpg","hash":"d860fb49e66322681059d023fba95e58b4bb6c53","modified":1623780470838},{"_id":"source/_posts/MessengerClone/allusers.png","hash":"898942d7fee08e3d2bfafb660fc90b706b436ccf","modified":1623780470779},{"_id":"source/_posts/MessengerClone/mainmessage.png","hash":"fc09e91b7eaecf768c1c6947711345e6159c3358","modified":1623780470790},{"_id":"source/_posts/Doctorally/Hospital.png","hash":"4aeab9f4a73536bb660b48b42d6a0dd43bebb710","modified":1623780470712},{"_id":"source/_posts/MyProject/frame7.png","hash":"0b8a74654ad1e39d1973444815ca0c4b1c8c6ac8","modified":1623780470819},{"_id":"source/_posts/MyProject/minhanh.png","hash":"394d1356d87f1fbde6a74763ac725afb1addebd0","modified":1623780470825},{"_id":"source/_posts/MessengerClone/dashboard.png","hash":"7483e806a254adc992ecab95143f07a3118bc7f0","modified":1623780470784},{"_id":"source/_posts/MessengerClone/reduxstructure.png","hash":"927b9cd02fc7bb2ee09115eb0da07f6c1d37a47d","modified":1623780470803},{"_id":"source/_posts/MessengerClone/message.png","hash":"14392c8026149cb3fb0a7d0e6b5d11f4675a434c","modified":1623780470795},{"_id":"source/_posts/Dashboard-App/welcome.png","hash":"257f8268b88e7c8c656515b7a6c926cdefdc06c3","modified":1624200879070},{"_id":"source/img/header_img/main_pic_blog.JPG","hash":"ef48e45f26306bc53f9245aeb7e86ed99f7f9297","modified":1623780470914},{"_id":"source/_posts/MyProject/software_shutterstock_1290773869.jpg","hash":"2d1393e80c12613328cd55426d896d9ce5f847f6","modified":1623780470841},{"_id":"source/img/header_img/tag-bg.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1623780470917},{"_id":"source/img/beantech-desktop.png","hash":"4a8f8b209c9db8fd5209f15b8e4590525e258b0f","modified":1623780470881},{"_id":"source/_posts/MyProject/cleen.png","hash":"8e2d033cce235fbfc716d79e474c41799bd913dc","modified":1623780470814},{"_id":"source/_posts/MyProject/movie.png","hash":"5d24df4cee6e67208ce3cc402b6876faec716a64","modified":1623780470829},{"_id":"source/_posts/hexo-theme-beantech/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1623780470870},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1623780470906},{"_id":"source/img/header_img/home-bg-2-dark.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1623780470899},{"_id":"source/_posts/Intro/design2.PNG","hash":"5ebcb58dc7bed9727fd19fca4ce29a632877dec5","modified":1623780470772},{"_id":"source/_posts/Intro/design1.PNG","hash":"78cf40c17fad13becc6be553c05e2637e3fb9640","modified":1623780470762},{"_id":"source/img/header_img/archive-bg.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1623780470891},{"_id":"source/_posts/Dashboard-App/newapple.png","hash":"95f9ae5f64628e0ac21f511e41eeffb3b1883a72","modified":1624268201683},{"_id":"source/_posts/Dashboard-App/newapp2.png","hash":"44883a9a4106ecbc6af817295f11361ae6b9ad54","modified":1624259389387},{"_id":"source/_posts/Dashboard-App/newapp3.png","hash":"21716018e67672be1a6de3203ac5ce5d5bc2b45d","modified":1624259573133},{"_id":"source/_posts/Dashboard-App/newapp.png","hash":"8f6082dd0fe89e7c20220513bc259af101406907","modified":1624259287663},{"_id":"source/_posts/Dashboard-App/3.record.png","hash":"4170c85e37b9793115fe86539fcb5484fccd08e8","modified":1624248312053},{"_id":"source/_posts/Dashboard-App/8.avatar.png","hash":"f276ffc81cb548e12ba8d61f0de820c8cbed7803","modified":1624247174379},{"_id":"source/_posts/Dashboard-App/market.png","hash":"79f9bed5278b89b3789ce5dbc84ab63654286cb9","modified":1624250382861},{"_id":"source/_posts/Dashboard-App/newapp4.png","hash":"15f6183378a706a79a21041da7b10d853bce8ba2","modified":1624259851101},{"_id":"source/_posts/Dashboard-App/restrictkey.png","hash":"85028ece88d826d57502774a8b32bc66a0dca786","modified":1624250320231},{"_id":"source/_posts/Dashboard-App/apikey.png","hash":"597c85296b939e5a962bfad5cce80b7b354f7c9f","modified":1624250233606},{"_id":"source/_posts/Dashboard-App/newapple3.png","hash":"80c05617f8b2f55f74943e750774e7722ce006b0","modified":1624268833650},{"_id":"source/_posts/Dashboard-App/newapple2.png","hash":"357a157752d3d94d4bd7e2bfab383c729ca457f9","modified":1624268829365},{"_id":"source/_posts/Dashboard-App/google3.png","hash":"9f13574bf2b3bc2cbb833802d9fdd43aa8cc298a","modified":1624270911288},{"_id":"source/_posts/Dashboard-App/google2.png","hash":"2443e01fce7c8577cb9afb0be018aea47a23cf4f","modified":1624270905899},{"_id":"source/_posts/Dashboard-App/google.png","hash":"3225009aa61c482efe141727416a09b1ea90d9dd","modified":1624270515305},{"_id":"public/post-sitemap.xml","hash":"f2c4c422618ac870cc1bbd18213b9e8aa3204aa3","modified":1624280285040},{"_id":"public/tag-sitemap.xml","hash":"5474eec8ba0fb2db790d42da0c81669b4578d283","modified":1624280285041},{"_id":"public/page-sitemap.xml","hash":"100fec7d05dcc766ca76b8dad3909b6e0c6edb66","modified":1624280285331},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1624280285331},{"_id":"public/sitemap.xml","hash":"4996ae49ddb8719cc3cb2f987aeac49300abccc1","modified":1624280285425},{"_id":"public/404.html","hash":"883681fb5aab406175b0f0beda11da549bb3c072","modified":1624280285443},{"_id":"public/tags/index.html","hash":"8857b677112ba9be67440969b066ba7c5b972776","modified":1624280285444},{"_id":"public/MyProject/index.html","hash":"245b9424963933770a951d0e0e7d54a066191159","modified":1624280285444},{"_id":"public/Dashboard-App/index.html","hash":"39db9ea5289952ef03a8cfd5652a522a5bf61888","modified":1624280285444},{"_id":"public/MessengerClone/index.html","hash":"7224b04e3a153e0ccaef54ed680437eaa3104b86","modified":1624280285444},{"_id":"public/TodoApp/index.html","hash":"9c21a9335921d7b41bffd9254b9e037704119127","modified":1624280285444},{"_id":"public/Heroku/index.html","hash":"a7d4c8962a2049878e92e4f3dc5532e2b0567b17","modified":1624280285444},{"_id":"public/Doctorally/index.html","hash":"d0866423aca3d12d7f3cfa98c70eca6bc49a4f3e","modified":1624280285444},{"_id":"public/Scholarship/index.html","hash":"655754bff57d4839d0c62cd188ce9a2f6651ae94","modified":1624280285444},{"_id":"public/Intro/index.html","hash":"576aac52e8d487b74ee59bd034e47f13d783fb85","modified":1624280285444},{"_id":"public/CreateBlog/index.html","hash":"68c423ddbc070b951659515f5fb6a9f858653b6b","modified":1624280285444},{"_id":"public/about/index.html","hash":"3e9e532dc5a40e286bf2c5a0c2280cb8ec714b62","modified":1624280285444},{"_id":"public/archive/index.html","hash":"5fee5ef7ac110be4a14c598fdc4d4c1a9c1f95d2","modified":1624280285444},{"_id":"public/archives/index.html","hash":"d10310e745f35e26fe0859d053f5a8c395aa56af","modified":1624280285444},{"_id":"public/archives/2020/index.html","hash":"ee7d413fb21f226fcd9ca6ebdd7b938d0cd1a0a2","modified":1624280285444},{"_id":"public/archives/2020/03/index.html","hash":"293df0475e14f41b295ddf6f21c39d37908e207a","modified":1624280285444},{"_id":"public/archives/2020/04/index.html","hash":"1e9f3b6c87c244b362482fb20276c513381a30c3","modified":1624280285444},{"_id":"public/archives/2020/10/index.html","hash":"64c65a46a6cfd87e88692ef0d51efc73ce2283bc","modified":1624280285444},{"_id":"public/archives/2020/12/index.html","hash":"9d9999c2c09f148a17817af058e6214e7aec8654","modified":1624280285444},{"_id":"public/archives/2021/index.html","hash":"a906e937e9ab6236ba3d503d82459ef23d75df42","modified":1624280285444},{"_id":"public/archives/2021/02/index.html","hash":"a295fa7773bbf8312cdd644a7abbe7e58f8e3dbc","modified":1624280285444},{"_id":"public/archives/2021/06/index.html","hash":"19da0ff57b4878f047d574a8a5827a31c521fd33","modified":1624280285444},{"_id":"public/archives/2022/index.html","hash":"884848388b2b08a9e9d834612f7ed28faa71c84b","modified":1624280285444},{"_id":"public/archives/2022/09/index.html","hash":"f49a443bb00a83cf23122d43c3b320fe3749a5ab","modified":1624280285444},{"_id":"public/index.html","hash":"add41c7eaea14420c253edfc0352504eaab47084","modified":1624280285444},{"_id":"public/tags/javascript/index.html","hash":"cdecb9ef98ba61c2b133a263c62c8204b16f6725","modified":1624280285444},{"_id":"public/tags/reactjs/index.html","hash":"014c6507fc910de68cff196bb897e01c6e8fba9f","modified":1624280285444},{"_id":"public/tags/nodejs/index.html","hash":"aa273c462eddca2be5f9153989138526c1d86465","modified":1624280285444},{"_id":"public/tags/api/index.html","hash":"e8648bac59fff1969a8747982a564362b339aa25","modified":1624280285444},{"_id":"public/tags/intro/index.html","hash":"5325645d62e092f5711a887cea08961fc911e688","modified":1624280285444},{"_id":"public/tags/heroku/index.html","hash":"e4a262cbb539e772427eb6e0f826eec27d43b0cb","modified":1624280285444},{"_id":"public/tags/mongodb/index.html","hash":"26298383d8d6fb20469de8f7336506d038c76085","modified":1624280285444},{"_id":"public/tags/firebase/index.html","hash":"a5e232fae32748dc9ffd72dfde39b8501fa95a96","modified":1624280285444},{"_id":"public/tags/scholarships/index.html","hash":"3cf4a620a97f63d6a8a21e5cf9af0c2714523853","modified":1624280285444},{"_id":"public/tags/CS/index.html","hash":"415ff10c8a3a7d458963ce92db285b2bf47610cf","modified":1624280285444},{"_id":"public/tags/all-projects/index.html","hash":"80181df0c31a4cc17bda020130fffd45ac7f35d8","modified":1624280285444},{"_id":"public/tags/python/index.html","hash":"a5a696723c5b2605aaa951294969ce66c408b6ad","modified":1624280285444},{"_id":"public/tags/php/index.html","hash":"50a960707fdcb4eef4de45b9106be353d5baff36","modified":1624280285444},{"_id":"public/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1624280285462},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1624280285462},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1624280285462},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1624280285462},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1624280285462},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1624280285462},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1624280285462},{"_id":"public/CreateBlog/folderStructure.PNG","hash":"ef78b1788c999b9affb105e85289de92d23482df","modified":1624280285462},{"_id":"public/CreateBlog/actionFlow.PNG","hash":"d35a5d1405e5e12359c17540fbf54e36b89aeba6","modified":1624280285462},{"_id":"public/CreateBlog/mernpic.jpg","hash":"3a34f8ebb30d0ebec4bac10c802ad6e3f37e1bcd","modified":1624280285462},{"_id":"public/Heroku/download.jpg","hash":"624c7b1d5a08735c27653a11791c6e4594df9fcd","modified":1624280285462},{"_id":"public/Heroku/folder.png","hash":"2430df9fc70da3642aa39e7c151f79574cfee7e2","modified":1624280285462},{"_id":"public/Heroku/heroku.png","hash":"2430df9fc70da3642aa39e7c151f79574cfee7e2","modified":1624280285462},{"_id":"public/Heroku/heroku1.png","hash":"95e72784ae50a7b6388c2b83759b8a6b89731d6a","modified":1624280285462},{"_id":"public/MessengerClone/605f46e0efe323669bc2a5a5b7b3835b.png","hash":"139bafdc27d7f862a14ef0a436cac78fff3fba9f","modified":1624280285462},{"_id":"public/Heroku/mongodb.png","hash":"29dfbc35ff07c1c23d657eaec9755eaaa5618ebd","modified":1624280285462},{"_id":"public/TodoApp/1_qK3XfC6olCxJcygxPx1zBA.png","hash":"72147cc4a7d436005e8f45fc969668254d6ddb91","modified":1624280285462},{"_id":"public/TodoApp/1_PRfM4daPnB3mGU-CCAb7IQ.png","hash":"a49f7c7ad5ddbcfb12615c15d2976253352a5c92","modified":1624280285462},{"_id":"public/TodoApp/firebase-blog.png","hash":"51b96173f6857eea8e16d9855c805652073c9cdb","modified":1624280285462},{"_id":"public/TodoApp/maxresdefault (1).jpg","hash":"4df8d38abb0babcb10c60f99e3b8ed03054b34e5","modified":1624280285462},{"_id":"public/TodoApp/maxresdefault.jpg","hash":"881861794ac004cc9dc342b9b27b3a5d1642f260","modified":1624280285462},{"_id":"public/MyProject/chatapp.PNG","hash":"81ef8db9b9ed771c8bc45fab6fad5aa7ea188f9e","modified":1624280285462},{"_id":"public/Scholarship/cspic.PNG","hash":"cfb4c2cb8c22aa5dac857de939b7f294bf9e2287","modified":1624280285462},{"_id":"public/Scholarship/postimg2.jpg","hash":"e3b9fa6e97e9b6525e443fb40893814a4da188a5","modified":1624280285462},{"_id":"public/Scholarship/scholarship.jpg","hash":"c66c4f4cac2782a8f469ac87a4e1447f5b7a5aff","modified":1624280285462},{"_id":"public/Scholarship/test3.jpg_fit=scale&background=000000","hash":"942b50aab86e827babf19dffc5f862885243ae4c","modified":1624280285462},{"_id":"public/Scholarship/test3.jpg","hash":"942b50aab86e827babf19dffc5f862885243ae4c","modified":1624280285462},{"_id":"public/Scholarship/test2.jpg","hash":"e8cf5d0018afcdc2e652a4c55c9e9aa8e277cb32","modified":1624280285462},{"_id":"public/Scholarship/test5.PNG","hash":"5dc8b7c7ce28e8953df7961b8eb8be212de9473a","modified":1624280285462},{"_id":"public/Scholarship/thumbnail2.jpg","hash":"dcd2d4619d811d195e8fd054f81fd026c4d9c179","modified":1624280285462},{"_id":"public/img/mainpicture.jpg","hash":"ad784d28aa8ea8a782c205f71665a06cbcc6f4a1","modified":1624280285685},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1624280285685},{"_id":"public/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1624280285687},{"_id":"public/CreateBlog/mongodb.PNG","hash":"c9f518d9a4317f12443aec6b879fafb6e0a7d37e","modified":1624280285687},{"_id":"public/CreateBlog/mongoexample.PNG","hash":"43a4427a1fa66c5b5a221ed0c1b7132ad8d462b9","modified":1624280285687},{"_id":"public/Doctorally/hospitalsign1.jpg","hash":"28e424d537336a71e8a59b28379fbd332b323c66","modified":1624280285687},{"_id":"public/Intro/firstcode.PNG","hash":"a66ff268c1a98ec05db7256511f4f50f90e713ce","modified":1624280285687},{"_id":"public/TodoApp/env.png","hash":"2ba5a070ab5829e9f6de499f4829539662c26ecb","modified":1624280285687},{"_id":"public/TodoApp/featured.png","hash":"eaf75f3cf8996ff5a8f2eede0b63863d3de98a27","modified":1624280285688},{"_id":"public/TodoApp/firebase.png","hash":"fcb1e85dcdcf804a24f26f3d571d1c8c982d96bc","modified":1624280285688},{"_id":"public/TodoApp/todo.png","hash":"2ba5a070ab5829e9f6de499f4829539662c26ecb","modified":1624280285688},{"_id":"public/MyProject/headerimg1.jpg","hash":"01dbfc703e9cf316d3be80b697ceafbd845101aa","modified":1624280285688},{"_id":"public/Scholarship/postimg.jpg","hash":"fa759d3ffaa04e192d76467c4c7ee2fd5d66b76b","modified":1624280285688},{"_id":"public/Scholarship/thumbnail.jpg","hash":"b7a87f7f279eda49064969f439e1e6ab6b1356d8","modified":1624280285688},{"_id":"public/Dashboard-App/newapple.png","hash":"95f9ae5f64628e0ac21f511e41eeffb3b1883a72","modified":1624280285688},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1624280285705},{"_id":"public/css/toc.css","hash":"2062bf4e5b219654e0d4bf470f5eef1be213da95","modified":1624280285705},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1624280285705},{"_id":"public/css/highlight.css","hash":"03d1f0a648e9bdf7b1f57d217313cbac5d0c7eb1","modified":1624280285705},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1624280285705},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1624280285705},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1624280285705},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1624280285706},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1624280285706},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1624280285706},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1624280285706},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1624280285706},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1624280285706},{"_id":"public/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1624280285706},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1624280285706},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1624280285706},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1624280285706},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1624280285706},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1624280285706},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1624280285706},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1624280285706},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1624280285706},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1624280285706},{"_id":"public/Dashboard-App/signup.png","hash":"d6d0b10ff32b0735c105745620635e68a09c7820","modified":1624280285706},{"_id":"public/Doctorally/doctorally.png","hash":"554d856047c347f99a757668f6ac08e594372015","modified":1624280285706},{"_id":"public/Doctorally/material.png","hash":"92374bdf2b641ad6a57b8d5f3ed3eb061b82bc35","modified":1624280285706},{"_id":"public/Intro/codefun.png","hash":"793a757dbc426c8301d9e70ea362eb77efb566e3","modified":1624280285706},{"_id":"public/MyProject/fusion.PNG","hash":"20d5e8260b6cc21ceb1a3280579cfb453b97264b","modified":1624280285706},{"_id":"public/Dashboard-App/google3.png","hash":"9f13574bf2b3bc2cbb833802d9fdd43aa8cc298a","modified":1624280285706},{"_id":"public/img/header_img/tf-logo-dark.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1624280285716},{"_id":"public/Doctorally/mongodb.png","hash":"886cb21bc61d5fea2c3ec26fbb22f919177ec7c8","modified":1624280285717},{"_id":"public/Intro/demo.jpg","hash":"7d7949885cb1f3eef04c1f92cf649b8823379309","modified":1624280285717},{"_id":"public/MessengerClone/back4app-blackburn-resource-management-1140x515.png","hash":"9f1272bb2fae0f3399db5aa4e5fe102f6bdb1a9c","modified":1624280285717},{"_id":"public/MyProject/riceapps.PNG","hash":"2f069c966a7b04638df882a2c033c60dfd834afc","modified":1624280285717},{"_id":"public/MyProject/doctorally.PNG","hash":"ca114bd95955d48e7295babd974e7076e0aa176d","modified":1624280285717},{"_id":"public/MessengerClone/storage.png","hash":"626051524689a456bf50ade4805fd826ebd0865a","modified":1624280285717},{"_id":"public/Heroku/flask2.jpg","hash":"78ee2997e69b8d6d56b59dc288fb3f269c65b51d","modified":1624280285717},{"_id":"public/TodoApp/addproject.png","hash":"1c4c7c7bb725cdc5c8fde9b352da1855c40033ee","modified":1624280285717},{"_id":"public/Scholarship/test4.jpg","hash":"317e2cbbb8f5259d48d0ecc99fec5471dd7c3019","modified":1624280285717},{"_id":"public/img/header_img/demo.jpg","hash":"7d7949885cb1f3eef04c1f92cf649b8823379309","modified":1624280285722},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1624280285723},{"_id":"public/Scholarship/test1.jpg","hash":"fc702ecf62b3a82c72a2b58b56ab0ccbc10701c4","modified":1624280285723},{"_id":"public/Dashboard-App/newapp2.png","hash":"44883a9a4106ecbc6af817295f11361ae6b9ad54","modified":1624280285723},{"_id":"public/Dashboard-App/newapp3.png","hash":"21716018e67672be1a6de3203ac5ce5d5bc2b45d","modified":1624280285723},{"_id":"public/Dashboard-App/google2.png","hash":"2443e01fce7c8577cb9afb0be018aea47a23cf4f","modified":1624280285723},{"_id":"public/img/ironman-draw.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1624280285731},{"_id":"public/Scholarship/test6.PNG","hash":"98076e42896125b9d68e1b98a568ec286b7a7535","modified":1624280285731},{"_id":"public/Dashboard-App/newapp.png","hash":"8f6082dd0fe89e7c20220513bc259af101406907","modified":1624280285731},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1624280285737},{"_id":"public/MessengerClone/sideconver.png","hash":"e32c2be9015530a83c0742b3ebce178642224f47","modified":1624280285737},{"_id":"public/TodoApp/web.png","hash":"35019348b96b584dd5b53ef9fe627211484b335b","modified":1624280285737},{"_id":"public/MessengerClone/sideleft.png","hash":"5fd172f8e82ff1513095a8c4d400a18f9c5b27c7","modified":1624280285743},{"_id":"public/Dashboard-App/navigator.png","hash":"c919191ef0fe10f9bdab394416d432c2a849f232","modified":1624280285743},{"_id":"public/MessengerClone/mainmessage.png","hash":"fc09e91b7eaecf768c1c6947711345e6159c3358","modified":1624280285755},{"_id":"public/Dashboard-App/newapp4.png","hash":"15f6183378a706a79a21041da7b10d853bce8ba2","modified":1624280285755},{"_id":"public/Dashboard-App/market.png","hash":"79f9bed5278b89b3789ce5dbc84ab63654286cb9","modified":1624280285755},{"_id":"public/MyProject/software-engineering-stock.jpg","hash":"d860fb49e66322681059d023fba95e58b4bb6c53","modified":1624280285760},{"_id":"public/MessengerClone/allusers.png","hash":"898942d7fee08e3d2bfafb660fc90b706b436ccf","modified":1624280285760},{"_id":"public/MyProject/frame7.png","hash":"0b8a74654ad1e39d1973444815ca0c4b1c8c6ac8","modified":1624280285761},{"_id":"public/Dashboard-App/3.record.png","hash":"4170c85e37b9793115fe86539fcb5484fccd08e8","modified":1624280285761},{"_id":"public/Doctorally/Hospital.png","hash":"4aeab9f4a73536bb660b48b42d6a0dd43bebb710","modified":1624280285764},{"_id":"public/Dashboard-App/8.avatar.png","hash":"f276ffc81cb548e12ba8d61f0de820c8cbed7803","modified":1624280285766},{"_id":"public/Dashboard-App/restrictkey.png","hash":"85028ece88d826d57502774a8b32bc66a0dca786","modified":1624280285767},{"_id":"public/Dashboard-App/apikey.png","hash":"597c85296b939e5a962bfad5cce80b7b354f7c9f","modified":1624280285774},{"_id":"public/Dashboard-App/newapple3.png","hash":"80c05617f8b2f55f74943e750774e7722ce006b0","modified":1624280285774},{"_id":"public/Dashboard-App/google.png","hash":"3225009aa61c482efe141727416a09b1ea90d9dd","modified":1624280285774},{"_id":"public/MyProject/minhanh.png","hash":"394d1356d87f1fbde6a74763ac725afb1addebd0","modified":1624280285789},{"_id":"public/MessengerClone/reduxstructure.png","hash":"927b9cd02fc7bb2ee09115eb0da07f6c1d37a47d","modified":1624280285798},{"_id":"public/Dashboard-App/newapple2.png","hash":"357a157752d3d94d4bd7e2bfab383c729ca457f9","modified":1624280285798},{"_id":"public/MessengerClone/dashboard.png","hash":"7483e806a254adc992ecab95143f07a3118bc7f0","modified":1624280285798},{"_id":"public/MyProject/software_shutterstock_1290773869.jpg","hash":"2d1393e80c12613328cd55426d896d9ce5f847f6","modified":1624280285799},{"_id":"public/img/header_img/main_pic_blog.JPG","hash":"ef48e45f26306bc53f9245aeb7e86ed99f7f9297","modified":1624280285802},{"_id":"public/MessengerClone/message.png","hash":"14392c8026149cb3fb0a7d0e6b5d11f4675a434c","modified":1624280285804},{"_id":"public/img/header_img/tag-bg.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1624280285805},{"_id":"public/Dashboard-App/welcome.png","hash":"257f8268b88e7c8c656515b7a6c926cdefdc06c3","modified":1624280285805},{"_id":"public/MyProject/movie.png","hash":"5d24df4cee6e67208ce3cc402b6876faec716a64","modified":1624280285806},{"_id":"public/img/beantech-desktop.png","hash":"4a8f8b209c9db8fd5209f15b8e4590525e258b0f","modified":1624280285808},{"_id":"public/MyProject/cleen.png","hash":"8e2d033cce235fbfc716d79e474c41799bd913dc","modified":1624280285809},{"_id":"public/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1624280285814},{"_id":"public/img/header_img/home-bg-2-dark.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1624280285815},{"_id":"public/Intro/design2.PNG","hash":"5ebcb58dc7bed9727fd19fca4ce29a632877dec5","modified":1624280285815},{"_id":"public/img/header_img/archive-bg.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1624280285823},{"_id":"public/Intro/design1.PNG","hash":"78cf40c17fad13becc6be553c05e2637e3fb9640","modified":1624280285829},{"_id":"source/_posts/Dashboard-App/header.png","hash":"dddd7827f90f4f50f0ab1127e94bb1ff20ad8667","modified":1624282496257},{"_id":"source/_posts/MyProject/3.record.png","hash":"4170c85e37b9793115fe86539fcb5484fccd08e8","modified":1624281338876},{"_id":"source/_posts/MyProject/link.png","hash":"398fc99496ef34ae2b3005729a49ca3c4edf0529","modified":1624280927098},{"_id":"source/_posts/MyProject/messenger.png","hash":"9e5d9f58200bc2dbaa8ced890ac48c3baf4f0761","modified":1624282098790},{"_id":"source/img/main2.jpg","hash":"94e8d46ae649b4e5d7a396c09c318098f5c85d17","modified":1624283577298},{"_id":"source/_posts/Dashboard-App/header2.jpg","hash":"a8b042c6c17242dc8863aba411b257aafbad5102","modified":1624282674901},{"_id":"source/img/main_photo.JPG","hash":"94f95657d04b5f1d4e47797cf6e78932baa684ad","modified":1624283638833}],"Category":[],"Data":[],"Page":[{"layout":"404","description":null,"header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2021-06-15T18:49:34.531Z","updated":"2021-06-15T18:07:50.710Z","path":"404.html","title":"","comments":1,"_id":"ckq5zemqz0000c6sbmda8gr1q","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T21:48:33.000Z","description":"Wish for the Best, Prepare for the Worst","header-img":"img/header_img/Iron-Man-3.jpg","comments":1,"_content":"\n## Welcome everyone to my code blog! You can check out all of my projects in this link below\n**[Quang's projects](http://decodecraft.com/MyProject/)**\n\nMy name is Nhat Quang (my ingame name is Snoo) and I am 18 years old. My home is in Hanoi Vietnam. I studied at Hanoi Amsterdam for 7 years class 13-20 and will be an Engineering Student at Rice University class 2024 (Houston, Texas). \n\nThere sure are a lot of great coding and programming blogs you can find on the internet and I hope that this blog can become useful or interesting to you. I believe, as for most programmers and developers, keeping a blog can help express  ideas and thoughts in words which makes the flow of thinking clearer. \n\nI began my coding journey 3 years ago and I have learnt and grown a lot since then. However, the high school years have kept me so busy that only until now do I have the time to keep a blog running. \n\nI am a math student and I really love the way mathematics and coding connects to each other. Every time I fix a bug or  finish a problem or learn a new technique or algorithm, excitement sparks inside me. Through my time involving in the world of programmers, I am specifically fascinated with fullstack developers (for now) so I love creating websites and applications. I believe that crafting a functional website from scratch can really help me understand the mind process of developers and improve my coding skills. \n\nI am definitely not a professional programmer so I don't expect to \"teach\" anyone how to code. I created this blog just to share with everyone the experiences, techniques and knowledge that I collected during my journey with coding. Seeing dynamic and beautiful websites everyday with increasingly advanced techniques inspired me to learn coding everyday. \n\nThank you for reading my story and thoughts. \n### I hope you will enjoy this blog and maybe find something interesting that is connected to your lives. I believe great things can be achieved from small lines of code! \n\n\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"Wish for the Best, Prepare for the Worst\"\nheader-img: \"img/header_img/Iron-Man-3.jpg\"\ncomments: true\n---\n\n## Welcome everyone to my code blog! You can check out all of my projects in this link below\n**[Quang's projects](http://decodecraft.com/MyProject/)**\n\nMy name is Nhat Quang (my ingame name is Snoo) and I am 18 years old. My home is in Hanoi Vietnam. I studied at Hanoi Amsterdam for 7 years class 13-20 and will be an Engineering Student at Rice University class 2024 (Houston, Texas). \n\nThere sure are a lot of great coding and programming blogs you can find on the internet and I hope that this blog can become useful or interesting to you. I believe, as for most programmers and developers, keeping a blog can help express  ideas and thoughts in words which makes the flow of thinking clearer. \n\nI began my coding journey 3 years ago and I have learnt and grown a lot since then. However, the high school years have kept me so busy that only until now do I have the time to keep a blog running. \n\nI am a math student and I really love the way mathematics and coding connects to each other. Every time I fix a bug or  finish a problem or learn a new technique or algorithm, excitement sparks inside me. Through my time involving in the world of programmers, I am specifically fascinated with fullstack developers (for now) so I love creating websites and applications. I believe that crafting a functional website from scratch can really help me understand the mind process of developers and improve my coding skills. \n\nI am definitely not a professional programmer so I don't expect to \"teach\" anyone how to code. I created this blog just to share with everyone the experiences, techniques and knowledge that I collected during my journey with coding. Seeing dynamic and beautiful websites everyday with increasingly advanced techniques inspired me to learn coding everyday. \n\nThank you for reading my story and thoughts. \n### I hope you will enjoy this blog and maybe find something interesting that is connected to your lives. I believe great things can be achieved from small lines of code! \n\n\n\n","updated":"2021-06-15T18:07:50.879Z","path":"about/index.html","_id":"ckq5zemso0002c6sbmqmohuo1","content":"<h2><span id=\"welcome-everyone-to-my-code-blog-you-can-check-out-all-of-my-projects-in-this-link-below\">Welcome everyone to my code blog! You can check out all of my projects in this link below</span></h2>\n<p><strong><a href=\"http://decodecraft.com/MyProject/\">Quang’s projects</a></strong></p>\n<p>My name is Nhat Quang (my ingame name is Snoo) and I am 18 years old. My home is in Hanoi Vietnam. I studied at Hanoi Amsterdam for 7 years class 13-20 and will be an Engineering Student at Rice University class 2024 (Houston, Texas).</p>\n<p>There sure are a lot of great coding and programming blogs you can find on the internet and I hope that this blog can become useful or interesting to you. I believe, as for most programmers and developers, keeping a blog can help express  ideas and thoughts in words which makes the flow of thinking clearer.</p>\n<p>I began my coding journey 3 years ago and I have learnt and grown a lot since then. However, the high school years have kept me so busy that only until now do I have the time to keep a blog running.</p>\n<p>I am a math student and I really love the way mathematics and coding connects to each other. Every time I fix a bug or  finish a problem or learn a new technique or algorithm, excitement sparks inside me. Through my time involving in the world of programmers, I am specifically fascinated with fullstack developers (for now) so I love creating websites and applications. I believe that crafting a functional website from scratch can really help me understand the mind process of developers and improve my coding skills.</p>\n<p>I am definitely not a professional programmer so I don’t expect to “teach” anyone how to code. I created this blog just to share with everyone the experiences, techniques and knowledge that I collected during my journey with coding. Seeing dynamic and beautiful websites everyday with increasingly advanced techniques inspired me to learn coding everyday.</p>\n<p>Thank you for reading my story and thoughts.</p>\n<h3><span id=\"i-hope-you-will-enjoy-this-blog-and-maybe-find-something-interesting-that-is-connected-to-your-lives-i-believe-great-things-can-be-achieved-from-small-lines-of-code\">I hope you will enjoy this blog and maybe find something interesting that is connected to your lives. I believe great things can be achieved from small lines of code!</span></h3>\n","site":{"data":{}},"excerpt":"","more":"<h2>Welcome everyone to my code blog! You can check out all of my projects in this link below</h2>\n<p><strong><a href=\"http://decodecraft.com/MyProject/\">Quang’s projects</a></strong></p>\n<p>My name is Nhat Quang (my ingame name is Snoo) and I am 18 years old. My home is in Hanoi Vietnam. I studied at Hanoi Amsterdam for 7 years class 13-20 and will be an Engineering Student at Rice University class 2024 (Houston, Texas).</p>\n<p>There sure are a lot of great coding and programming blogs you can find on the internet and I hope that this blog can become useful or interesting to you. I believe, as for most programmers and developers, keeping a blog can help express  ideas and thoughts in words which makes the flow of thinking clearer.</p>\n<p>I began my coding journey 3 years ago and I have learnt and grown a lot since then. However, the high school years have kept me so busy that only until now do I have the time to keep a blog running.</p>\n<p>I am a math student and I really love the way mathematics and coding connects to each other. Every time I fix a bug or  finish a problem or learn a new technique or algorithm, excitement sparks inside me. Through my time involving in the world of programmers, I am specifically fascinated with fullstack developers (for now) so I love creating websites and applications. I believe that crafting a functional website from scratch can really help me understand the mind process of developers and improve my coding skills.</p>\n<p>I am definitely not a professional programmer so I don’t expect to “teach” anyone how to code. I created this blog just to share with everyone the experiences, techniques and knowledge that I collected during my journey with coding. Seeing dynamic and beautiful websites everyday with increasingly advanced techniques inspired me to learn coding everyday.</p>\n<p>Thank you for reading my story and thoughts.</p>\n<h3>I hope you will enjoy this blog and maybe find something interesting that is connected to your lives. I believe great things can be achieved from small lines of code!</h3>\n"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/header_img/tag-bg.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/header_img/tag-bg.png\"\n---\n","date":"2021-06-15T18:49:37.145Z","updated":"2021-06-15T18:07:50.926Z","path":"tags/index.html","comments":1,"_id":"ckq5zemsr0004c6sbhi8kwo7h","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archive","title":"Archives","header-img":"img/header_img/archive-bg.png","comments":0,"date":"2017-03-20T13:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/archive-bg.png\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2021-06-15T18:07:50.879Z","path":"archive/index.html","_id":"ckq5zemsw0007c6sb3s3v2lfo","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Post#2 How to create a blog using M.E.R.N Stack","catalog":true,"date":"2020-03-27T11:41:59.000Z","subtitle":"25 min read","header-img":"mernpic.jpg","_content":"\n## This is going to be the first technical blog that I write and it is going to be super long but very helpful. Stay tuned !!  \n\n### What is M.E.R.N ? \n\nThis is a **\"stack\"**(combination) of different languages and technologies used to create a software or program. It is in short for MongoDB, Express, React, and Nodejs (Don't worry about these things yet I will explain them in just a moment) \n\nThe **M.E.R.N** stack uses \n- **MongoDB** as our database, storing information          \n- **Express and NodeJS** to build the server (backend) to our website  \n- **React** as our client-side (frontend) \n\n### What do we need in a blog ? \n\nI believe there are **3 major steps** of creating a simple blog (I am just a beginner so dont judge me if I miss any parts)\n\n1. A CRUD (Create, Read, Update, Delete) function for your posts \n2. Craft and store your posts in a store\n3. Launch and maintain your blog !! \n\n## Let's get to creating our app !! \n\n### 1. Create a React application \n\nAssume that you already have an editor (I prefer to use **Visual Studio Code**). Create a new folder to contain your app. \n\nYou will need to install [NodeJs](https://nodejs.org/en/download/) beforehand\n\nThere is an alternative for running the React App instead of npm (Nodejs Package Manager) which is [Yarn](https://www.npmjs.com/package/yarn) and I also prefer to use this.  \n\nSo I will create a new React App\n\n```bash\nyarn add create react-app (your app name)\ncd (your app name)\nyarn start \n```\n\n### 2. Install necessary dependencies\n\nDependencies are similar to library that can add additional features to your app and here we are going to install the following dependencies: **react-router, react router-dom**\n\nIn order to use react-router and react-router-dom, you need to import and inject a **BrowserRouter** in the **index.js** file such as below \n\n```javascript\nimport { BrowserRouter } from \"react-router-dom\";\nReactDOM.render(<BrowserRouter><Provider store={store}><App /></Provider></BrowserRouter>, document.getElementById('root'));\n\n```\n\n##  Now we start crafting our React application \n\n### Creating forms for CRUD (Add function) \n\nHandling Forms is probably the most important step in the frontend side. Here I will create 2 components which is **AddPost** to handle adding new posts and **PostList** to render all the posts we have. You should structure the folders so that you have a component folder to store all your components.\n\n{% asset_img folderStructure.PNG %}\n\nBelow is the setup for my **AddPost** component. Here we will pass an **addPost** as a **props** which later we will pass the actual function to add new post from the main App component. This component will return a form that includes 3 inputs for 3 main values of a post which are ***title, headline and content***.\n\nI also use the standard form handling which is setting a **postInfo** state that carries the attributes of the new post which are ***title, headline and content***. Whenever an input is changing (when the user is entering information) the postInfo will receive that value and update the state. \n\n```javascript\nconst AddPost = (props) => {\n  const {addPost} = props\n  // const id = useSelector((state) => state.ListPosts.length + 1)\n  const dispatch = useDispatch()\n\n  const [postInfo, setPostInfo] = useState({\n    // id: id,\n    title: \"\",\n    headline: \"\",\n    content: \"\"\n  })\n  const onSubmitHandler = (e) => {\n    e.preventDefault()\n    addPost(postInfo) \n    setPostInfo({\n      title:\"\",\n      headline:\"\",\n      content:\"\"\n    })\n  }\n\n  return (\n    <div>\n      <form onSubmit={onSubmitHandler}>\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Enter title\"\n          value={postInfo.title}\n          onChange={(e) => { setPostInfo({ ...postInfo, title: e.target.value }) }}\n        />\n       <input\n          type=\"text\"\n          name=\"headline\"\n          placeholder=\"Enter headline\"\n          value={postInfo.headline}\n          onChange={(e) => { setPostInfo({ ...postInfo, headline: e.target.value }) }}\n        />\n\n        <input\n          type=\"text\"\n          name=\"content\"\n          placeholder=\"Enter content\"\n          value={postInfo.content}\n          onChange={(e) => { setPostInfo({ ...postInfo, content: e.target.value }) }}\n        />\n        <input type=\"submit\" value=\"Submit\"/>\n\n      </form>\n```\nSo after the postInfo state receive all the updated information and we submit the form, it will triggered the function **addPost** with the information in **postInfo** \n\nTherefore, outside the App.js file, we will return the **AddPost** component within the **PostList** component, receiving function **addPost** as props\n\n```javascript\nconst PostLists = (props) => {\n  const addPost = (postInfo) =>{\n    const newPost = postInfo\n    dispatch(actionCreators.addPostToServer(newPost))\n  }\n   return (\n    <div>\n      <AddPost addPost={addPost}/>\n    <div>\n}\n```\n\nSo what is the **dispatch** in the image above. I will explain it below. \n\n### 3. Setting up the Redux Store\n\nSince state management is quite tiring between the components, I decided to use Redux and some advanced Redux including asynchronous functions. ***Therefore, I decided to keep all my posts as a ListPosts state in the Redux store***\n\nTraditionally, in the class based components, we usually have to set up complex things such as **mapStateToProps, mapDispatchToProps, connect**, ... to make redux work. However, React Hooks give us equivalent but handier way to handle redux. We will apply useSelector (mapStateToProps equivalent) and useDispatch (mapDispatchToProps). \n\n#### 1. Setting in the index.js file\n\nThis is quite a lot of work so I wouldnt come into too much detail in the post. First, we will need to install **react-redux and redux** dependencies. After that, we import **createStore and Provider** from react-redux. I recommend using an extra middleware (in my case, it is the ***logger*** function) (a function runs just before a **state** is changed) to monitor the state as we go along. Below is my complete setup for the index.js file without the imports\n\n```javascript\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst logger = (store) =>{\n  return next => {\n    return action => {\n      console.log(\"[Middleware] Dispatching\",action)\n      const result = next(action)\n      console.log(\"[Middleware] next state\", store.getState())\n      return result\n    }\n  } \n} //middleware\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(logger, thunk)))\n\nReactDOM.render(<BrowserRouter><Provider store={store}><App /></Provider></BrowserRouter>, document.getElementById('root'));\n```\nYou can see that we wrap our App with 2 things the **Provider** with the store (for the redux store) and the **BrowserRouter** for the route usage in our app\n\nIn our store, you add a middleware **logger** and a **thunk** (from redux thunk) in order to enable use using **asynchronous** code from the action folder of the Redux store later\n\n#### 2. Setting in the action folder \n\nThe action folders hold all the actions of a redux store (it is not recommended that you perform logic here). So we will define all of out actions in the action file such as create, read, update and delete\n\nHere is an example that I set up the create function in the action folder. \n\n```javascript\nexport const ADD_POST = \"ADD_POST\"\nexport const addPost = (newPost) =>{\n  return {\n    type:ADD_POST,\n    newPost:newPost\n  }\n}\n\nexport const addPostToServer = (newPost) =>{\n  return (dispatch) => {\n    Axios.post(\"http://localhost:5000/posts/add\",newPost)\n      .then((res)=>{\n        console.log(\"add to database success\")\n        dispatch(addPost(newPost))\n      })\n      .catch((err)=>{\n        console.log(err)\n      })\n  }\n}\n```\n\nThe upper function addPost is used to add a new post to both the **ListPosts** state in the store and to the database in the server (which I will mention later)\n\nUsually we would only defined the actions the in the action folder. However, I am using a very cool **dispatch** technique that allows me to perform asynchronous functions in the action folder. What I am doing here is that I am using Axios to call api to my server (which I will show you how to set up later) and update the database of my newest post.\n\n#### 3. Setting the reducer \n\nThis is probably the most **important** part of our Redux store. After receiving the action's definition and payload (additional information that comes with the action), it will perform all the actual functions here in the reducer (No asynchronous functions here) \n\n``` javascript\nconst initialState = {\n  ListPosts:[],\n  SearchList:[],\n  MailList:[]\n}\nconst reducer = (state = initialState, action) =>{\n  switch (action.type) {\n    case actionTypes.ADD_POST:\n      {\n        return {\n          ...state,\n          ListPosts:state.ListPosts.concat(action.newPost)\n        }\n      }\n  }\n}\n```\nInside the reducer, as I have mentioned before, I set a global state **ListPosts** to store all the posts that would be rendered to the screen.\n\nEvery time the action ***add new Post*** is dispatched, it will execute the asynchronous functions in the action, updating the database and then it will go through the reducer, performing the action of adding a new post to the global state **ListPosts**. So here we update both the ListPosts state and the database. The image below should help you out a bit with this action flow :)) \n\n{% asset_img actionFlow.PNG %}\n\nThere, we are pretty much done with the **Add new post** function in the client-side.\n\n### Creating a server for the website using Nodejs and Express\n\nI will create another folder called backend in my project and a file **server.js** inside that folder. This file will hold all of my server for the website. The settings are right below: \n\n```javascript\nconst express = require(\"express\")\nconst app = express()\nconst bodyParser = require(\"body-parser\")\nconst cors = require(\"cors\")\n\napp.use(cors());\napp.use(bodyParser.urlencoded({extended: true}));\napp.use(bodyParser.json());\n\napp.listen(5000,(err)=>{\n  if(err){\n    console.log(err)\n  }\n  else{\n    console.log(\"server start success\")\n  }\n})\n```\n\nWith all of the settings, our server is up and loaded at **port 5000** of our localhost. Which means that in a way or another, even though your website is not hosted yet, you are not running your app in your computer but on the **internet** now. Cool right ! \n\nI will start the server using the code below \n\n```javascript\nnode server.js \n```\n\nOur server is completed and now we are going to set up our **MongoDB** database and connect it to our server. \n\n### Setting up the database using MongoDB Compass \n\nYou will have to install the latest stable version of [Robo3T](https://robomongo.org/download) and [MongoDB Compass](https://www.mongodb.com/products/compass) in order to setup the database. Once you have installed and set everything up, your database should look like this: \n\n{% asset_img mongodb.PNG %}\n\nTypically, your **connection** will be localhost:27017 so you will be able to create a new database inside the connection. I create my own database and named it **\"ListPostsBlog\"**. Inside the database, there will be different collections and each **collection** should serve its own purpose. For example, I will have a collection ListPostsForBlog where I will store all my posts as **documents** like below \n\n{% asset_img mongoexample.PNG %}\n\nIf you get here, it means that you have successfully set up the database and it is ready to use. \n\n### Connecting the database to the server \n```javascript\n\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"http://localhost:3000\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  res.header(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS, PUT, DELETE\");\n  next();\n});\n\nmongoose.connect(\n  'mongodb://localhost/ListPostsBlog',\n  {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n  },\n  (err) => {\n      if (err) console.log(err)\n      else console.log(\"DB connect success!\");\n  }\n);\n```\nWe use the **app.use** function to connect the **backend** side (which runs at localhost:5000) to our **client** side (which runs at localhost:3000). Then we use mongoose, an updated library developed from mongodb to connect to our database. Notice that the link **'mongodb://localhost/ListPostsBlog'** must be precise in terms of connection and database name. (my database name is ListPostsBlog)\n\n### Structuring MongoDB \n\nSince MongoDB is a database, it allows us to structure the data inside and assign them **types** and other attributes\nsimilar to Microsoft Access that I learnt in grade 12 (something I see as really valuable) but MongoDB is **NoSQL** type database. \n\nBelow I construct my database for 3 main components of a blog using Schema (supported by Mongoose): title, headline and content (I assume...). This should be put in your model folder in your backend folder. \n\n```javascript\nconst PostSchema = new Schema({\n  title:{\n    type:String,\n    required: true\n  },\n  headline:{\n    type:String,\n    required:true\n  },\n  content:{\n    type:String,\n    required:true\n  },\n})\n\nmodule.exports = mongoose.model(\"Post\", PostSchema)\n```\n\nThis file will export a PostSchema (Post Attributes you can say) for each Post that I create. Thus, we can import this **PostSchema** to other files we are about to use.\n\n### Setting up more routers to call API \n\nWhat is API ?\n\nAPI is in short for Application Programming Interface, which is a standard **protocol** that developers use to transfer information. Lets say if you are doing actions in a website, the server wont get all the **\"raw data\"** that you are changing but different APIs of get, post, put, delete, ... and then process the APIs and send you back responses(More can be found [Here](https://topdev.vn/blog/api-la-gi/))\n\nSince in our client-side React-app such as the **add new post** function above, we use Axios to call and post new data to our server. \n\n```javascript\nAxios.post(\"http://localhost:5000/posts/add\",newPost)\n      .then((res)=>{\n        console.log(\"add to database success\")\n        dispatch(addPost(newPost))\n      })\n      .catch((err)=>{\n        console.log(err)\n      })\n```\n\nTherefore, right now in the server, we have to write routers to catch and process those APIs. So we will write a new router for rendering all the posts (get function) and creating new post\n\n```javascript\nPostRouter.get(\"/\",(req,res)=>{\n  ListPosts.find((err, posts)=>{\n    if(err){\n      console.log(err)\n    }\n    else{\n      res.json(posts)\n    }\n  })\n})\n\nPostRouter.post(\"/add\",(req,res)=>{\n  const post = new ListPosts(req.body) \n  post.save()\n    .then((post) => {\n      res.status(200).json({\"post\":\"Post added successfully\" })\n    })\n    .catch((err)=>{\n      res.status(400).send(\"unable to save to database\")\n    })\n})\n\n```\nHere the **ListPosts** is extracted from the **database**. \n- GET: the get-router is pretty simple, we will find in the database and render out all the data \n- POST: the post-router always come with the information of the new post (remember when we **dispatch** addnewPost action, we send the newest postInfo as additional information). So we will get that information using **req.body** (body of the our request), create a new Post using the type in the PostSchema and upload it to the database. \n\nSo we are done with the Post function (sounds really complex despite the simple click we do on websites everyday right :)) ) \n\n### Render our ListPosts (Read function)\n\nHere, we will render out all the posts in our global state ListPosts in the redux store. I will use the React Hook useEffect as a cleanup function, which is whenever the ListPosts state is changed, we will get the latest data from the database and pass it down to the ListPosts state. \n\n```javascript \n\nconst listPost = useSelector((state) => state.ListPosts)\n\nconst fetchData = async () => {\n  const response = await fetch(\"http://localhost:5000/posts\")\n  const resJson = await response.json()\n  return resJson\n}\n\nconst listPost = useSelector((state) => state.ListPosts)\nconst [invalidate, setInvalidate] = useState(true)\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (invalidate) {\n      fetchData()\n        .then((res) => {\n          dispatch(actionCreators.updateListPost(res))\n          // setListPost(res)\n          setInvalidate(false)\n        })\n        .catch((err) => {\n          console.log(err)\n        })\n    }\n  }, [invalidate]);\n\n```\n\nSince the **useEffect** hook will run whenever the value in the array is changed (here is invalidate changes), it will automatically **dispatch** to the action updateListPost in the action and get the newest data from the database \n\n```javascript\nlistPost.map((post, index) => {\n        return (\n          <div>\n          <Link to={`/posts/${post._id}`}>\n            <Post\n              key={index + 1}\n              title={post.title}\n              headline={post.headline}\n            />\n          </Link>\n          <button onClick={() => deletePost(post, post._id)}>Remove</button>\n          <UpdatePost index={index} post={post}/>            {/*UPDATE POST*/} \n          </div>\n```\n\nFrom there, we can easily render all the posts in the **ListPosts state** out to the screen easily using the map function. As you noticed, every time we **render** a post, we also add a **delete button** and a **Update Component** so that we can perform our delete and update functions. \n\n### Delete Function \n\nAll delete function always go with the **id** of the post we are deleting. So when we click the button \"DeletePost above\", we will dispatch the action below. \n\n```javascript\n  const deletePost = (post, _id) => {\n    dispatch(actionCreators.deletePostFromServer(post, _id))\n  }\n\n  listPost.map((post, index) => {\n        return (\n          <div>\n          <Link to={`/posts/${post._id}`}>\n            <Post\n              key={index + 1}\n              title={post.title}\n              headline={post.headline}\n            />\n          </Link>\n          <button onClick={() => deletePost(post, post._id)}>Remove</button>\n         </div>\n\n```\n\nAgain we are reaching to our Redux store, search for the action \"DELETE_POST\", **delete** the post from the database in our server and then go to our Reducer and **update** the new state for the ListPosts, just as we do with the add new Post function\n\nHere is my action folder: \n\n```javascript\nexport const deletePost = (post, _id) =>{\n  return {\n    type:DELETE_POST,\n    post:post,\n    _id:_id\n  }\n}\n\nexport const deletePostFromServer = (post, _id) =>{\n  return (dispatch) =>{\n    Axios.delete(`http://localhost:5000/posts/delete/${post._id}`)\n      .then((res)=>{\n        dispatch(deletePost(post, _id))\n      })\n      .catch((err)=>{\n        console.log(err)\n      })\n  }\n}\n```\n\nAs you notice, we still use Axios to call API to our server and pass down the 2 things in the delete function the actual **post** (so that later in the reducer we can use it to get the id of the **post** in the reducer) and the **_id** which is the id the Mongodb database automatically **generate** for us. \n\nNow we have successfully delete it in the database, we will update the **state** of ListPosts inside the redux store in the reducer file. \n```javascript\n    case actionTypes.DELETE_POST:\n      {\n        const newListPost = state.ListPosts.filter((post)=> post._id != action._id)\n        return{\n          ...state,\n          ListPosts: newListPost\n        }\n      }\n```\n\nWe use the filter method and comparing the **action** (that will just passed down) id with the id from all the posts and remove the right post. \n\n### Update Function \n\nThis is the last main **function** of our app and to be honest it is a bit similar to how we do with the create function. We begin by creating an UpdatePost component\n\n``` javascript\nconst UpdatePost = (props) => {\n  const { post, index } = props\n  const dispatch = useDispatch()\n\n  const [postInfo, setPostInfo] = useState({\n    title: \"\",\n    headline: \"\",\n    content: \"\"\n  })\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault()\n    const newPost = {\n      _id: post._id,\n      title: postInfo.title,\n      headline: postInfo.headline,\n      content: postInfo.content\n    }\n\n    Axios.post(`http://localhost:5000/posts/update/${newPost._id}`, postInfo)\n      .then((res) => {\n        console.log(res)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n    // dispatch(actionCreators.updatePostServer(newPost, index))\n    setPostInfo({\n      title: \"\",\n      headline: \"\",\n      content: \"\"\n    })\n  }\n\n  return (\n    <div>\n      <form onSubmit={onSubmitHandler}>\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Enter title\"\n          value={postInfo.title}\n          onChange={(e) => { setPostInfo({ ...postInfo, title: e.target.value }) }}\n        />\n       <input\n          type=\"text\"\n          name=\"headline\"\n          placeholder=\"Enter headline\"\n          value={postInfo.headline}\n          onChange={(e) => { setPostInfo({ ...postInfo, headline: e.target.value }) }}\n        />\n\n        <input\n          type=\"text\"\n          name=\"content\"\n          placeholder=\"Enter content\"\n          value={postInfo.content}\n          onChange={(e) => { setPostInfo({ ...postInfo, content: e.target.value }) }}\n        />\n        <input type=\"submit\" value=\"UpdatePost\" />\n\n      </form>\n```\nYou can see it is nearly identical to our add new **post** function. First we need to create 3 forms to handle the change of 3 main attributes of our post **title, headline, and content**.\n\nWe will also set a **postInfo** state to contain the updated information in each post and whenever the input is changing (the user is entering new information), this state will be updated. Then we will store the **postInfo** information along with the **_id** from the **post** that we pass a props for the UpdatePost component in an object **newPost**\n\nFinally, we use Axios to call to our API to post a new post to the exact id of the old post and we have updated it successfully. \n\n### Additional Functions\n\n#### Search Form\n\nThis is also a function that is used a lot when people are reading posts so I will show you how to add a search function in your app. \n\nThe core of the **search** function is that we will create a form. After the user submits that form (pressing search), we will filter our global **state** ListPosts all the posts that have the titles that include the value of the form. After getting a filtered list, we will create another global state called **SearchList** to contain the new list. We must do this because if we filtered directly in the main ListPosts state, it will automatically **remove** your posts whenever you search them.\n\nSo first in the Redux store, I will create another global state called SearchList\n\n```javascript\nconst initialState = {\n  ListPosts:[],\n  SearchList:[],\n}\n```\nNow we will create a SearchForm component to store our search function. \n\n```javascript\nconst SearchForm = (props) => {\n  const {searchPost} = props\n  const [value, setValue] = useState(\"\")\n  const [fireRedirect, setFireRedirect] = useState(false)\n  const dispatch = useDispatch()\n\n  // const useQuery = () => {\n  //   return new URLSearchParams(useLocation().search);\n  // };\n  // const query = useQuery();\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault()\n    setFireRedirect(true)\n    searchPost(value)\n    // dispatch(actionCreators.searchPost(value))\n  }\n  return (\n    <div>\n      <form onSubmit={onSubmitHandler}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n    {fireRedirect && <Redirect to={`/posts/?name=${value}`} />}\n    {/* <button onClick={() => dispatch(actionCreators.clearSearchList())}>Refresh</button> */}\n\n    </div>\n  )\n}\n```\n\nFirst, we still handle the forms in the standard way, creating a state that holds the value of the form and whenever the input is changing we will update the **state** with the corresponding value.\n\nWe also set a function **searchPost** as a props of this component along with the new **value** that was just updated. \n\nSo what does the **fireRedirect** do ? \n\nWell, this will help us redirect our page to the link \"..../posts/?name=\" similar to when we perform a **query** (search) on Google. For example if I **searched** \"hello\" on Google, I will be taken to the path \"www.google.com/search?q=hello\". \n\nSo I will do just as usual, dispatch the **action** SEARCH_POST. Here is my action folder: \n\n```javascript\nexport const searchPost = (value) =>{\n  return {\n    type:SEARCH_POST,\n    value:value //action payload dc gắn giá trị newPostListSearch\n  }\n}\n```\n\nIn my reducer I will set my newly created global state SearchList as the filtered ListPosts. \n\n```javascript\ncase actionTypes.SEARCH_POST:\n      {\n        const newPostListSearch = state.ListPosts.filter((post) => post.title.toLowerCase().includes(action.value.toLowerCase()))\n        return{\n          ...state,\n          SearchList: newPostListSearch\n        }\n      }\n```\n\nAnd so we are done with the **search** function\n\n## Conclusion\n\nSo we have officially done with our M.E.R.N stack app. If you want to look at the source code you can find it [Here](https://github.com/MRSNOO/PersonalBlog). It is a basic web and has no styling at all yet :)) so sorry for that. \n\n**This is the end of my first super long post, I hope you enjoyed it and learnt something new from it. Hope I can receive more support in the future !!**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/CreateBlog.md","raw":"---\ntitle: Post#2 How to create a blog using M.E.R.N Stack\ncatalog: true\ndate: 2020-03-27 18:41:59\nsubtitle: 25 min read\nheader-img: \"mernpic.jpg\"\ntags: [javascript, reactjs, nodejs]\n---\n\n## This is going to be the first technical blog that I write and it is going to be super long but very helpful. Stay tuned !!  \n\n### What is M.E.R.N ? \n\nThis is a **\"stack\"**(combination) of different languages and technologies used to create a software or program. It is in short for MongoDB, Express, React, and Nodejs (Don't worry about these things yet I will explain them in just a moment) \n\nThe **M.E.R.N** stack uses \n- **MongoDB** as our database, storing information          \n- **Express and NodeJS** to build the server (backend) to our website  \n- **React** as our client-side (frontend) \n\n### What do we need in a blog ? \n\nI believe there are **3 major steps** of creating a simple blog (I am just a beginner so dont judge me if I miss any parts)\n\n1. A CRUD (Create, Read, Update, Delete) function for your posts \n2. Craft and store your posts in a store\n3. Launch and maintain your blog !! \n\n## Let's get to creating our app !! \n\n### 1. Create a React application \n\nAssume that you already have an editor (I prefer to use **Visual Studio Code**). Create a new folder to contain your app. \n\nYou will need to install [NodeJs](https://nodejs.org/en/download/) beforehand\n\nThere is an alternative for running the React App instead of npm (Nodejs Package Manager) which is [Yarn](https://www.npmjs.com/package/yarn) and I also prefer to use this.  \n\nSo I will create a new React App\n\n```bash\nyarn add create react-app (your app name)\ncd (your app name)\nyarn start \n```\n\n### 2. Install necessary dependencies\n\nDependencies are similar to library that can add additional features to your app and here we are going to install the following dependencies: **react-router, react router-dom**\n\nIn order to use react-router and react-router-dom, you need to import and inject a **BrowserRouter** in the **index.js** file such as below \n\n```javascript\nimport { BrowserRouter } from \"react-router-dom\";\nReactDOM.render(<BrowserRouter><Provider store={store}><App /></Provider></BrowserRouter>, document.getElementById('root'));\n\n```\n\n##  Now we start crafting our React application \n\n### Creating forms for CRUD (Add function) \n\nHandling Forms is probably the most important step in the frontend side. Here I will create 2 components which is **AddPost** to handle adding new posts and **PostList** to render all the posts we have. You should structure the folders so that you have a component folder to store all your components.\n\n{% asset_img folderStructure.PNG %}\n\nBelow is the setup for my **AddPost** component. Here we will pass an **addPost** as a **props** which later we will pass the actual function to add new post from the main App component. This component will return a form that includes 3 inputs for 3 main values of a post which are ***title, headline and content***.\n\nI also use the standard form handling which is setting a **postInfo** state that carries the attributes of the new post which are ***title, headline and content***. Whenever an input is changing (when the user is entering information) the postInfo will receive that value and update the state. \n\n```javascript\nconst AddPost = (props) => {\n  const {addPost} = props\n  // const id = useSelector((state) => state.ListPosts.length + 1)\n  const dispatch = useDispatch()\n\n  const [postInfo, setPostInfo] = useState({\n    // id: id,\n    title: \"\",\n    headline: \"\",\n    content: \"\"\n  })\n  const onSubmitHandler = (e) => {\n    e.preventDefault()\n    addPost(postInfo) \n    setPostInfo({\n      title:\"\",\n      headline:\"\",\n      content:\"\"\n    })\n  }\n\n  return (\n    <div>\n      <form onSubmit={onSubmitHandler}>\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Enter title\"\n          value={postInfo.title}\n          onChange={(e) => { setPostInfo({ ...postInfo, title: e.target.value }) }}\n        />\n       <input\n          type=\"text\"\n          name=\"headline\"\n          placeholder=\"Enter headline\"\n          value={postInfo.headline}\n          onChange={(e) => { setPostInfo({ ...postInfo, headline: e.target.value }) }}\n        />\n\n        <input\n          type=\"text\"\n          name=\"content\"\n          placeholder=\"Enter content\"\n          value={postInfo.content}\n          onChange={(e) => { setPostInfo({ ...postInfo, content: e.target.value }) }}\n        />\n        <input type=\"submit\" value=\"Submit\"/>\n\n      </form>\n```\nSo after the postInfo state receive all the updated information and we submit the form, it will triggered the function **addPost** with the information in **postInfo** \n\nTherefore, outside the App.js file, we will return the **AddPost** component within the **PostList** component, receiving function **addPost** as props\n\n```javascript\nconst PostLists = (props) => {\n  const addPost = (postInfo) =>{\n    const newPost = postInfo\n    dispatch(actionCreators.addPostToServer(newPost))\n  }\n   return (\n    <div>\n      <AddPost addPost={addPost}/>\n    <div>\n}\n```\n\nSo what is the **dispatch** in the image above. I will explain it below. \n\n### 3. Setting up the Redux Store\n\nSince state management is quite tiring between the components, I decided to use Redux and some advanced Redux including asynchronous functions. ***Therefore, I decided to keep all my posts as a ListPosts state in the Redux store***\n\nTraditionally, in the class based components, we usually have to set up complex things such as **mapStateToProps, mapDispatchToProps, connect**, ... to make redux work. However, React Hooks give us equivalent but handier way to handle redux. We will apply useSelector (mapStateToProps equivalent) and useDispatch (mapDispatchToProps). \n\n#### 1. Setting in the index.js file\n\nThis is quite a lot of work so I wouldnt come into too much detail in the post. First, we will need to install **react-redux and redux** dependencies. After that, we import **createStore and Provider** from react-redux. I recommend using an extra middleware (in my case, it is the ***logger*** function) (a function runs just before a **state** is changed) to monitor the state as we go along. Below is my complete setup for the index.js file without the imports\n\n```javascript\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst logger = (store) =>{\n  return next => {\n    return action => {\n      console.log(\"[Middleware] Dispatching\",action)\n      const result = next(action)\n      console.log(\"[Middleware] next state\", store.getState())\n      return result\n    }\n  } \n} //middleware\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(logger, thunk)))\n\nReactDOM.render(<BrowserRouter><Provider store={store}><App /></Provider></BrowserRouter>, document.getElementById('root'));\n```\nYou can see that we wrap our App with 2 things the **Provider** with the store (for the redux store) and the **BrowserRouter** for the route usage in our app\n\nIn our store, you add a middleware **logger** and a **thunk** (from redux thunk) in order to enable use using **asynchronous** code from the action folder of the Redux store later\n\n#### 2. Setting in the action folder \n\nThe action folders hold all the actions of a redux store (it is not recommended that you perform logic here). So we will define all of out actions in the action file such as create, read, update and delete\n\nHere is an example that I set up the create function in the action folder. \n\n```javascript\nexport const ADD_POST = \"ADD_POST\"\nexport const addPost = (newPost) =>{\n  return {\n    type:ADD_POST,\n    newPost:newPost\n  }\n}\n\nexport const addPostToServer = (newPost) =>{\n  return (dispatch) => {\n    Axios.post(\"http://localhost:5000/posts/add\",newPost)\n      .then((res)=>{\n        console.log(\"add to database success\")\n        dispatch(addPost(newPost))\n      })\n      .catch((err)=>{\n        console.log(err)\n      })\n  }\n}\n```\n\nThe upper function addPost is used to add a new post to both the **ListPosts** state in the store and to the database in the server (which I will mention later)\n\nUsually we would only defined the actions the in the action folder. However, I am using a very cool **dispatch** technique that allows me to perform asynchronous functions in the action folder. What I am doing here is that I am using Axios to call api to my server (which I will show you how to set up later) and update the database of my newest post.\n\n#### 3. Setting the reducer \n\nThis is probably the most **important** part of our Redux store. After receiving the action's definition and payload (additional information that comes with the action), it will perform all the actual functions here in the reducer (No asynchronous functions here) \n\n``` javascript\nconst initialState = {\n  ListPosts:[],\n  SearchList:[],\n  MailList:[]\n}\nconst reducer = (state = initialState, action) =>{\n  switch (action.type) {\n    case actionTypes.ADD_POST:\n      {\n        return {\n          ...state,\n          ListPosts:state.ListPosts.concat(action.newPost)\n        }\n      }\n  }\n}\n```\nInside the reducer, as I have mentioned before, I set a global state **ListPosts** to store all the posts that would be rendered to the screen.\n\nEvery time the action ***add new Post*** is dispatched, it will execute the asynchronous functions in the action, updating the database and then it will go through the reducer, performing the action of adding a new post to the global state **ListPosts**. So here we update both the ListPosts state and the database. The image below should help you out a bit with this action flow :)) \n\n{% asset_img actionFlow.PNG %}\n\nThere, we are pretty much done with the **Add new post** function in the client-side.\n\n### Creating a server for the website using Nodejs and Express\n\nI will create another folder called backend in my project and a file **server.js** inside that folder. This file will hold all of my server for the website. The settings are right below: \n\n```javascript\nconst express = require(\"express\")\nconst app = express()\nconst bodyParser = require(\"body-parser\")\nconst cors = require(\"cors\")\n\napp.use(cors());\napp.use(bodyParser.urlencoded({extended: true}));\napp.use(bodyParser.json());\n\napp.listen(5000,(err)=>{\n  if(err){\n    console.log(err)\n  }\n  else{\n    console.log(\"server start success\")\n  }\n})\n```\n\nWith all of the settings, our server is up and loaded at **port 5000** of our localhost. Which means that in a way or another, even though your website is not hosted yet, you are not running your app in your computer but on the **internet** now. Cool right ! \n\nI will start the server using the code below \n\n```javascript\nnode server.js \n```\n\nOur server is completed and now we are going to set up our **MongoDB** database and connect it to our server. \n\n### Setting up the database using MongoDB Compass \n\nYou will have to install the latest stable version of [Robo3T](https://robomongo.org/download) and [MongoDB Compass](https://www.mongodb.com/products/compass) in order to setup the database. Once you have installed and set everything up, your database should look like this: \n\n{% asset_img mongodb.PNG %}\n\nTypically, your **connection** will be localhost:27017 so you will be able to create a new database inside the connection. I create my own database and named it **\"ListPostsBlog\"**. Inside the database, there will be different collections and each **collection** should serve its own purpose. For example, I will have a collection ListPostsForBlog where I will store all my posts as **documents** like below \n\n{% asset_img mongoexample.PNG %}\n\nIf you get here, it means that you have successfully set up the database and it is ready to use. \n\n### Connecting the database to the server \n```javascript\n\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"http://localhost:3000\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  res.header(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS, PUT, DELETE\");\n  next();\n});\n\nmongoose.connect(\n  'mongodb://localhost/ListPostsBlog',\n  {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n  },\n  (err) => {\n      if (err) console.log(err)\n      else console.log(\"DB connect success!\");\n  }\n);\n```\nWe use the **app.use** function to connect the **backend** side (which runs at localhost:5000) to our **client** side (which runs at localhost:3000). Then we use mongoose, an updated library developed from mongodb to connect to our database. Notice that the link **'mongodb://localhost/ListPostsBlog'** must be precise in terms of connection and database name. (my database name is ListPostsBlog)\n\n### Structuring MongoDB \n\nSince MongoDB is a database, it allows us to structure the data inside and assign them **types** and other attributes\nsimilar to Microsoft Access that I learnt in grade 12 (something I see as really valuable) but MongoDB is **NoSQL** type database. \n\nBelow I construct my database for 3 main components of a blog using Schema (supported by Mongoose): title, headline and content (I assume...). This should be put in your model folder in your backend folder. \n\n```javascript\nconst PostSchema = new Schema({\n  title:{\n    type:String,\n    required: true\n  },\n  headline:{\n    type:String,\n    required:true\n  },\n  content:{\n    type:String,\n    required:true\n  },\n})\n\nmodule.exports = mongoose.model(\"Post\", PostSchema)\n```\n\nThis file will export a PostSchema (Post Attributes you can say) for each Post that I create. Thus, we can import this **PostSchema** to other files we are about to use.\n\n### Setting up more routers to call API \n\nWhat is API ?\n\nAPI is in short for Application Programming Interface, which is a standard **protocol** that developers use to transfer information. Lets say if you are doing actions in a website, the server wont get all the **\"raw data\"** that you are changing but different APIs of get, post, put, delete, ... and then process the APIs and send you back responses(More can be found [Here](https://topdev.vn/blog/api-la-gi/))\n\nSince in our client-side React-app such as the **add new post** function above, we use Axios to call and post new data to our server. \n\n```javascript\nAxios.post(\"http://localhost:5000/posts/add\",newPost)\n      .then((res)=>{\n        console.log(\"add to database success\")\n        dispatch(addPost(newPost))\n      })\n      .catch((err)=>{\n        console.log(err)\n      })\n```\n\nTherefore, right now in the server, we have to write routers to catch and process those APIs. So we will write a new router for rendering all the posts (get function) and creating new post\n\n```javascript\nPostRouter.get(\"/\",(req,res)=>{\n  ListPosts.find((err, posts)=>{\n    if(err){\n      console.log(err)\n    }\n    else{\n      res.json(posts)\n    }\n  })\n})\n\nPostRouter.post(\"/add\",(req,res)=>{\n  const post = new ListPosts(req.body) \n  post.save()\n    .then((post) => {\n      res.status(200).json({\"post\":\"Post added successfully\" })\n    })\n    .catch((err)=>{\n      res.status(400).send(\"unable to save to database\")\n    })\n})\n\n```\nHere the **ListPosts** is extracted from the **database**. \n- GET: the get-router is pretty simple, we will find in the database and render out all the data \n- POST: the post-router always come with the information of the new post (remember when we **dispatch** addnewPost action, we send the newest postInfo as additional information). So we will get that information using **req.body** (body of the our request), create a new Post using the type in the PostSchema and upload it to the database. \n\nSo we are done with the Post function (sounds really complex despite the simple click we do on websites everyday right :)) ) \n\n### Render our ListPosts (Read function)\n\nHere, we will render out all the posts in our global state ListPosts in the redux store. I will use the React Hook useEffect as a cleanup function, which is whenever the ListPosts state is changed, we will get the latest data from the database and pass it down to the ListPosts state. \n\n```javascript \n\nconst listPost = useSelector((state) => state.ListPosts)\n\nconst fetchData = async () => {\n  const response = await fetch(\"http://localhost:5000/posts\")\n  const resJson = await response.json()\n  return resJson\n}\n\nconst listPost = useSelector((state) => state.ListPosts)\nconst [invalidate, setInvalidate] = useState(true)\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (invalidate) {\n      fetchData()\n        .then((res) => {\n          dispatch(actionCreators.updateListPost(res))\n          // setListPost(res)\n          setInvalidate(false)\n        })\n        .catch((err) => {\n          console.log(err)\n        })\n    }\n  }, [invalidate]);\n\n```\n\nSince the **useEffect** hook will run whenever the value in the array is changed (here is invalidate changes), it will automatically **dispatch** to the action updateListPost in the action and get the newest data from the database \n\n```javascript\nlistPost.map((post, index) => {\n        return (\n          <div>\n          <Link to={`/posts/${post._id}`}>\n            <Post\n              key={index + 1}\n              title={post.title}\n              headline={post.headline}\n            />\n          </Link>\n          <button onClick={() => deletePost(post, post._id)}>Remove</button>\n          <UpdatePost index={index} post={post}/>            {/*UPDATE POST*/} \n          </div>\n```\n\nFrom there, we can easily render all the posts in the **ListPosts state** out to the screen easily using the map function. As you noticed, every time we **render** a post, we also add a **delete button** and a **Update Component** so that we can perform our delete and update functions. \n\n### Delete Function \n\nAll delete function always go with the **id** of the post we are deleting. So when we click the button \"DeletePost above\", we will dispatch the action below. \n\n```javascript\n  const deletePost = (post, _id) => {\n    dispatch(actionCreators.deletePostFromServer(post, _id))\n  }\n\n  listPost.map((post, index) => {\n        return (\n          <div>\n          <Link to={`/posts/${post._id}`}>\n            <Post\n              key={index + 1}\n              title={post.title}\n              headline={post.headline}\n            />\n          </Link>\n          <button onClick={() => deletePost(post, post._id)}>Remove</button>\n         </div>\n\n```\n\nAgain we are reaching to our Redux store, search for the action \"DELETE_POST\", **delete** the post from the database in our server and then go to our Reducer and **update** the new state for the ListPosts, just as we do with the add new Post function\n\nHere is my action folder: \n\n```javascript\nexport const deletePost = (post, _id) =>{\n  return {\n    type:DELETE_POST,\n    post:post,\n    _id:_id\n  }\n}\n\nexport const deletePostFromServer = (post, _id) =>{\n  return (dispatch) =>{\n    Axios.delete(`http://localhost:5000/posts/delete/${post._id}`)\n      .then((res)=>{\n        dispatch(deletePost(post, _id))\n      })\n      .catch((err)=>{\n        console.log(err)\n      })\n  }\n}\n```\n\nAs you notice, we still use Axios to call API to our server and pass down the 2 things in the delete function the actual **post** (so that later in the reducer we can use it to get the id of the **post** in the reducer) and the **_id** which is the id the Mongodb database automatically **generate** for us. \n\nNow we have successfully delete it in the database, we will update the **state** of ListPosts inside the redux store in the reducer file. \n```javascript\n    case actionTypes.DELETE_POST:\n      {\n        const newListPost = state.ListPosts.filter((post)=> post._id != action._id)\n        return{\n          ...state,\n          ListPosts: newListPost\n        }\n      }\n```\n\nWe use the filter method and comparing the **action** (that will just passed down) id with the id from all the posts and remove the right post. \n\n### Update Function \n\nThis is the last main **function** of our app and to be honest it is a bit similar to how we do with the create function. We begin by creating an UpdatePost component\n\n``` javascript\nconst UpdatePost = (props) => {\n  const { post, index } = props\n  const dispatch = useDispatch()\n\n  const [postInfo, setPostInfo] = useState({\n    title: \"\",\n    headline: \"\",\n    content: \"\"\n  })\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault()\n    const newPost = {\n      _id: post._id,\n      title: postInfo.title,\n      headline: postInfo.headline,\n      content: postInfo.content\n    }\n\n    Axios.post(`http://localhost:5000/posts/update/${newPost._id}`, postInfo)\n      .then((res) => {\n        console.log(res)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n    // dispatch(actionCreators.updatePostServer(newPost, index))\n    setPostInfo({\n      title: \"\",\n      headline: \"\",\n      content: \"\"\n    })\n  }\n\n  return (\n    <div>\n      <form onSubmit={onSubmitHandler}>\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Enter title\"\n          value={postInfo.title}\n          onChange={(e) => { setPostInfo({ ...postInfo, title: e.target.value }) }}\n        />\n       <input\n          type=\"text\"\n          name=\"headline\"\n          placeholder=\"Enter headline\"\n          value={postInfo.headline}\n          onChange={(e) => { setPostInfo({ ...postInfo, headline: e.target.value }) }}\n        />\n\n        <input\n          type=\"text\"\n          name=\"content\"\n          placeholder=\"Enter content\"\n          value={postInfo.content}\n          onChange={(e) => { setPostInfo({ ...postInfo, content: e.target.value }) }}\n        />\n        <input type=\"submit\" value=\"UpdatePost\" />\n\n      </form>\n```\nYou can see it is nearly identical to our add new **post** function. First we need to create 3 forms to handle the change of 3 main attributes of our post **title, headline, and content**.\n\nWe will also set a **postInfo** state to contain the updated information in each post and whenever the input is changing (the user is entering new information), this state will be updated. Then we will store the **postInfo** information along with the **_id** from the **post** that we pass a props for the UpdatePost component in an object **newPost**\n\nFinally, we use Axios to call to our API to post a new post to the exact id of the old post and we have updated it successfully. \n\n### Additional Functions\n\n#### Search Form\n\nThis is also a function that is used a lot when people are reading posts so I will show you how to add a search function in your app. \n\nThe core of the **search** function is that we will create a form. After the user submits that form (pressing search), we will filter our global **state** ListPosts all the posts that have the titles that include the value of the form. After getting a filtered list, we will create another global state called **SearchList** to contain the new list. We must do this because if we filtered directly in the main ListPosts state, it will automatically **remove** your posts whenever you search them.\n\nSo first in the Redux store, I will create another global state called SearchList\n\n```javascript\nconst initialState = {\n  ListPosts:[],\n  SearchList:[],\n}\n```\nNow we will create a SearchForm component to store our search function. \n\n```javascript\nconst SearchForm = (props) => {\n  const {searchPost} = props\n  const [value, setValue] = useState(\"\")\n  const [fireRedirect, setFireRedirect] = useState(false)\n  const dispatch = useDispatch()\n\n  // const useQuery = () => {\n  //   return new URLSearchParams(useLocation().search);\n  // };\n  // const query = useQuery();\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault()\n    setFireRedirect(true)\n    searchPost(value)\n    // dispatch(actionCreators.searchPost(value))\n  }\n  return (\n    <div>\n      <form onSubmit={onSubmitHandler}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n    {fireRedirect && <Redirect to={`/posts/?name=${value}`} />}\n    {/* <button onClick={() => dispatch(actionCreators.clearSearchList())}>Refresh</button> */}\n\n    </div>\n  )\n}\n```\n\nFirst, we still handle the forms in the standard way, creating a state that holds the value of the form and whenever the input is changing we will update the **state** with the corresponding value.\n\nWe also set a function **searchPost** as a props of this component along with the new **value** that was just updated. \n\nSo what does the **fireRedirect** do ? \n\nWell, this will help us redirect our page to the link \"..../posts/?name=\" similar to when we perform a **query** (search) on Google. For example if I **searched** \"hello\" on Google, I will be taken to the path \"www.google.com/search?q=hello\". \n\nSo I will do just as usual, dispatch the **action** SEARCH_POST. Here is my action folder: \n\n```javascript\nexport const searchPost = (value) =>{\n  return {\n    type:SEARCH_POST,\n    value:value //action payload dc gắn giá trị newPostListSearch\n  }\n}\n```\n\nIn my reducer I will set my newly created global state SearchList as the filtered ListPosts. \n\n```javascript\ncase actionTypes.SEARCH_POST:\n      {\n        const newPostListSearch = state.ListPosts.filter((post) => post.title.toLowerCase().includes(action.value.toLowerCase()))\n        return{\n          ...state,\n          SearchList: newPostListSearch\n        }\n      }\n```\n\nAnd so we are done with the **search** function\n\n## Conclusion\n\nSo we have officially done with our M.E.R.N stack app. If you want to look at the source code you can find it [Here](https://github.com/MRSNOO/PersonalBlog). It is a basic web and has no styling at all yet :)) so sorry for that. \n\n**This is the end of my first super long post, I hope you enjoyed it and learnt something new from it. Hope I can receive more support in the future !!**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"CreateBlog","published":1,"updated":"2021-06-21T02:21:08.258Z","_id":"ckq5zemsj0001c6sbhxs3mskq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2><span id=\"this-is-going-to-be-the-first-technical-blog-that-i-write-and-it-is-going-to-be-super-long-but-very-helpful-stay-tuned\">This is going to be the first technical blog that I write and it is going to be super long but very helpful. Stay tuned !!</span></h2>\n<h3><span id=\"what-is-mern\">What is M.E.R.N ?</span></h3>\n<p>This is a <strong>“stack”</strong>(combination) of different languages and technologies used to create a software or program. It is in short for MongoDB, Express, React, and Nodejs (Don’t worry about these things yet I will explain them in just a moment)</p>\n<p>The <strong>M.E.R.N</strong> stack uses</p>\n<ul>\n<li><strong>MongoDB</strong> as our database, storing information</li>\n<li><strong>Express and NodeJS</strong> to build the server (backend) to our website</li>\n<li><strong>React</strong> as our client-side (frontend)</li>\n</ul>\n<h3><span id=\"what-do-we-need-in-a-blog\">What do we need in a blog ?</span></h3>\n<p>I believe there are <strong>3 major steps</strong> of creating a simple blog (I am just a beginner so dont judge me if I miss any parts)</p>\n<ol>\n<li>A CRUD (Create, Read, Update, Delete) function for your posts</li>\n<li>Craft and store your posts in a store</li>\n<li>Launch and maintain your blog !!</li>\n</ol>\n<h2><span id=\"lets-get-to-creating-our-app\">Let’s get to creating our app !!</span></h2>\n<h3><span id=\"1-create-a-react-application\">1. Create a React application</span></h3>\n<p>Assume that you already have an editor (I prefer to use <strong>Visual Studio Code</strong>). Create a new folder to contain your app.</p>\n<p>You will need to install <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">NodeJs</a> beforehand</p>\n<p>There is an alternative for running the React App instead of npm (Nodejs Package Manager) which is <a href=\"https://www.npmjs.com/package/yarn\" target=\"_blank\" rel=\"noopener\">Yarn</a> and I also prefer to use this.</p>\n<p>So I will create a new React App</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add create react-app (your app name)</span><br><span class=\"line\"><span class=\"built_in\">cd</span> (your app name)</span><br><span class=\"line\">yarn start</span><br></pre></td></tr></table></figure>\n<h3><span id=\"2-install-necessary-dependencies\">2. Install necessary dependencies</span></h3>\n<p>Dependencies are similar to library that can add additional features to your app and here we are going to install the following dependencies: <strong>react-router, react router-dom</strong></p>\n<p>In order to use react-router and react-router-dom, you need to import and inject a <strong>BrowserRouter</strong> in the <strong>index.js</strong> file such as below</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\">ReactDOM.render(&lt;BrowserRouter&gt;&lt;Provider store=&#123;store&#125;&gt;&lt;App /&gt;&lt;/Provider&gt;&lt;/BrowserRouter&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</span><br></pre></td></tr></table></figure>\n<h2><span id=\"now-we-start-crafting-our-react-application\">Now we start crafting our React application</span></h2>\n<h3><span id=\"creating-forms-for-crud-add-function\">Creating forms for CRUD (Add function)</span></h3>\n<p>Handling Forms is probably the most important step in the frontend side. Here I will create 2 components which is <strong>AddPost</strong> to handle adding new posts and <strong>PostList</strong> to render all the posts we have. You should structure the folders so that you have a component folder to store all your components.</p>\n<img src=\"/CreateBlog/folderStructure.PNG\">\n<p>Below is the setup for my <strong>AddPost</strong> component. Here we will pass an <strong>addPost</strong> as a <strong>props</strong> which later we will pass the actual function to add new post from the main App component. This component will return a form that includes 3 inputs for 3 main values of a post which are <strong><em>title, headline and content</em></strong>.</p>\n<p>I also use the standard form handling which is setting a <strong>postInfo</strong> state that carries the attributes of the new post which are <strong><em>title, headline and content</em></strong>. Whenever an input is changing (when the user is entering information) the postInfo will receive that value and update the state.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AddPost = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;addPost&#125; = props</span><br><span class=\"line\">  <span class=\"comment\">// const id = useSelector((state) =&gt; state.ListPosts.length + 1)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = useDispatch()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [postInfo, setPostInfo] = useState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// id: id,</span></span><br><span class=\"line\">    title: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    headline: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    content: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onSubmitHandler = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    e.preventDefault()</span><br><span class=\"line\">    addPost(postInfo) </span><br><span class=\"line\">    setPostInfo(&#123;</span><br><span class=\"line\">      title:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      headline:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      content:<span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;form onSubmit=&#123;onSubmitHandler&#125;&gt;</span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">          name=<span class=\"string\">\"title\"</span></span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Enter title\"</span></span><br><span class=\"line\">          value=&#123;postInfo.title&#125;</span><br><span class=\"line\">          onChange=&#123;(e) =&gt; &#123; setPostInfo(&#123; ...postInfo, <span class=\"attr\">title</span>: e.target.value &#125;) &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">       &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">          name=<span class=\"string\">\"headline\"</span></span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Enter headline\"</span></span><br><span class=\"line\">          value=&#123;postInfo.headline&#125;</span><br><span class=\"line\">          onChange=&#123;(e) =&gt; &#123; setPostInfo(&#123; ...postInfo, <span class=\"attr\">headline</span>: e.target.value &#125;) &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">          name=<span class=\"string\">\"content\"</span></span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Enter content\"</span></span><br><span class=\"line\">          value=&#123;postInfo.content&#125;</span><br><span class=\"line\">          onChange=&#123;(e) =&gt; &#123; setPostInfo(&#123; ...postInfo, <span class=\"attr\">content</span>: e.target.value &#125;) &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"Submit\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br></pre></td></tr></table></figure>\n<p>So after the postInfo state receive all the updated information and we submit the form, it will triggered the function <strong>addPost</strong> with the information in <strong>postInfo</strong></p>\n<p>Therefore, outside the App.js file, we will return the <strong>AddPost</strong> component within the <strong>PostList</strong> component, receiving function <strong>addPost</strong> as props</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PostLists = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> addPost = <span class=\"function\">(<span class=\"params\">postInfo</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newPost = postInfo</span><br><span class=\"line\">    dispatch(actionCreators.addPostToServer(newPost))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;AddPost addPost=&#123;addPost&#125;/&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>So what is the <strong>dispatch</strong> in the image above. I will explain it below.</p>\n<h3><span id=\"3-setting-up-the-redux-store\">3. Setting up the Redux Store</span></h3>\n<p>Since state management is quite tiring between the components, I decided to use Redux and some advanced Redux including asynchronous functions. <strong><em>Therefore, I decided to keep all my posts as a ListPosts state in the Redux store</em></strong></p>\n<p>Traditionally, in the class based components, we usually have to set up complex things such as <strong>mapStateToProps, mapDispatchToProps, connect</strong>, … to make redux work. However, React Hooks give us equivalent but handier way to handle redux. We will apply useSelector (mapStateToProps equivalent) and useDispatch (mapDispatchToProps).</p>\n<h4><span id=\"1-setting-in-the-indexjs-file\">1. Setting in the index.js file</span></h4>\n<p>This is quite a lot of work so I wouldnt come into too much detail in the post. First, we will need to install <strong>react-redux and redux</strong> dependencies. After that, we import <strong>createStore and Provider</strong> from react-redux. I recommend using an extra middleware (in my case, it is the <strong><em>logger</em></strong> function) (a function runs just before a <strong>state</strong> is changed) to monitor the state as we go along. Below is my complete setup for the index.js file without the imports</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> composeEnhancers = <span class=\"built_in\">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> logger = <span class=\"function\">(<span class=\"params\">store</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">action</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"[Middleware] Dispatching\"</span>,action)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> result = next(action)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"[Middleware] next state\"</span>, store.getState())</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125; <span class=\"comment\">//middleware</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer, composeEnhancers(applyMiddleware(logger, thunk)))</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(&lt;BrowserRouter&gt;&lt;Provider store=&#123;store&#125;&gt;&lt;App /&gt;&lt;/Provider&gt;&lt;/BrowserRouter&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</span><br></pre></td></tr></table></figure>\n<p>You can see that we wrap our App with 2 things the <strong>Provider</strong> with the store (for the redux store) and the <strong>BrowserRouter</strong> for the route usage in our app</p>\n<p>In our store, you add a middleware <strong>logger</strong> and a <strong>thunk</strong> (from redux thunk) in order to enable use using <strong>asynchronous</strong> code from the action folder of the Redux store later</p>\n<h4><span id=\"2-setting-in-the-action-folder\">2. Setting in the action folder</span></h4>\n<p>The action folders hold all the actions of a redux store (it is not recommended that you perform logic here). So we will define all of out actions in the action file such as create, read, update and delete</p>\n<p>Here is an example that I set up the create function in the action folder.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ADD_POST = <span class=\"string\">\"ADD_POST\"</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> addPost = <span class=\"function\">(<span class=\"params\">newPost</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:ADD_POST,</span><br><span class=\"line\">    newPost:newPost</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> addPostToServer = <span class=\"function\">(<span class=\"params\">newPost</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    Axios.post(<span class=\"string\">\"http://localhost:5000/posts/add\"</span>,newPost)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"add to database success\"</span>)</span><br><span class=\"line\">        dispatch(addPost(newPost))</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The upper function addPost is used to add a new post to both the <strong>ListPosts</strong> state in the store and to the database in the server (which I will mention later)</p>\n<p>Usually we would only defined the actions the in the action folder. However, I am using a very cool <strong>dispatch</strong> technique that allows me to perform asynchronous functions in the action folder. What I am doing here is that I am using Axios to call api to my server (which I will show you how to set up later) and update the database of my newest post.</p>\n<h4><span id=\"3-setting-the-reducer\">3. Setting the reducer</span></h4>\n<p>This is probably the most <strong>important</strong> part of our Redux store. After receiving the action’s definition and payload (additional information that comes with the action), it will perform all the actual functions here in the reducer (No asynchronous functions here)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</span><br><span class=\"line\">  ListPosts:[],</span><br><span class=\"line\">  SearchList:[],</span><br><span class=\"line\">  MailList:[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">state = initialState, action</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> actionTypes.ADD_POST:</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          ...state,</span><br><span class=\"line\">          ListPosts:state.ListPosts.concat(action.newPost)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Inside the reducer, as I have mentioned before, I set a global state <strong>ListPosts</strong> to store all the posts that would be rendered to the screen.</p>\n<p>Every time the action <strong><em>add new Post</em></strong> is dispatched, it will execute the asynchronous functions in the action, updating the database and then it will go through the reducer, performing the action of adding a new post to the global state <strong>ListPosts</strong>. So here we update both the ListPosts state and the database. The image below should help you out a bit with this action flow :))</p>\n<img src=\"/CreateBlog/actionFlow.PNG\">\n<p>There, we are pretty much done with the <strong>Add new post</strong> function in the client-side.</p>\n<h3><span id=\"creating-a-server-for-the-website-using-nodejs-and-express\">Creating a server for the website using Nodejs and Express</span></h3>\n<p>I will create another folder called backend in my project and a file <strong>server.js</strong> inside that folder. This file will hold all of my server for the website. The settings are right below:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">\"body-parser\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cors = <span class=\"built_in\">require</span>(<span class=\"string\">\"cors\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(cors());</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;<span class=\"attr\">extended</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>,(err)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"server start success\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>With all of the settings, our server is up and loaded at <strong>port 5000</strong> of our localhost. Which means that in a way or another, even though your website is not hosted yet, you are not running your app in your computer but on the <strong>internet</strong> now. Cool right !</p>\n<p>I will start the server using the code below</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node server.js</span><br></pre></td></tr></table></figure>\n<p>Our server is completed and now we are going to set up our <strong>MongoDB</strong> database and connect it to our server.</p>\n<h3><span id=\"setting-up-the-database-using-mongodb-compass\">Setting up the database using MongoDB Compass</span></h3>\n<p>You will have to install the latest stable version of <a href=\"https://robomongo.org/download\" target=\"_blank\" rel=\"noopener\">Robo3T</a> and <a href=\"https://www.mongodb.com/products/compass\" target=\"_blank\" rel=\"noopener\">MongoDB Compass</a> in order to setup the database. Once you have installed and set everything up, your database should look like this:</p>\n<img src=\"/CreateBlog/mongodb.PNG\">\n<p>Typically, your <strong>connection</strong> will be localhost:27017 so you will be able to create a new database inside the connection. I create my own database and named it <strong>“ListPostsBlog”</strong>. Inside the database, there will be different collections and each <strong>collection</strong> should serve its own purpose. For example, I will have a collection ListPostsForBlog where I will store all my posts as <strong>documents</strong> like below</p>\n<img src=\"/CreateBlog/mongoexample.PNG\">\n<p>If you get here, it means that you have successfully set up the database and it is ready to use.</p>\n<h3><span id=\"connecting-the-database-to-the-server\">Connecting the database to the server</span></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.header(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"http://localhost:3000\"</span>); <span class=\"comment\">// update to match the domain you will make the request from</span></span><br><span class=\"line\">  res.header(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span>);</span><br><span class=\"line\">  res.header(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"GET, POST, OPTIONS, PUT, DELETE\"</span>);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(</span><br><span class=\"line\">  <span class=\"string\">'mongodb://localhost/ListPostsBlog'</span>,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      useNewUrlParser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      useUnifiedTopology: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  (err) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"DB connect success!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>We use the <strong>app.use</strong> function to connect the <strong>backend</strong> side (which runs at localhost:5000) to our <strong>client</strong> side (which runs at localhost:3000). Then we use mongoose, an updated library developed from mongodb to connect to our database. Notice that the link <strong>‘mongodb://localhost/ListPostsBlog’</strong> must be precise in terms of connection and database name. (my database name is ListPostsBlog)</p>\n<h3><span id=\"structuring-mongodb\">Structuring MongoDB</span></h3>\n<p>Since MongoDB is a database, it allows us to structure the data inside and assign them <strong>types</strong> and other attributes<br>\nsimilar to Microsoft Access that I learnt in grade 12 (something I see as really valuable) but MongoDB is <strong>NoSQL</strong> type database.</p>\n<p>Below I construct my database for 3 main components of a blog using Schema (supported by Mongoose): title, headline and content (I assume…). This should be put in your model folder in your backend folder.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PostSchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">  title:&#123;</span><br><span class=\"line\">    type:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  headline:&#123;</span><br><span class=\"line\">    type:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required:<span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  content:&#123;</span><br><span class=\"line\">    type:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required:<span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">\"Post\"</span>, PostSchema)</span><br></pre></td></tr></table></figure>\n<p>This file will export a PostSchema (Post Attributes you can say) for each Post that I create. Thus, we can import this <strong>PostSchema</strong> to other files we are about to use.</p>\n<h3><span id=\"setting-up-more-routers-to-call-api\">Setting up more routers to call API</span></h3>\n<p>What is API ?</p>\n<p>API is in short for Application Programming Interface, which is a standard <strong>protocol</strong> that developers use to transfer information. Lets say if you are doing actions in a website, the server wont get all the <strong>“raw data”</strong> that you are changing but different APIs of get, post, put, delete, … and then process the APIs and send you back responses(More can be found <a href=\"https://topdev.vn/blog/api-la-gi/\" target=\"_blank\" rel=\"noopener\">Here</a>)</p>\n<p>Since in our client-side React-app such as the <strong>add new post</strong> function above, we use Axios to call and post new data to our server.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Axios.post(<span class=\"string\">\"http://localhost:5000/posts/add\"</span>,newPost)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"add to database success\"</span>)</span><br><span class=\"line\">        dispatch(addPost(newPost))</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>\n<p>Therefore, right now in the server, we have to write routers to catch and process those APIs. So we will write a new router for rendering all the posts (get function) and creating new post</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PostRouter.get(<span class=\"string\">\"/\"</span>,(req,res)=&gt;&#123;</span><br><span class=\"line\">  ListPosts.find(<span class=\"function\">(<span class=\"params\">err, posts</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      res.json(posts)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">PostRouter.post(<span class=\"string\">\"/add\"</span>,(req,res)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> post = <span class=\"keyword\">new</span> ListPosts(req.body) </span><br><span class=\"line\">  post.save()</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      res.status(<span class=\"number\">200</span>).json(&#123;<span class=\"string\">\"post\"</span>:<span class=\"string\">\"Post added successfully\"</span> &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      res.status(<span class=\"number\">400</span>).send(<span class=\"string\">\"unable to save to database\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Here the <strong>ListPosts</strong> is extracted from the <strong>database</strong>.</p>\n<ul>\n<li>GET: the get-router is pretty simple, we will find in the database and render out all the data</li>\n<li>POST: the post-router always come with the information of the new post (remember when we <strong>dispatch</strong> addnewPost action, we send the newest postInfo as additional information). So we will get that information using <strong>req.body</strong> (body of the our request), create a new Post using the type in the PostSchema and upload it to the database.</li>\n</ul>\n<p>So we are done with the Post function (sounds really complex despite the simple click we do on websites everyday right :)) )</p>\n<h3><span id=\"render-our-listposts-read-function\">Render our ListPosts (Read function)</span></h3>\n<p>Here, we will render out all the posts in our global state ListPosts in the redux store. I will use the React Hook useEffect as a cleanup function, which is whenever the ListPosts state is changed, we will get the latest data from the database and pass it down to the ListPosts state.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> listPost = useSelector(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> state.ListPosts)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetchData = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"http://localhost:5000/posts\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> resJson = <span class=\"keyword\">await</span> response.json()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resJson</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> listPost = useSelector(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> state.ListPosts)</span><br><span class=\"line\"><span class=\"keyword\">const</span> [invalidate, setInvalidate] = useState(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = useDispatch()</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (invalidate) &#123;</span><br><span class=\"line\">      fetchData()</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          dispatch(actionCreators.updateListPost(res))</span><br><span class=\"line\">          <span class=\"comment\">// setListPost(res)</span></span><br><span class=\"line\">          setInvalidate(<span class=\"literal\">false</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [invalidate]);</span><br></pre></td></tr></table></figure>\n<p>Since the <strong>useEffect</strong> hook will run whenever the value in the array is changed (here is invalidate changes), it will automatically <strong>dispatch</strong> to the action updateListPost in the action and get the newest data from the database</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listPost.map(<span class=\"function\">(<span class=\"params\">post, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          &lt;div&gt;</span><br><span class=\"line\">          &lt;Link to=&#123;<span class=\"string\">`/posts/<span class=\"subst\">$&#123;post._id&#125;</span>`</span>&#125;&gt;</span><br><span class=\"line\">            &lt;Post</span><br><span class=\"line\">              key=&#123;index + <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">              title=&#123;post.title&#125;</span><br><span class=\"line\">              headline=&#123;post.headline&#125;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;() =&gt; deletePost(post, post._id)&#125;&gt;Remove&lt;/</span>button&gt;</span><br><span class=\"line\">          &lt;UpdatePost index=&#123;index&#125; post=&#123;post&#125;/&gt;            &#123;<span class=\"comment\">/*UPDATE POST*/</span>&#125; </span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>From there, we can easily render all the posts in the <strong>ListPosts state</strong> out to the screen easily using the map function. As you noticed, every time we <strong>render</strong> a post, we also add a <strong>delete button</strong> and a <strong>Update Component</strong> so that we can perform our delete and update functions.</p>\n<h3><span id=\"delete-function\">Delete Function</span></h3>\n<p>All delete function always go with the <strong>id</strong> of the post we are deleting. So when we click the button “DeletePost above”, we will dispatch the action below.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> deletePost = <span class=\"function\">(<span class=\"params\">post, _id</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  dispatch(actionCreators.deletePostFromServer(post, _id))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">listPost.map(<span class=\"function\">(<span class=\"params\">post, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">        &lt;Link to=&#123;<span class=\"string\">`/posts/<span class=\"subst\">$&#123;post._id&#125;</span>`</span>&#125;&gt;</span><br><span class=\"line\">          &lt;Post</span><br><span class=\"line\">            key=&#123;index + <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">            title=&#123;post.title&#125;</span><br><span class=\"line\">            headline=&#123;post.headline&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button onClick=&#123;() =&gt; deletePost(post, post._id)&#125;&gt;Remove&lt;/</span>button&gt;</span><br><span class=\"line\">       &lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Again we are reaching to our Redux store, search for the action “DELETE_POST”, <strong>delete</strong> the post from the database in our server and then go to our Reducer and <strong>update</strong> the new state for the ListPosts, just as we do with the add new Post function</p>\n<p>Here is my action folder:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> deletePost = <span class=\"function\">(<span class=\"params\">post, _id</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:DELETE_POST,</span><br><span class=\"line\">    post:post,</span><br><span class=\"line\">    _id:_id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> deletePostFromServer = <span class=\"function\">(<span class=\"params\">post, _id</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    Axios.delete(<span class=\"string\">`http://localhost:5000/posts/delete/<span class=\"subst\">$&#123;post._id&#125;</span>`</span>)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        dispatch(deletePost(post, _id))</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As you notice, we still use Axios to call API to our server and pass down the 2 things in the delete function the actual <strong>post</strong> (so that later in the reducer we can use it to get the id of the <strong>post</strong> in the reducer) and the <strong>_id</strong> which is the id the Mongodb database automatically <strong>generate</strong> for us.</p>\n<p>Now we have successfully delete it in the database, we will update the <strong>state</strong> of ListPosts inside the redux store in the reducer file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> actionTypes.DELETE_POST:</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newListPost = state.ListPosts.filter(<span class=\"function\">(<span class=\"params\">post</span>)=&gt;</span> post._id != action._id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">      ...state,</span><br><span class=\"line\">      ListPosts: newListPost</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>We use the filter method and comparing the <strong>action</strong> (that will just passed down) id with the id from all the posts and remove the right post.</p>\n<h3><span id=\"update-function\">Update Function</span></h3>\n<p>This is the last main <strong>function</strong> of our app and to be honest it is a bit similar to how we do with the create function. We begin by creating an UpdatePost component</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> UpdatePost = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; post, index &#125; = props</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = useDispatch()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [postInfo, setPostInfo] = useState(&#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    headline: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    content: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> onSubmitHandler = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    e.preventDefault()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newPost = &#123;</span><br><span class=\"line\">      _id: post._id,</span><br><span class=\"line\">      title: postInfo.title,</span><br><span class=\"line\">      headline: postInfo.headline,</span><br><span class=\"line\">      content: postInfo.content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Axios.post(<span class=\"string\">`http://localhost:5000/posts/update/<span class=\"subst\">$&#123;newPost._id&#125;</span>`</span>, postInfo)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// dispatch(actionCreators.updatePostServer(newPost, index))</span></span><br><span class=\"line\">    setPostInfo(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      headline: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      content: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;form onSubmit=&#123;onSubmitHandler&#125;&gt;</span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">          name=<span class=\"string\">\"title\"</span></span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Enter title\"</span></span><br><span class=\"line\">          value=&#123;postInfo.title&#125;</span><br><span class=\"line\">          onChange=&#123;(e) =&gt; &#123; setPostInfo(&#123; ...postInfo, <span class=\"attr\">title</span>: e.target.value &#125;) &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">       &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">          name=<span class=\"string\">\"headline\"</span></span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Enter headline\"</span></span><br><span class=\"line\">          value=&#123;postInfo.headline&#125;</span><br><span class=\"line\">          onChange=&#123;(e) =&gt; &#123; setPostInfo(&#123; ...postInfo, <span class=\"attr\">headline</span>: e.target.value &#125;) &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">          name=<span class=\"string\">\"content\"</span></span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Enter content\"</span></span><br><span class=\"line\">          value=&#123;postInfo.content&#125;</span><br><span class=\"line\">          onChange=&#123;(e) =&gt; &#123; setPostInfo(&#123; ...postInfo, <span class=\"attr\">content</span>: e.target.value &#125;) &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"UpdatePost\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br></pre></td></tr></table></figure>\n<p>You can see it is nearly identical to our add new <strong>post</strong> function. First we need to create 3 forms to handle the change of 3 main attributes of our post <strong>title, headline, and content</strong>.</p>\n<p>We will also set a <strong>postInfo</strong> state to contain the updated information in each post and whenever the input is changing (the user is entering new information), this state will be updated. Then we will store the <strong>postInfo</strong> information along with the <strong>_id</strong> from the <strong>post</strong> that we pass a props for the UpdatePost component in an object <strong>newPost</strong></p>\n<p>Finally, we use Axios to call to our API to post a new post to the exact id of the old post and we have updated it successfully.</p>\n<h3><span id=\"additional-functions\">Additional Functions</span></h3>\n<h4><span id=\"search-form\">Search Form</span></h4>\n<p>This is also a function that is used a lot when people are reading posts so I will show you how to add a search function in your app.</p>\n<p>The core of the <strong>search</strong> function is that we will create a form. After the user submits that form (pressing search), we will filter our global <strong>state</strong> ListPosts all the posts that have the titles that include the value of the form. After getting a filtered list, we will create another global state called <strong>SearchList</strong> to contain the new list. We must do this because if we filtered directly in the main ListPosts state, it will automatically <strong>remove</strong> your posts whenever you search them.</p>\n<p>So first in the Redux store, I will create another global state called SearchList</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</span><br><span class=\"line\">  ListPosts:[],</span><br><span class=\"line\">  SearchList:[],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now we will create a SearchForm component to store our search function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> SearchForm = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;searchPost&#125; = props</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value, setValue] = useState(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [fireRedirect, setFireRedirect] = useState(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = useDispatch()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// const useQuery = () =&gt; &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   return new URLSearchParams(useLocation().search);</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">  <span class=\"comment\">// const query = useQuery();</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> onSubmitHandler = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    e.preventDefault()</span><br><span class=\"line\">    setFireRedirect(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    searchPost(value)</span><br><span class=\"line\">    <span class=\"comment\">// dispatch(actionCreators.searchPost(value))</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;form onSubmit=&#123;onSubmitHandler&#125;&gt;</span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">          value=&#123;value&#125;</span><br><span class=\"line\">          onChange=&#123;(e) =&gt; setValue(e.target.value)&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;button type=<span class=\"string\">\"submit\"</span>&gt;Search&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>form&gt;</span><br><span class=\"line\">    &#123;fireRedirect &amp;&amp; &lt;Redirect to=&#123;`/posts/?name=$&#123;value&#125;`&#125; /&gt;&#125;</span><br><span class=\"line\">    &#123;<span class=\"comment\">/* &lt;button onClick=&#123;() =&gt; dispatch(actionCreators.clearSearchList())&#125;&gt;Refresh&lt;/button&gt; */</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>First, we still handle the forms in the standard way, creating a state that holds the value of the form and whenever the input is changing we will update the <strong>state</strong> with the corresponding value.</p>\n<p>We also set a function <strong>searchPost</strong> as a props of this component along with the new <strong>value</strong> that was just updated.</p>\n<p>So what does the <strong>fireRedirect</strong> do ?</p>\n<p>Well, this will help us redirect our page to the link “…/posts/?name=” similar to when we perform a <strong>query</strong> (search) on Google. For example if I <strong>searched</strong> “hello” on Google, I will be taken to the path “<a href=\"http://www.google.com/search?q=hello\" target=\"_blank\" rel=\"noopener\">www.google.com/search?q=hello</a>”.</p>\n<p>So I will do just as usual, dispatch the <strong>action</strong> SEARCH_POST. Here is my action folder:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> searchPost = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:SEARCH_POST,</span><br><span class=\"line\">    value:value <span class=\"comment\">//action payload dc gắn giá trị newPostListSearch</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In my reducer I will set my newly created global state SearchList as the filtered ListPosts.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> actionTypes.SEARCH_POST:</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newPostListSearch = state.ListPosts.filter(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span> post.title.toLowerCase().includes(action.value.toLowerCase()))</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">          ...state,</span><br><span class=\"line\">          SearchList: newPostListSearch</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>And so we are done with the <strong>search</strong> function</p>\n<h2><span id=\"conclusion\">Conclusion</span></h2>\n<p>So we have officially done with our M.E.R.N stack app. If you want to look at the source code you can find it <a href=\"https://github.com/MRSNOO/PersonalBlog\" target=\"_blank\" rel=\"noopener\">Here</a>. It is a basic web and has no styling at all yet :)) so sorry for that.</p>\n<p><strong>This is the end of my first super long post, I hope you enjoyed it and learnt something new from it. Hope I can receive more support in the future !!</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>This is going to be the first technical blog that I write and it is going to be super long but very helpful. Stay tuned !!</h2>\n<h3>What is M.E.R.N ?</h3>\n<p>This is a <strong>“stack”</strong>(combination) of different languages and technologies used to create a software or program. It is in short for MongoDB, Express, React, and Nodejs (Don’t worry about these things yet I will explain them in just a moment)</p>\n<p>The <strong>M.E.R.N</strong> stack uses</p>\n<ul>\n<li><strong>MongoDB</strong> as our database, storing information</li>\n<li><strong>Express and NodeJS</strong> to build the server (backend) to our website</li>\n<li><strong>React</strong> as our client-side (frontend)</li>\n</ul>\n<h3>What do we need in a blog ?</h3>\n<p>I believe there are <strong>3 major steps</strong> of creating a simple blog (I am just a beginner so dont judge me if I miss any parts)</p>\n<ol>\n<li>A CRUD (Create, Read, Update, Delete) function for your posts</li>\n<li>Craft and store your posts in a store</li>\n<li>Launch and maintain your blog !!</li>\n</ol>\n<h2>Let’s get to creating our app !!</h2>\n<h3>1. Create a React application</h3>\n<p>Assume that you already have an editor (I prefer to use <strong>Visual Studio Code</strong>). Create a new folder to contain your app.</p>\n<p>You will need to install <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">NodeJs</a> beforehand</p>\n<p>There is an alternative for running the React App instead of npm (Nodejs Package Manager) which is <a href=\"https://www.npmjs.com/package/yarn\" target=\"_blank\" rel=\"noopener\">Yarn</a> and I also prefer to use this.</p>\n<p>So I will create a new React App</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add create react-app (your app name)</span><br><span class=\"line\"><span class=\"built_in\">cd</span> (your app name)</span><br><span class=\"line\">yarn start</span><br></pre></td></tr></table></figure>\n<h3>2. Install necessary dependencies</h3>\n<p>Dependencies are similar to library that can add additional features to your app and here we are going to install the following dependencies: <strong>react-router, react router-dom</strong></p>\n<p>In order to use react-router and react-router-dom, you need to import and inject a <strong>BrowserRouter</strong> in the <strong>index.js</strong> file such as below</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\">ReactDOM.render(&lt;BrowserRouter&gt;&lt;Provider store=&#123;store&#125;&gt;&lt;App /&gt;&lt;/Provider&gt;&lt;/BrowserRouter&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</span><br></pre></td></tr></table></figure>\n<h2>Now we start crafting our React application</h2>\n<h3>Creating forms for CRUD (Add function)</h3>\n<p>Handling Forms is probably the most important step in the frontend side. Here I will create 2 components which is <strong>AddPost</strong> to handle adding new posts and <strong>PostList</strong> to render all the posts we have. You should structure the folders so that you have a component folder to store all your components.</p>\n<img src=\"/CreateBlog/folderStructure.PNG\">\n<p>Below is the setup for my <strong>AddPost</strong> component. Here we will pass an <strong>addPost</strong> as a <strong>props</strong> which later we will pass the actual function to add new post from the main App component. This component will return a form that includes 3 inputs for 3 main values of a post which are <strong><em>title, headline and content</em></strong>.</p>\n<p>I also use the standard form handling which is setting a <strong>postInfo</strong> state that carries the attributes of the new post which are <strong><em>title, headline and content</em></strong>. Whenever an input is changing (when the user is entering information) the postInfo will receive that value and update the state.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AddPost = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;addPost&#125; = props</span><br><span class=\"line\">  <span class=\"comment\">// const id = useSelector((state) =&gt; state.ListPosts.length + 1)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = useDispatch()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [postInfo, setPostInfo] = useState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// id: id,</span></span><br><span class=\"line\">    title: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    headline: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    content: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onSubmitHandler = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    e.preventDefault()</span><br><span class=\"line\">    addPost(postInfo) </span><br><span class=\"line\">    setPostInfo(&#123;</span><br><span class=\"line\">      title:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      headline:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      content:<span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;form onSubmit=&#123;onSubmitHandler&#125;&gt;</span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">          name=<span class=\"string\">\"title\"</span></span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Enter title\"</span></span><br><span class=\"line\">          value=&#123;postInfo.title&#125;</span><br><span class=\"line\">          onChange=&#123;(e) =&gt; &#123; setPostInfo(&#123; ...postInfo, <span class=\"attr\">title</span>: e.target.value &#125;) &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">       &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">          name=<span class=\"string\">\"headline\"</span></span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Enter headline\"</span></span><br><span class=\"line\">          value=&#123;postInfo.headline&#125;</span><br><span class=\"line\">          onChange=&#123;(e) =&gt; &#123; setPostInfo(&#123; ...postInfo, <span class=\"attr\">headline</span>: e.target.value &#125;) &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">          name=<span class=\"string\">\"content\"</span></span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Enter content\"</span></span><br><span class=\"line\">          value=&#123;postInfo.content&#125;</span><br><span class=\"line\">          onChange=&#123;(e) =&gt; &#123; setPostInfo(&#123; ...postInfo, <span class=\"attr\">content</span>: e.target.value &#125;) &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"Submit\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br></pre></td></tr></table></figure>\n<p>So after the postInfo state receive all the updated information and we submit the form, it will triggered the function <strong>addPost</strong> with the information in <strong>postInfo</strong></p>\n<p>Therefore, outside the App.js file, we will return the <strong>AddPost</strong> component within the <strong>PostList</strong> component, receiving function <strong>addPost</strong> as props</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PostLists = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> addPost = <span class=\"function\">(<span class=\"params\">postInfo</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newPost = postInfo</span><br><span class=\"line\">    dispatch(actionCreators.addPostToServer(newPost))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;AddPost addPost=&#123;addPost&#125;/&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>So what is the <strong>dispatch</strong> in the image above. I will explain it below.</p>\n<h3>3. Setting up the Redux Store</h3>\n<p>Since state management is quite tiring between the components, I decided to use Redux and some advanced Redux including asynchronous functions. <strong><em>Therefore, I decided to keep all my posts as a ListPosts state in the Redux store</em></strong></p>\n<p>Traditionally, in the class based components, we usually have to set up complex things such as <strong>mapStateToProps, mapDispatchToProps, connect</strong>, … to make redux work. However, React Hooks give us equivalent but handier way to handle redux. We will apply useSelector (mapStateToProps equivalent) and useDispatch (mapDispatchToProps).</p>\n<h4>1. Setting in the index.js file</h4>\n<p>This is quite a lot of work so I wouldnt come into too much detail in the post. First, we will need to install <strong>react-redux and redux</strong> dependencies. After that, we import <strong>createStore and Provider</strong> from react-redux. I recommend using an extra middleware (in my case, it is the <strong><em>logger</em></strong> function) (a function runs just before a <strong>state</strong> is changed) to monitor the state as we go along. Below is my complete setup for the index.js file without the imports</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> composeEnhancers = <span class=\"built_in\">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> logger = <span class=\"function\">(<span class=\"params\">store</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">action</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"[Middleware] Dispatching\"</span>,action)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> result = next(action)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"[Middleware] next state\"</span>, store.getState())</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125; <span class=\"comment\">//middleware</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer, composeEnhancers(applyMiddleware(logger, thunk)))</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(&lt;BrowserRouter&gt;&lt;Provider store=&#123;store&#125;&gt;&lt;App /&gt;&lt;/Provider&gt;&lt;/BrowserRouter&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</span><br></pre></td></tr></table></figure>\n<p>You can see that we wrap our App with 2 things the <strong>Provider</strong> with the store (for the redux store) and the <strong>BrowserRouter</strong> for the route usage in our app</p>\n<p>In our store, you add a middleware <strong>logger</strong> and a <strong>thunk</strong> (from redux thunk) in order to enable use using <strong>asynchronous</strong> code from the action folder of the Redux store later</p>\n<h4>2. Setting in the action folder</h4>\n<p>The action folders hold all the actions of a redux store (it is not recommended that you perform logic here). So we will define all of out actions in the action file such as create, read, update and delete</p>\n<p>Here is an example that I set up the create function in the action folder.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ADD_POST = <span class=\"string\">\"ADD_POST\"</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> addPost = <span class=\"function\">(<span class=\"params\">newPost</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:ADD_POST,</span><br><span class=\"line\">    newPost:newPost</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> addPostToServer = <span class=\"function\">(<span class=\"params\">newPost</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    Axios.post(<span class=\"string\">\"http://localhost:5000/posts/add\"</span>,newPost)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"add to database success\"</span>)</span><br><span class=\"line\">        dispatch(addPost(newPost))</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The upper function addPost is used to add a new post to both the <strong>ListPosts</strong> state in the store and to the database in the server (which I will mention later)</p>\n<p>Usually we would only defined the actions the in the action folder. However, I am using a very cool <strong>dispatch</strong> technique that allows me to perform asynchronous functions in the action folder. What I am doing here is that I am using Axios to call api to my server (which I will show you how to set up later) and update the database of my newest post.</p>\n<h4>3. Setting the reducer</h4>\n<p>This is probably the most <strong>important</strong> part of our Redux store. After receiving the action’s definition and payload (additional information that comes with the action), it will perform all the actual functions here in the reducer (No asynchronous functions here)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</span><br><span class=\"line\">  ListPosts:[],</span><br><span class=\"line\">  SearchList:[],</span><br><span class=\"line\">  MailList:[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">state = initialState, action</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> actionTypes.ADD_POST:</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          ...state,</span><br><span class=\"line\">          ListPosts:state.ListPosts.concat(action.newPost)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Inside the reducer, as I have mentioned before, I set a global state <strong>ListPosts</strong> to store all the posts that would be rendered to the screen.</p>\n<p>Every time the action <strong><em>add new Post</em></strong> is dispatched, it will execute the asynchronous functions in the action, updating the database and then it will go through the reducer, performing the action of adding a new post to the global state <strong>ListPosts</strong>. So here we update both the ListPosts state and the database. The image below should help you out a bit with this action flow :))</p>\n<img src=\"/CreateBlog/actionFlow.PNG\">\n<p>There, we are pretty much done with the <strong>Add new post</strong> function in the client-side.</p>\n<h3>Creating a server for the website using Nodejs and Express</h3>\n<p>I will create another folder called backend in my project and a file <strong>server.js</strong> inside that folder. This file will hold all of my server for the website. The settings are right below:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">\"body-parser\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cors = <span class=\"built_in\">require</span>(<span class=\"string\">\"cors\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(cors());</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;<span class=\"attr\">extended</span>: <span class=\"literal\">true</span>&#125;));</span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>,(err)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"server start success\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>With all of the settings, our server is up and loaded at <strong>port 5000</strong> of our localhost. Which means that in a way or another, even though your website is not hosted yet, you are not running your app in your computer but on the <strong>internet</strong> now. Cool right !</p>\n<p>I will start the server using the code below</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node server.js</span><br></pre></td></tr></table></figure>\n<p>Our server is completed and now we are going to set up our <strong>MongoDB</strong> database and connect it to our server.</p>\n<h3>Setting up the database using MongoDB Compass</h3>\n<p>You will have to install the latest stable version of <a href=\"https://robomongo.org/download\" target=\"_blank\" rel=\"noopener\">Robo3T</a> and <a href=\"https://www.mongodb.com/products/compass\" target=\"_blank\" rel=\"noopener\">MongoDB Compass</a> in order to setup the database. Once you have installed and set everything up, your database should look like this:</p>\n<img src=\"/CreateBlog/mongodb.PNG\">\n<p>Typically, your <strong>connection</strong> will be localhost:27017 so you will be able to create a new database inside the connection. I create my own database and named it <strong>“ListPostsBlog”</strong>. Inside the database, there will be different collections and each <strong>collection</strong> should serve its own purpose. For example, I will have a collection ListPostsForBlog where I will store all my posts as <strong>documents</strong> like below</p>\n<img src=\"/CreateBlog/mongoexample.PNG\">\n<p>If you get here, it means that you have successfully set up the database and it is ready to use.</p>\n<h3>Connecting the database to the server</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.header(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"http://localhost:3000\"</span>); <span class=\"comment\">// update to match the domain you will make the request from</span></span><br><span class=\"line\">  res.header(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span>);</span><br><span class=\"line\">  res.header(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"GET, POST, OPTIONS, PUT, DELETE\"</span>);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(</span><br><span class=\"line\">  <span class=\"string\">'mongodb://localhost/ListPostsBlog'</span>,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      useNewUrlParser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      useUnifiedTopology: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  (err) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"DB connect success!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>We use the <strong>app.use</strong> function to connect the <strong>backend</strong> side (which runs at localhost:5000) to our <strong>client</strong> side (which runs at localhost:3000). Then we use mongoose, an updated library developed from mongodb to connect to our database. Notice that the link <strong>‘mongodb://localhost/ListPostsBlog’</strong> must be precise in terms of connection and database name. (my database name is ListPostsBlog)</p>\n<h3>Structuring MongoDB</h3>\n<p>Since MongoDB is a database, it allows us to structure the data inside and assign them <strong>types</strong> and other attributes<br>\nsimilar to Microsoft Access that I learnt in grade 12 (something I see as really valuable) but MongoDB is <strong>NoSQL</strong> type database.</p>\n<p>Below I construct my database for 3 main components of a blog using Schema (supported by Mongoose): title, headline and content (I assume…). This should be put in your model folder in your backend folder.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PostSchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">  title:&#123;</span><br><span class=\"line\">    type:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  headline:&#123;</span><br><span class=\"line\">    type:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required:<span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  content:&#123;</span><br><span class=\"line\">    type:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required:<span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">\"Post\"</span>, PostSchema)</span><br></pre></td></tr></table></figure>\n<p>This file will export a PostSchema (Post Attributes you can say) for each Post that I create. Thus, we can import this <strong>PostSchema</strong> to other files we are about to use.</p>\n<h3>Setting up more routers to call API</h3>\n<p>What is API ?</p>\n<p>API is in short for Application Programming Interface, which is a standard <strong>protocol</strong> that developers use to transfer information. Lets say if you are doing actions in a website, the server wont get all the <strong>“raw data”</strong> that you are changing but different APIs of get, post, put, delete, … and then process the APIs and send you back responses(More can be found <a href=\"https://topdev.vn/blog/api-la-gi/\" target=\"_blank\" rel=\"noopener\">Here</a>)</p>\n<p>Since in our client-side React-app such as the <strong>add new post</strong> function above, we use Axios to call and post new data to our server.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Axios.post(<span class=\"string\">\"http://localhost:5000/posts/add\"</span>,newPost)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"add to database success\"</span>)</span><br><span class=\"line\">        dispatch(addPost(newPost))</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>\n<p>Therefore, right now in the server, we have to write routers to catch and process those APIs. So we will write a new router for rendering all the posts (get function) and creating new post</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PostRouter.get(<span class=\"string\">\"/\"</span>,(req,res)=&gt;&#123;</span><br><span class=\"line\">  ListPosts.find(<span class=\"function\">(<span class=\"params\">err, posts</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      res.json(posts)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">PostRouter.post(<span class=\"string\">\"/add\"</span>,(req,res)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> post = <span class=\"keyword\">new</span> ListPosts(req.body) </span><br><span class=\"line\">  post.save()</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      res.status(<span class=\"number\">200</span>).json(&#123;<span class=\"string\">\"post\"</span>:<span class=\"string\">\"Post added successfully\"</span> &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      res.status(<span class=\"number\">400</span>).send(<span class=\"string\">\"unable to save to database\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Here the <strong>ListPosts</strong> is extracted from the <strong>database</strong>.</p>\n<ul>\n<li>GET: the get-router is pretty simple, we will find in the database and render out all the data</li>\n<li>POST: the post-router always come with the information of the new post (remember when we <strong>dispatch</strong> addnewPost action, we send the newest postInfo as additional information). So we will get that information using <strong>req.body</strong> (body of the our request), create a new Post using the type in the PostSchema and upload it to the database.</li>\n</ul>\n<p>So we are done with the Post function (sounds really complex despite the simple click we do on websites everyday right :)) )</p>\n<h3>Render our ListPosts (Read function)</h3>\n<p>Here, we will render out all the posts in our global state ListPosts in the redux store. I will use the React Hook useEffect as a cleanup function, which is whenever the ListPosts state is changed, we will get the latest data from the database and pass it down to the ListPosts state.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> listPost = useSelector(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> state.ListPosts)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetchData = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"http://localhost:5000/posts\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> resJson = <span class=\"keyword\">await</span> response.json()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resJson</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> listPost = useSelector(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> state.ListPosts)</span><br><span class=\"line\"><span class=\"keyword\">const</span> [invalidate, setInvalidate] = useState(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = useDispatch()</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (invalidate) &#123;</span><br><span class=\"line\">      fetchData()</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          dispatch(actionCreators.updateListPost(res))</span><br><span class=\"line\">          <span class=\"comment\">// setListPost(res)</span></span><br><span class=\"line\">          setInvalidate(<span class=\"literal\">false</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [invalidate]);</span><br></pre></td></tr></table></figure>\n<p>Since the <strong>useEffect</strong> hook will run whenever the value in the array is changed (here is invalidate changes), it will automatically <strong>dispatch</strong> to the action updateListPost in the action and get the newest data from the database</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listPost.map(<span class=\"function\">(<span class=\"params\">post, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          &lt;div&gt;</span><br><span class=\"line\">          &lt;Link to=&#123;<span class=\"string\">`/posts/<span class=\"subst\">$&#123;post._id&#125;</span>`</span>&#125;&gt;</span><br><span class=\"line\">            &lt;Post</span><br><span class=\"line\">              key=&#123;index + <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">              title=&#123;post.title&#125;</span><br><span class=\"line\">              headline=&#123;post.headline&#125;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;() =&gt; deletePost(post, post._id)&#125;&gt;Remove&lt;/</span>button&gt;</span><br><span class=\"line\">          &lt;UpdatePost index=&#123;index&#125; post=&#123;post&#125;/&gt;            &#123;<span class=\"comment\">/*UPDATE POST*/</span>&#125; </span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>From there, we can easily render all the posts in the <strong>ListPosts state</strong> out to the screen easily using the map function. As you noticed, every time we <strong>render</strong> a post, we also add a <strong>delete button</strong> and a <strong>Update Component</strong> so that we can perform our delete and update functions.</p>\n<h3>Delete Function</h3>\n<p>All delete function always go with the <strong>id</strong> of the post we are deleting. So when we click the button “DeletePost above”, we will dispatch the action below.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> deletePost = <span class=\"function\">(<span class=\"params\">post, _id</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  dispatch(actionCreators.deletePostFromServer(post, _id))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">listPost.map(<span class=\"function\">(<span class=\"params\">post, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">        &lt;Link to=&#123;<span class=\"string\">`/posts/<span class=\"subst\">$&#123;post._id&#125;</span>`</span>&#125;&gt;</span><br><span class=\"line\">          &lt;Post</span><br><span class=\"line\">            key=&#123;index + <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">            title=&#123;post.title&#125;</span><br><span class=\"line\">            headline=&#123;post.headline&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button onClick=&#123;() =&gt; deletePost(post, post._id)&#125;&gt;Remove&lt;/</span>button&gt;</span><br><span class=\"line\">       &lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Again we are reaching to our Redux store, search for the action “DELETE_POST”, <strong>delete</strong> the post from the database in our server and then go to our Reducer and <strong>update</strong> the new state for the ListPosts, just as we do with the add new Post function</p>\n<p>Here is my action folder:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> deletePost = <span class=\"function\">(<span class=\"params\">post, _id</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:DELETE_POST,</span><br><span class=\"line\">    post:post,</span><br><span class=\"line\">    _id:_id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> deletePostFromServer = <span class=\"function\">(<span class=\"params\">post, _id</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    Axios.delete(<span class=\"string\">`http://localhost:5000/posts/delete/<span class=\"subst\">$&#123;post._id&#125;</span>`</span>)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        dispatch(deletePost(post, _id))</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As you notice, we still use Axios to call API to our server and pass down the 2 things in the delete function the actual <strong>post</strong> (so that later in the reducer we can use it to get the id of the <strong>post</strong> in the reducer) and the <strong>_id</strong> which is the id the Mongodb database automatically <strong>generate</strong> for us.</p>\n<p>Now we have successfully delete it in the database, we will update the <strong>state</strong> of ListPosts inside the redux store in the reducer file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> actionTypes.DELETE_POST:</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newListPost = state.ListPosts.filter(<span class=\"function\">(<span class=\"params\">post</span>)=&gt;</span> post._id != action._id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">      ...state,</span><br><span class=\"line\">      ListPosts: newListPost</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>We use the filter method and comparing the <strong>action</strong> (that will just passed down) id with the id from all the posts and remove the right post.</p>\n<h3>Update Function</h3>\n<p>This is the last main <strong>function</strong> of our app and to be honest it is a bit similar to how we do with the create function. We begin by creating an UpdatePost component</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> UpdatePost = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; post, index &#125; = props</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = useDispatch()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [postInfo, setPostInfo] = useState(&#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    headline: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    content: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> onSubmitHandler = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    e.preventDefault()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newPost = &#123;</span><br><span class=\"line\">      _id: post._id,</span><br><span class=\"line\">      title: postInfo.title,</span><br><span class=\"line\">      headline: postInfo.headline,</span><br><span class=\"line\">      content: postInfo.content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Axios.post(<span class=\"string\">`http://localhost:5000/posts/update/<span class=\"subst\">$&#123;newPost._id&#125;</span>`</span>, postInfo)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// dispatch(actionCreators.updatePostServer(newPost, index))</span></span><br><span class=\"line\">    setPostInfo(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      headline: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      content: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;form onSubmit=&#123;onSubmitHandler&#125;&gt;</span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">          name=<span class=\"string\">\"title\"</span></span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Enter title\"</span></span><br><span class=\"line\">          value=&#123;postInfo.title&#125;</span><br><span class=\"line\">          onChange=&#123;(e) =&gt; &#123; setPostInfo(&#123; ...postInfo, <span class=\"attr\">title</span>: e.target.value &#125;) &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">       &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">          name=<span class=\"string\">\"headline\"</span></span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Enter headline\"</span></span><br><span class=\"line\">          value=&#123;postInfo.headline&#125;</span><br><span class=\"line\">          onChange=&#123;(e) =&gt; &#123; setPostInfo(&#123; ...postInfo, <span class=\"attr\">headline</span>: e.target.value &#125;) &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">          name=<span class=\"string\">\"content\"</span></span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Enter content\"</span></span><br><span class=\"line\">          value=&#123;postInfo.content&#125;</span><br><span class=\"line\">          onChange=&#123;(e) =&gt; &#123; setPostInfo(&#123; ...postInfo, <span class=\"attr\">content</span>: e.target.value &#125;) &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"UpdatePost\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></span><br></pre></td></tr></table></figure>\n<p>You can see it is nearly identical to our add new <strong>post</strong> function. First we need to create 3 forms to handle the change of 3 main attributes of our post <strong>title, headline, and content</strong>.</p>\n<p>We will also set a <strong>postInfo</strong> state to contain the updated information in each post and whenever the input is changing (the user is entering new information), this state will be updated. Then we will store the <strong>postInfo</strong> information along with the <strong>_id</strong> from the <strong>post</strong> that we pass a props for the UpdatePost component in an object <strong>newPost</strong></p>\n<p>Finally, we use Axios to call to our API to post a new post to the exact id of the old post and we have updated it successfully.</p>\n<h3>Additional Functions</h3>\n<h4>Search Form</h4>\n<p>This is also a function that is used a lot when people are reading posts so I will show you how to add a search function in your app.</p>\n<p>The core of the <strong>search</strong> function is that we will create a form. After the user submits that form (pressing search), we will filter our global <strong>state</strong> ListPosts all the posts that have the titles that include the value of the form. After getting a filtered list, we will create another global state called <strong>SearchList</strong> to contain the new list. We must do this because if we filtered directly in the main ListPosts state, it will automatically <strong>remove</strong> your posts whenever you search them.</p>\n<p>So first in the Redux store, I will create another global state called SearchList</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</span><br><span class=\"line\">  ListPosts:[],</span><br><span class=\"line\">  SearchList:[],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now we will create a SearchForm component to store our search function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> SearchForm = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;searchPost&#125; = props</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value, setValue] = useState(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [fireRedirect, setFireRedirect] = useState(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = useDispatch()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// const useQuery = () =&gt; &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   return new URLSearchParams(useLocation().search);</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">  <span class=\"comment\">// const query = useQuery();</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> onSubmitHandler = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    e.preventDefault()</span><br><span class=\"line\">    setFireRedirect(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    searchPost(value)</span><br><span class=\"line\">    <span class=\"comment\">// dispatch(actionCreators.searchPost(value))</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;form onSubmit=&#123;onSubmitHandler&#125;&gt;</span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">          value=&#123;value&#125;</span><br><span class=\"line\">          onChange=&#123;(e) =&gt; setValue(e.target.value)&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;button type=<span class=\"string\">\"submit\"</span>&gt;Search&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>form&gt;</span><br><span class=\"line\">    &#123;fireRedirect &amp;&amp; &lt;Redirect to=&#123;`/posts/?name=$&#123;value&#125;`&#125; /&gt;&#125;</span><br><span class=\"line\">    &#123;<span class=\"comment\">/* &lt;button onClick=&#123;() =&gt; dispatch(actionCreators.clearSearchList())&#125;&gt;Refresh&lt;/button&gt; */</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>First, we still handle the forms in the standard way, creating a state that holds the value of the form and whenever the input is changing we will update the <strong>state</strong> with the corresponding value.</p>\n<p>We also set a function <strong>searchPost</strong> as a props of this component along with the new <strong>value</strong> that was just updated.</p>\n<p>So what does the <strong>fireRedirect</strong> do ?</p>\n<p>Well, this will help us redirect our page to the link “…/posts/?name=” similar to when we perform a <strong>query</strong> (search) on Google. For example if I <strong>searched</strong> “hello” on Google, I will be taken to the path “<a href=\"http://www.google.com/search?q=hello\" target=\"_blank\" rel=\"noopener\">www.google.com/search?q=hello</a>”.</p>\n<p>So I will do just as usual, dispatch the <strong>action</strong> SEARCH_POST. Here is my action folder:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> searchPost = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:SEARCH_POST,</span><br><span class=\"line\">    value:value <span class=\"comment\">//action payload dc gắn giá trị newPostListSearch</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In my reducer I will set my newly created global state SearchList as the filtered ListPosts.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> actionTypes.SEARCH_POST:</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newPostListSearch = state.ListPosts.filter(<span class=\"function\">(<span class=\"params\">post</span>) =&gt;</span> post.title.toLowerCase().includes(action.value.toLowerCase()))</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">          ...state,</span><br><span class=\"line\">          SearchList: newPostListSearch</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>And so we are done with the <strong>search</strong> function</p>\n<h2>Conclusion</h2>\n<p>So we have officially done with our M.E.R.N stack app. If you want to look at the source code you can find it <a href=\"https://github.com/MRSNOO/PersonalBlog\" target=\"_blank\" rel=\"noopener\">Here</a>. It is a basic web and has no styling at all yet :)) so sorry for that.</p>\n<p><strong>This is the end of my first super long post, I hope you enjoyed it and learnt something new from it. Hope I can receive more support in the future !!</strong></p>\n"},{"title":"Post#8 Create and upload a mobile application to App Store and Google Play Store","catalog":true,"date":"2021-06-20T01:53:06.000Z","subtitle":"30-min read","header-img":"header2.jpg","readtime":"30-min read","_content":"\nIt has been a while since I have written everything. I have some new projects since the winter and I will try to introduce to you guys some of the newest projects I have been working on since the spring semester. \n\nRight after the finals are over, I have the time to create my first mobile application called **Dashboard: Track your training** (Link [\"https://linktr.ee/quangnguyen14\"](here)) and upload it to Appstore and Google Play. It was quite a challenging time and I wanted to share to you some basics on how to do it and some lessons I learned from deploying my application.\n\nHere are the **big parts** that will be covered in this post. Notice that I will try not to go into too much details in this post because it will be super long. Instead, I will walk you through the tips, tricks and lessons I learned by a hard way when I was doing my app. If you want to take a look at the source code, feel free to see it [\"https://github.com/QuangNg14/Dashboard-App\"](here)\n\n1. Introductions\n2. Frontend\n3. Explaining the core feature: Location Tracking\n4. Backend\n5. Deploying to Appstore and Google Play Store\n\n## Introductions\n\n### Introductions of the app\n**Explaining the name** Dashboard = Dash + board. This name comprises of 2 of the main features of the app. You can **track** your training routes, **pin** your favorite locations and share your selfies to a board (or your **Feed**). It is a free sports management app with a friendly UI design that accurately records your training routes while helping you pin locations at ease and share your achievements with the DASHBOARD network. \n\n### What technologies did I use? \n1. **Expo React Native**. The front end of the app is built based on Expo React Native. It is really convenient and handy in handling the libraries. However, 1 downside is that we cannot control the native files and rely entirely on expo\n\n2. **Google Map API**. One of the location features used Google Map API\n3. **Expo Location**. This is the main library used for building the location tracking function\n4. **Cloudinary**. This is used to store images uploaded to the app\n5. **MongoDB and Express**. This is the combo for backend that I usually use to build fullstack apps\n6. **Google App engine**. This is where I host my server \n\n\n## Frontend\nNow we will be entering the main part **building** the actual app. Here are the components of our app. I will split into 2 parts: **the Side Screens** and the **core feature** Location Tracking\n### Side Screens \n1. Explaining Navigation v5 of React Native \n2. Building Welcome and Authentication Screens \n3. Building Account Screen \n\n#### Explaining Navigation v5 of React Native\nThe core of every app is navigation. In the newest version of react navigation v5, there has been a lot of changes to the navigation. Below is the map of our navigation. As you can see, we start from the **welcome screen** and the **login/signup screen** if we are not authenticated. The login and signup screen will be a **stack navigator** to move back and forth.\n\nWe will do a quick check to see if the user is authenticated. If they are not, they will be in the login, signup screen. If they are, they will be navigated to the **Main screen**. \n\n```javascript\n    {authState.userToken != null ? (\n        // <HomeTabScreen/>\n            <Drawer.Navigator\n                initialRouteName=\"TrackCreate\"\n                drawerContent={props => <DrawerContainer {...props} />}>\n                <Drawer.Screen name=\"TrackCreate\" component={HomeTabScreen} />\n            </Drawer.Navigator>\n        ) : (\n        <AuthStackScreen />\n    )}\n```\n\n{% asset_img navigator.png %}\n\nIn the main screen, there will be a **bottom tab navigator**. This will help us navigate between 4 screens: Track Create, Track List, Feed and Account. \n\n1. **Track Create**: after we finished recording a track, we will move to **Track Custom Screen** so we will need a stack navigator for these 2 screens\n2. **Track List**: after we clicked on a track on the track list, we will move to the track details. Thus, we will also need a stack navigator for these 2 screens.\n3. **Feed and Account** Screens stand by their own so we just need to add them to the Bottom Tab Navigator\n\n##### Quick Tip: How to customize the screen header\nYou **HAVE** to transform your screen into a stack screen by itself to customize the screen header. \n\n```javascript\n      <HomeTab.Screen\n        name=\"Feed\"\n        component={FeedCreateStackScreen}\n        options={{\n          title: \"Feed\"\n        }} />\n```\n\nHere I created the FeedCreateStackScreen for my Feed Screen to be able to customize my screen title.\n\n#### Building Welcome and Login/Signup Screen\n\nHere is a look of the Login/Signup Screen:\n\n{% asset_img signup.png %}\n\n**Notice**\nThese screens have basic functions to authenticate. I have already written a post about authenticating using JWT token [\"http://localhost:4000/MessengerClone/\"](here). However, we need to make sure that will use **SafeAreaView and ScrollView** to make it scrollable when the keyboard is opened (so that the keyboard doesnt cover the inputs)\n\n```javascript\n        <SafeAreaView style={styles.container}>\n            <View>\n                <ScrollView\n                    showsVerticalScrollIndicator={false}\n                >\n                ...\n```\n\n#### Building Account Screen\n\nThis is where the users can customize their profile. This screen has some basic features like changing avatar and viewing the personal information.\n\nHere it gets to a point where you will need to ask the users for **permission** to access their photos and cameras. This is the first permission we will need and luckily, we have **expo-image-picker** and **expo-camera** to help us. Below is how we usually request for permission to access the **media library** (photos) from the user in Expo.\n\n```javascript\n  useEffect(() => {\n    (async () => {\n      if (Platform.OS !== 'web') {\n        const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!');\n        }\n      }\n    })();\n  }, []);\n\n```\n\n**Notes** we should set the quality to 0.1 or lower to reduce the loading time for our app. We should also set the **base64** equal to true to **store** the image later\n\n```javascript\n  const pickImage = async () => {    \n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 0.1,\n      base64: true\n    })\n\n    if (result.cancelled) {\n      return\n    }\n```\n\nThere are many ways to store your images but I choose to use **Cloudinary** because their free package is really nice. What Cloudinary does is that it will create an image based on your **base64** link and **upload** that to their storage. After that, you can save your **profile image link** to your database and get it down whenever you want.\n\n```javascript\n    let base64Img = `data:image/jpg;base64,${result.base64}`;\n    let data = {\n      \"file\": base64Img,\n      \"upload_preset\": \"iqtz1hm2\",\n    }\n    await fetch(CLOUDINARY_URL, {\n      body: JSON.stringify(data),\n      headers: {\n        'content-type': 'application/json'\n      },\n      method: 'POST',\n    })\n```\n\n{% asset_img 8.avatar.png %}\n\n\n## Explaining the core feature: Location Tracking\n\nThis is probably the most important feature of the app. Location Tracking is pretty complicated and I will break it down for you in some parts\n\n1. Updating time continuously\n2. Create a Track reducer to handle recording new tracks\n3. Foreground Location\n4. Background Location\n5. Displaying it on a Map\n6. Customize a Track after saving\n7. Posting it to Feed\n\n### Updating time continuously\nThis is probably the easiest part. As you can see in most tracking app, there is a clock running **continuously**. I did this by having 3 **states**: hour, minute and second. When we start recording, we will increase second by 1 (every second) by using a **setInterval** function along with a **useEffect**\n\n```javascript\n    useEffect(() => {\n        let interval = setTimeout(() => setSecond(second + 1), 1000)\n```\n\nThen, if the second state is >= 60, it will be **resetted** to 0 and the minute state will be increased by 1. Similarly, if the minute state is >= 60, it will be **resetted** to 0 and the hour state will be increased by 1. \n\n\n### Create a Location context to handle recording new tracks\n\nThis is where we handle all the functions that are related to handling recodring the Locations. This can include **startRecording, stopRecording, and addLocation**. These are 3 things that are most important to the app. Everytime the user clicks Record, we will change the state to startRecording. Similarly, if they click Cancel, we will cancel recording. \n\n**Important Notes** When we are recording locations, we will add a new location (this is a combination of longitude, latitude, currentSpeed, accuracy level, ...) every second to our state using the **addLocation** function. \n\n```javascript\nconst addLocation = (dispatch) => {\n    return (location, isRecording, speedLst) => {\n        dispatch({type: \"add_current_location\", payload: location})\n    if(isRecording){\n        dispatch({type: \"add_location\", payload: location})\n        dispatch({type: \"add_speed\", payload: location.coords.speed * 3.6})\n        dispatch({type: \"add_current_speed\", payload: location.coords.speed * 3.6})\n    }\n    }\n}\n```\nThis is how the recording look like:\n{% asset_img 3.record.png %}\n\n\n### Foreground Location\nForeground location means that recording the location while **your phone is opened and you are opening the app**. This might not be too useful for an app that tracks your location while you are training because when you are cycling or running, you might **lock** your phone or **turn it off**. However, we will still have to include this. \n\n```javascript\n    const startWatching = async () => {\n        try {\n            const { granted } = await requestPermissionsAsync();\n            if (!granted) {\n                throw new Error('Location permission not granted');\n            }\n            subscriber = await watchPositionAsync(\n                {\n                    accuracy: Accuracy.BestForNavigation,\n                    timeInterval: 3000,\n                    distanceInterval: 30,\n                },\n                callback\n            );\n```\n\nHere we will use a function that was given to us by the expo library. This is the **watchPositionAsync**. It will basically record your location every 3 seconds or you have travelled 30 meters. Therefore, the recording might be a bit **inaccurate** when you barely moved or sit still. Make sure that you must **ASK FOR THE USER PERMISSION** to use Foreground location\n\n### Background Location\nBackground location means that recording the location while **your phone is not opened or your screen is locked**. This is the most complicated part of this app and it took me days to set up. This is because both IOS and Android have very strict protocols for asking background locations. \n\nWhen we are using background location, we will need to **ASK FOR USER PERMISSION** again but this time when you switch the app to the background it will prompt something like either **allow using location while using the app** or **always allow using location**\n\n```javascript\n  const startLocationTracking = React.useCallback(async () => {\n    let res = await Permissions.askAsync(Permissions.LOCATION);\n    if (res.status !== 'granted') {\n      console.log('Permission to access location was denied');\n    } \n    await Location.startLocationUpdatesAsync(LOCATION_TRACKING, {\n      accuracy: Location.Accuracy.BestForNavigation,\n      timeInterval: 3000, //update every second\n      distanceInterval: 50, //update every 10 meters,\n      foregroundService: {\n        notificationTitle: 'Using your location',\n        notificationBody: 'To turn off, go back to the app and switch something off.',\n      },\n      pausesUpdatesAutomatically: true\n    });\n```\n\nFor the background location, we will use the **startLocationUpdatesAsync** from expo library. This will track the location every 3 seconds or you have travelled 50 meters. \n\n**Notes 1**: For Android, you will need to have a **modal** or a **pop-up** to explain why you want to use the users' background location\n**Notes 2**: For Android, your app will need to have permission from Google Review to be able to see the background location functions \n**Notes 3**: For IOS, the pop up to ask for background location will be quite slow so in the first few tries it might not be up. \n\nThere will be a lot more **notes and tricks** on background location in the parts later when we try to **deploy** it to App Store and Google Play Store\n\n### Displaying it on a Map\nThis is quite easy since we can take advantage of the react native maps. We can use the MapView component to display a map in both IOS maps and Google maps. \n\n```javascript\n        <MapView\n          style={{ height: isRecording ? \"50%\" : \"80%\", flex: 1 }}\n          region={currentLocation && {\n            ...currentLocation.coords,\n            latitudeDelta: 0.005,\n            longitudeDelta: 0.005,\n          }}\n          showsUserLocation={true}\n          followsUserLocation={followsUserLocation}\n```\nThen we will use a **Polyline Component** also from react native maps to display our tracks on the screen. The locations variable here is our **locations** state. This is an array of small **Location** objects (with latitude, longitude, accuracy, ...) which I have explained above.\n```javascript\n    <PolylineComponent locations={locations}/>\n```\n\n\nThis is the screen where we are drawing the tracks on the map.\n{% asset_img 3.record.png %}\n\n### Pin a location\nThis is the **innovative** part of the app when compare to other apps. When we travelled to a new place, you can pin the current location and the app will display immediately the current address to the screen. This uses **Google Maps API** to get the most accurate current address.\n\n```javascript\n    const reverseGeocodeAPI = async (latlng) => {\n    const res = await axios.get(`${BASE_URL}?latlng=${latlng}&key=${API_KEY}`)\n    return res.data.results[0].formatted_address\n    }\n```\n\nSpecifically, we use the **reverseGeocode** API to achieve this functionality. In order to set up and use Google Maps API, you will first need a **Google API key**.\n\n1. Go to Google Cloud Console and create 2 new API keys at the Credentials page: 1 for IOS and 1 for Android\n{% asset_img apikey.png %}\n2. Restrict 1 key to Android App and the other to IOS app\n{% asset_img restrictkey.png %}\n3. Enable the Google Maps SDK for both IOS and Android in the market page \n{% asset_img market.png %}\n\nNow you have successfully set up the API keys and are ready to call the Google APIs\n\n### Customize a Track after saving\nThis is basically adding some information for the track before saving it, you can add name, type, descriptions and an **image** of your track. In order to upload image here, we once again need to **ask for the users permission** to access the media library and have to upload to **Cloudinary**\n\n**Notice**: because there will be a lot of inputs in this screen and you dont want the keyboard to **cover** your inputs, make sure to use **KeyboardAvoidingView** for IOS:\n\n```javascript\n    {Platform.OS === \"ios\" ? (\n      <KeyboardAvoidingView style={{ flex: 1 }} behavior=\"padding\">\n```\n\nAnd do this for Android:\n```javascript\n    <KeyboardAvoidingView keyboardVerticalOffset={-1000} style={{ flex: 1 }}>\n```\n\n### Posting it to Feed\nThe Feed screen is basically a **social media screen** where it will list out all the current posts and each post will have avatar, name, descriptions, image and **like, comment and share** sections like a normal Facebook post.\n\nThis can be done by getting all the posts from the database and display it to the screen\n\n```javascript\n  useEffect(() => {\n    fetchPosts()\n  }, [isFocused])\n\n  useEffect(() => {\n    if (state) {\n      setSortedState(state.slice().sort((a, b) => b.createdAt - a.createdAt))\n    }\n  }, [state])\n```\n\nWhat I do in the second useEffect is that I sort the post in the order that **newest** posts are on top. I will explain more about the schema of each post and comment and like cause it will be quite **complicated** \n\n## Backend\n### Setting up Express and some libraries\nIn Express, we used some standard libraries such as express, bodyParser and mongoose (for handle MongoDB). To connect to MongoDB, I have already written a blog [\"http://localhost:4000/Doctorally/\"](here). You guys can check it out.\n\n```javascript\nconst express = require(\"express\")\nconst mongoose = require(\"mongoose\")\nconst bodyParser = require(\"body-parser\")\n```\n\n**Notice that**, we use this config to extend our request data size:\n\n```javascript\n    app.use(express.urlencoded({\n        limit: '50mb',\n        parameterLimit: 100000,\n        extended: true \n    }));\n```\n\n### Explaining the routes\nThere are 3 types of routes:\n1. **Authentication** Routes. This is the authentication router using JWT Token. It is really common and I will not mention it in details here\n2. **Track** Routes. These are the routers that you will use to save your track details to MongoDB\n\nThis is an example of how to use the track routes to find **all** tracks of a user\n```javascript\n    router.get(\"/tracks\", requireAuth, async (req, res) => {\n        const tracks = await Track.find({userId: req.user._id})\n        res.send(tracks)\n    })\n```\n\n3. **Posts** Routes. These are the routers to control the posts that are posted to the Feed. Below is an example of how to get a post with a **specified id**:\n\n```javascript\n    router.get(\"/posts/:id\", requireAuth, async (req, res) => {\n        const id = req.params.id\n        const query = {_id: id}\n        const post = await Post.findOne(query)\n        try{\n            res.send(post)\n        }\n        catch(err){\n            return res.status(422).send({error: err.message})\n        }\n    })\n```\n\n### Explaining MongoDB Schema \nIn this part, I will explain in detail the schemas of each type of routes. \n\n#### The user schema:\nThe user schema consists of **information** like: email, password (encrypted), firstName, lastName, age, gender, image (link to avatar image)\n\n**Note 1**: we can set the image (avatar link) of a default image before the users change their avatar\n**Note 2**: In the user model, we will add a method to help comparePassword so that when we login, the password will be compared with the **encrypted** password saved in the database \n\n```javascript\nuserSchema.methods.comparePassword = function(candidatePassword) {\n  const user = this;\n\n  return new Promise((resolve, reject) => {\n    bcrypt.compare(candidatePassword, user.password, (err, isMatch) => {\n      if (err) {\n        return reject(err);\n      }\n\n      if (!isMatch) {\n        return reject(false);\n      }\n      \n      resolve(true);\n    });\n  });\n};\n```\n\n#### The Track Schema\nHere we need to understand the detailed information of each location that we saved. Each location we saved will be a **POINT** schema with information like current latitude, longitude, altitude, accuracy, ...\n\n```javascript\n    const pointSchema = new mongoose.Schema({\n        timestamp: Number,\n        coords:{\n            latitude: Number,\n            longitude: Number,\n            altitude: Number,\n            accuracy: Number,\n            heading: Number,\n            speed: Number\n        }\n    })\n```\nTherefore, each track will be an **list** of consecutive **points** so a track schema will look like this:\n```javascript\nconst trackSchema = new mongoose.Schema({\n    userId:{\n        type: mongoose.Schema.Types.ObjectId, \n        ref: 'User'\n    },\n    locations: [pointSchema],\n```\n\nNotice that we will also need a **userId** in each track. This will be a **reference** to the user table. This will help us keep track of whose track is this. \n\n### The Post Schema\nEach post will contain likes, comments, and a map of the track we saved. Therefore, we need **userId** as a reference of the user table to know whose post is this. We also need **trackId** as a reference of the track table to know what track is this. Lastly, we need the **likes** and **comments** schema to be lists of likeSchemas and commentSchemas.\n\nThese are the likeSchema and commentSchema\n```javascript\n    const commentSchema = new mongoose.Schema({\n        userId:{\n            type: mongoose.Schema.Types.ObjectId,\n            ref: 'User',\n        },\n        username: String,\n        text: String,\n        avatar: String\n    })\n\n    const likeSchema = new mongoose.Schema({\n        userId:{\n            type: mongoose.Schema.Types.ObjectId, \n            ref: 'User',\n        },\n        username:String,\n        avatar: String\n    })\n```\n\n```javascript\nconst postSchema = new mongoose.Schema({\n    userId:{\n        type: mongoose.Schema.Types.ObjectId, \n        ref: 'User',\n    },\n    trackId:{\n        type: mongoose.Schema.Types.ObjectId, \n        ref: 'Track'\n    },\n    likes: {\n        type: [likeSchema],\n        default: []\n    },\n    comments: {\n        type: [commentSchema],\n        default: []\n    },\n```\nThis is basically how we create the **postSchema**.\n\n### Host server on Google App Engine\nIn order to run your server on all machines, we need to host our server somewhere but I chose **Google App Engine**. You can use whatever service you like. Here is the quick recap of the steps that is in [\"https://cloud.google.com/appengine/docs/standard/nodejs/quickstart\"](this official tutorial) \n\n1. Create an app on Google Cloud Console\n{% asset_img newapp.png %}\n\n2. Register for the Google App Engine service to that app. Make sure to choose the region that is close to you\n{% asset_img newapp2.png %}\n\n3. Make sure that billing is enabled for your Cloud project (just use the trial version)\n\n4. Enable Cloud build API in the Market\n{% asset_img newapp3.png %}\n\n5. **IMPORTANT**: In your server folder, go to package.json and change the **\"main\" key** to \"server.js\". This is because google app engine only takes server.js as the main file. \n\n```javascript\n{\n  \"name\": \"track-server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"server.js\",\n  \"dependencies\": {\n    \"@expo/ngrok\": \"^2.4.3\",\n    \"aws-sdk\": \"^2.905.0\",\n    \"bcrypt\": \"^5.0.0\",\n    \"body-parser\": \"^1.19.0\",\n    \"express\": \"^4.17.1\",\n    \"jsonwebtoken\": \"^8.5.1\",\n    \"mongoose\": \"^5.11.16\",\n    \"multer\": \"^1.4.2\",\n    \"nodemon\": \"^2.0.7\"\n  },\n```\n\n6. Change the name of your main file (in the directory) from **index.js -> server.js**. Make sure to change all imports if necessary.\n\n7. Run gcloud app deploy and click yes if prompted\n\n8. After finished uploading, you are done. You can always check the logs if there is any error on the google cloud console -> Logs \n{% asset_img newapp4.png %}\n\n\n## Testing and Deploying to App Store and Google Play Store\nThis is the most exhausting and frustrating part but you have to go through this the first time. It actually took me **more time** to deploy to 2 stores than doing code. \n\n### Deploying an Expo App to App Store\nI will walk you through the very **detailed** steps from beginning to seeing your app on **App Store**\n1. Setting up app.json file\n2. Testing your app on Simulator and Custom Expo Go\n3. Build the app for IOS using the archive\n4. Register for Apple Development Program through Apple Developer App\n5. Create an app on App Store Connect\n6. Prepare screenshots and video records of your Application\n7. Test your app on TestFlight \n8. Submit your app for review and wait for approval\n\n#### Setting up app.json file\n**Versions and Build Number**: This is the file that all expo projects have. You will need to handle **versioning** and **buildNumber**. These seem difficult at first but it is actually really easy. Everytime you make changes and create a new build, you will increment your **build number** like from 1.1.5 -> 1.1.6. And everytime, you have a huge change or you want to update a version that is on the App Store already, you will need to **increase the version** like from 1.1.0 -> 1.2.0 \n\n**Icon Image** Here, you can set up your splash screen image (loading screen) or your customized icon. \n\n**ios file**. This is the most important file for IOS App as you can see from the name. In here, you will need to add the **PERMISSIONS YOU ASK FROM THE USERS** in the **infoPlist** key. Since my app is using background location, foreground location, media library and camera, all of these **configurations** are required:\n\n```json\n      \"infoPlist\": {\n        \"NSCameraUsageDescription\": \"Allow Dashboard to ...\",\n        \"NSLocationWhenInUseUsageDescription\": \"Allow Dashboard to ...\", \n        \"NSLocationAlwaysUsageDescription\": \"Allow Dashboard to ...\",\n        \"NSLocationAlwaysAndWhenInUseUsageDescription\": \"Allow Dashboard to ...\",\n        \"NSPhotoLibraryUsageDescription\": \"Give Dashboard permission to ...\",\n        \"UIBackgroundModes\": [\n          \"location\",\n          \"fetch\"\n        ]\n      },\n```\n\nIn the string value, you must provide a **detailed** description of how you want to use the features you ask from the users. For example, \"Allow Dashboard to access media library to upload avatar images\". You should also add a config of your API key like this if you are using Google Maps.\n\n```json\n    \"config\":{\n    \"googleMapsApiKey\": \"your api key\"\n    }\n```\n\n#### Testing your app on Simulator and Custom Expo Go\n\nUsually when builing your app, you would have already tested with some kind of simulators. To test an IOS App, it would be best to use **Xcode Simulator**. You can open Xcode and open the **simulator** from choose from navigation bar Window -> Devices and Simulator. Remember that you can choose any type of Iphone you want to simulate. You will need multiple Iphones for taking the screenshots later.\n\nAnother way to more accurately test it with Iphone is using the Custom Expo Go. You should consider following the instructions [\"https://docs.expo.io/guides/adhoc-builds/\"](here)\n\n#### Build the app for IOS using the archive\nYou need to build the iOS bundle that actually packages the code of your app. This is then deployed somewhere on the Expo servers. In order to do this run the code below. Detailed Instructions are at [\"https://docs.expo.io/distribution/building-standalone-apps/\"](here)\n\n```javascript\n    expo build:ios -t archive\n```\n\nThis will initiate the build and you will wait for Expo to build your code to an ios package. When it is done, it will give you a link where you can download your an **.ipa** file then encompasses your code. **KEEP THIS .IPA FILE** this is basically your whole app. \n\n#### Register for Apple Development Program through Apple Developer App\nYou will need to sign up for the Apple Developer Program:\n1. Go to https://developer.apple.com/programs/ and sign in with your Apple ID\n2. Click on Enroll\n3. Fill out the information and pay the $99 fee\n4. Wait for 1-2 days for your order to be processed\n\nor you can download the Apple Developer app from App Store to your **PHONE**. And register for the Apple Developer Program from the Account Tab. **Notice** that the $99 will be deducted from your current logged in **Apple ID**\n\n#### Create an app on App Store Connect\n\nGo to https://appstoreconnect.apple.com after you have successfully signed up for the Apple Developer Program and sign in to your Apple ID\n\nCreate a new app like in here:\n{% asset_img newapple.png %}\n\n**Notice**: THERE WILL BE AN ERROR HERE in the **bundle id**. The bundle id will be generated by the name and you will take that bundle ID and copy it into your app.json bundleId in IOS. However, it will not be activated right away you will get back into appstoreconnect and select from the dropdown and you will see your bundleId generated\n\n#### Prepare screenshots and video records of your Application\n\nPreparing **screenshots** of your Application in 6.5 inch phones (1242 × 2688px) and 5.5 inch phones (1242 x 2208px). It would be best to use the Simulator and take the **video recordings** and screenshots from their. You will also need screenshots of your app in tablets 2nd and 3rd generations as well but it is okay if you use the 4th or the 5th generation in your Simulator\n\n#### Test your app on TestFlight \n\nDownload the app Transporter from App Store to your Mac. Link [\"https://apps.apple.com/us/app/transporter/id1450874784?mt=12\"](here)\n\nRemember the **.ipa** file that I told you to save. This **.ipa** file is really important. You can now drop the .ipa file into your transporter app and it will upload automatically to TestFlight on App Store Connect. **REMEMBER**, you will need a different build version for each upload. You **CANNOT** have 2 builds that have the same versions and the same build number.\n\nYou can see the details in these 2 pictures below:\n\n{% asset_img newapple2.png %}\n\n{% asset_img newapple3.png %}\n\n\n#### Submit your app for review and wait for approval\n\nWhen you have finished all the steps above, your app is ready to submit for review. It will take from 24-48 hours to complete. **Notice** that Apple will extensively check and test out your app. Therefore, you should make sure that your app follows these rules so that it will not be rejected by Apple. The link is [here](\"https://developer.apple.com/app-store/review/\")\n\n### Deploying an Expo App to Google Play Store\n\n1. Setting up app.json file\n2. Testing your app on Android Emulator\n3. Build the .apk or .aab file for Android \n4. Register for Google Play Developer\n5. Create an app on Google Play\n6. Prepare screenshots and images of your Application\n7. Push your app through the testing stages and wait for review\n\n#### Setting up app.json file\nThe app.json file is quite similar to ios. You will control your version like the build number from IOS using the **versionCode**. **YOU HAVE TO SET YOUR API KEY** if you are using google maps:\n\n```json\n    \"config\":{\n      \"googleMaps\":{\n        \"apiKey\": \"your api key\"\n      }\n    }\n```\n\n**android file**. This is the most important file for Android App. In here, you will need to add the **PERMISSIONS YOU ASK FROM THE USERS** in the **permissions** key. Since my app is using background location, foreground location, media library and camera, all of these **configurations** are required. More info on setting up the file can be found [here](\"https://docs.expo.io/versions/v41.0.0/config/app/#apikey-2\")\n\n```json\n    \"permissions\": [\n      \"CAMERA\",\n      \"ACCESS_COARSE_LOCATION\",\n      \"ACCESS_FINE_LOCATION\",\n      \"READ_EXTERNAL_STORAGE\",\n      \"WRITE_EXTERNAL_STORAGE\",\n      \"ACCESS_BACKGROUND_LOCATION\",\n      \"FOREGROUND_SERVICE\"\n    ],\n```\n#### Testing your app on Android Emulator\nYou should download the Android Studio (link: \"https://developer.android.com/studio\") and use the **Android Emulator** in the AVD Manager. If you are using a Mac M1, you should consider using the Preview version 3 of the Android Emulator [here](\"https://github.com/741g/android-emulator-m1-preview/releases\")\n\nYou can also use an Android Phone and Download **Expo Go**. Then you can test your app like you did in the building stage\n\n#### Register for Google Play Developer\n1. Go to https://play.google.com/console\n2. Register for the Google Play Developer using a Google Account\n3. Pay the $25 fee for the Program\n4. Upload your National Citizen ID to help Google verify  \n\n\n#### Build the .apk or .aab file for Android \nAfter that, you can start the Expo build just like for IOS. When building for android you can choose to build APK (**expo build:android -t apk**) or Android App Bundle (**expo build:android -t app-bundle**). It is recommended that you use the App Bundle command. **KEEP THIS .APK OR .AAB file**\n\nThen, go to your Google Play Console at https://play.google.com/console. Create a new app with the same **bundle id** as your ios app. \n\n#### Testing in Google Play Console\nThere are some **stages** of testing in Google Play Console that you might find trouble understanding. You dont need to go through all the stages of testing even though you are recommended\n\nThere are 6 stages (as I understand): Pre-registration -> Internal Testing -> Closed Testing -> Open Testing -> Production -> Release.\n\nWhat you can do to test is that you will **DROP or UPLOAD** your .aab or .apk\nfile that was generated before into the Google Play Console. This will create a release of your app. You can **PROMOTE** your release in the order of the 6 stages above. For example, you can **promote** internal testing to open testing\nUsually, I would just do Closed Testing and then Production.\n\n1. Pre-registration: Check your app to see which devices it is suitable\n2. Internal and Closed Testing: Add some testers by email and send them a link to test out your app.\n\n{% asset_img google.png %}\n\n3. Open Testing: Your app is basically up in the store for users from the countries you selected to join in and test\n4. Production and Release: Final stages before your app is reviewed and released\n\n#### Prepare screenshots and images of your Application\nYou will need screenshots from an android device. You can just take the screenshots from your Emulator. You will also need a background image for your app. The size is specified on the Google Play Console\n\n#### Push your app through the testing stages and wait for review\n\n**YOUR APP SETTINGS**: can always be found in the **Main Store Listing** in the left tab of your Dashboard\n\n{% asset_img google2.png %}\n\n**COMPLETE YOUR APP CONTENT PAGE**: this page is super important because it has many policies related to ads, privacy policy and etc... This can be found here:\n\n{% asset_img google3.png %}\nYour app will be reviewed by the Google Team and will be published in 2-3 days. \n\n## Thank you for reading this post. I hope this post provided you with some insights on how to build and deploy a mobile application. See you guys again in the next post ! \n\n","source":"_posts/Dashboard-App.md","raw":"---\ntitle: Post#8 Create and upload a mobile application to App Store and Google Play Store\ncatalog: true\ndate: 2021-06-20 08:53:06\nsubtitle: 30-min read\nheader-img: \"header2.jpg\"\ntags: [javascript, react-native, nodejs, api, expo]\nreadtime: 30-min read\n---\n\nIt has been a while since I have written everything. I have some new projects since the winter and I will try to introduce to you guys some of the newest projects I have been working on since the spring semester. \n\nRight after the finals are over, I have the time to create my first mobile application called **Dashboard: Track your training** (Link [\"https://linktr.ee/quangnguyen14\"](here)) and upload it to Appstore and Google Play. It was quite a challenging time and I wanted to share to you some basics on how to do it and some lessons I learned from deploying my application.\n\nHere are the **big parts** that will be covered in this post. Notice that I will try not to go into too much details in this post because it will be super long. Instead, I will walk you through the tips, tricks and lessons I learned by a hard way when I was doing my app. If you want to take a look at the source code, feel free to see it [\"https://github.com/QuangNg14/Dashboard-App\"](here)\n\n1. Introductions\n2. Frontend\n3. Explaining the core feature: Location Tracking\n4. Backend\n5. Deploying to Appstore and Google Play Store\n\n## Introductions\n\n### Introductions of the app\n**Explaining the name** Dashboard = Dash + board. This name comprises of 2 of the main features of the app. You can **track** your training routes, **pin** your favorite locations and share your selfies to a board (or your **Feed**). It is a free sports management app with a friendly UI design that accurately records your training routes while helping you pin locations at ease and share your achievements with the DASHBOARD network. \n\n### What technologies did I use? \n1. **Expo React Native**. The front end of the app is built based on Expo React Native. It is really convenient and handy in handling the libraries. However, 1 downside is that we cannot control the native files and rely entirely on expo\n\n2. **Google Map API**. One of the location features used Google Map API\n3. **Expo Location**. This is the main library used for building the location tracking function\n4. **Cloudinary**. This is used to store images uploaded to the app\n5. **MongoDB and Express**. This is the combo for backend that I usually use to build fullstack apps\n6. **Google App engine**. This is where I host my server \n\n\n## Frontend\nNow we will be entering the main part **building** the actual app. Here are the components of our app. I will split into 2 parts: **the Side Screens** and the **core feature** Location Tracking\n### Side Screens \n1. Explaining Navigation v5 of React Native \n2. Building Welcome and Authentication Screens \n3. Building Account Screen \n\n#### Explaining Navigation v5 of React Native\nThe core of every app is navigation. In the newest version of react navigation v5, there has been a lot of changes to the navigation. Below is the map of our navigation. As you can see, we start from the **welcome screen** and the **login/signup screen** if we are not authenticated. The login and signup screen will be a **stack navigator** to move back and forth.\n\nWe will do a quick check to see if the user is authenticated. If they are not, they will be in the login, signup screen. If they are, they will be navigated to the **Main screen**. \n\n```javascript\n    {authState.userToken != null ? (\n        // <HomeTabScreen/>\n            <Drawer.Navigator\n                initialRouteName=\"TrackCreate\"\n                drawerContent={props => <DrawerContainer {...props} />}>\n                <Drawer.Screen name=\"TrackCreate\" component={HomeTabScreen} />\n            </Drawer.Navigator>\n        ) : (\n        <AuthStackScreen />\n    )}\n```\n\n{% asset_img navigator.png %}\n\nIn the main screen, there will be a **bottom tab navigator**. This will help us navigate between 4 screens: Track Create, Track List, Feed and Account. \n\n1. **Track Create**: after we finished recording a track, we will move to **Track Custom Screen** so we will need a stack navigator for these 2 screens\n2. **Track List**: after we clicked on a track on the track list, we will move to the track details. Thus, we will also need a stack navigator for these 2 screens.\n3. **Feed and Account** Screens stand by their own so we just need to add them to the Bottom Tab Navigator\n\n##### Quick Tip: How to customize the screen header\nYou **HAVE** to transform your screen into a stack screen by itself to customize the screen header. \n\n```javascript\n      <HomeTab.Screen\n        name=\"Feed\"\n        component={FeedCreateStackScreen}\n        options={{\n          title: \"Feed\"\n        }} />\n```\n\nHere I created the FeedCreateStackScreen for my Feed Screen to be able to customize my screen title.\n\n#### Building Welcome and Login/Signup Screen\n\nHere is a look of the Login/Signup Screen:\n\n{% asset_img signup.png %}\n\n**Notice**\nThese screens have basic functions to authenticate. I have already written a post about authenticating using JWT token [\"http://localhost:4000/MessengerClone/\"](here). However, we need to make sure that will use **SafeAreaView and ScrollView** to make it scrollable when the keyboard is opened (so that the keyboard doesnt cover the inputs)\n\n```javascript\n        <SafeAreaView style={styles.container}>\n            <View>\n                <ScrollView\n                    showsVerticalScrollIndicator={false}\n                >\n                ...\n```\n\n#### Building Account Screen\n\nThis is where the users can customize their profile. This screen has some basic features like changing avatar and viewing the personal information.\n\nHere it gets to a point where you will need to ask the users for **permission** to access their photos and cameras. This is the first permission we will need and luckily, we have **expo-image-picker** and **expo-camera** to help us. Below is how we usually request for permission to access the **media library** (photos) from the user in Expo.\n\n```javascript\n  useEffect(() => {\n    (async () => {\n      if (Platform.OS !== 'web') {\n        const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!');\n        }\n      }\n    })();\n  }, []);\n\n```\n\n**Notes** we should set the quality to 0.1 or lower to reduce the loading time for our app. We should also set the **base64** equal to true to **store** the image later\n\n```javascript\n  const pickImage = async () => {    \n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 0.1,\n      base64: true\n    })\n\n    if (result.cancelled) {\n      return\n    }\n```\n\nThere are many ways to store your images but I choose to use **Cloudinary** because their free package is really nice. What Cloudinary does is that it will create an image based on your **base64** link and **upload** that to their storage. After that, you can save your **profile image link** to your database and get it down whenever you want.\n\n```javascript\n    let base64Img = `data:image/jpg;base64,${result.base64}`;\n    let data = {\n      \"file\": base64Img,\n      \"upload_preset\": \"iqtz1hm2\",\n    }\n    await fetch(CLOUDINARY_URL, {\n      body: JSON.stringify(data),\n      headers: {\n        'content-type': 'application/json'\n      },\n      method: 'POST',\n    })\n```\n\n{% asset_img 8.avatar.png %}\n\n\n## Explaining the core feature: Location Tracking\n\nThis is probably the most important feature of the app. Location Tracking is pretty complicated and I will break it down for you in some parts\n\n1. Updating time continuously\n2. Create a Track reducer to handle recording new tracks\n3. Foreground Location\n4. Background Location\n5. Displaying it on a Map\n6. Customize a Track after saving\n7. Posting it to Feed\n\n### Updating time continuously\nThis is probably the easiest part. As you can see in most tracking app, there is a clock running **continuously**. I did this by having 3 **states**: hour, minute and second. When we start recording, we will increase second by 1 (every second) by using a **setInterval** function along with a **useEffect**\n\n```javascript\n    useEffect(() => {\n        let interval = setTimeout(() => setSecond(second + 1), 1000)\n```\n\nThen, if the second state is >= 60, it will be **resetted** to 0 and the minute state will be increased by 1. Similarly, if the minute state is >= 60, it will be **resetted** to 0 and the hour state will be increased by 1. \n\n\n### Create a Location context to handle recording new tracks\n\nThis is where we handle all the functions that are related to handling recodring the Locations. This can include **startRecording, stopRecording, and addLocation**. These are 3 things that are most important to the app. Everytime the user clicks Record, we will change the state to startRecording. Similarly, if they click Cancel, we will cancel recording. \n\n**Important Notes** When we are recording locations, we will add a new location (this is a combination of longitude, latitude, currentSpeed, accuracy level, ...) every second to our state using the **addLocation** function. \n\n```javascript\nconst addLocation = (dispatch) => {\n    return (location, isRecording, speedLst) => {\n        dispatch({type: \"add_current_location\", payload: location})\n    if(isRecording){\n        dispatch({type: \"add_location\", payload: location})\n        dispatch({type: \"add_speed\", payload: location.coords.speed * 3.6})\n        dispatch({type: \"add_current_speed\", payload: location.coords.speed * 3.6})\n    }\n    }\n}\n```\nThis is how the recording look like:\n{% asset_img 3.record.png %}\n\n\n### Foreground Location\nForeground location means that recording the location while **your phone is opened and you are opening the app**. This might not be too useful for an app that tracks your location while you are training because when you are cycling or running, you might **lock** your phone or **turn it off**. However, we will still have to include this. \n\n```javascript\n    const startWatching = async () => {\n        try {\n            const { granted } = await requestPermissionsAsync();\n            if (!granted) {\n                throw new Error('Location permission not granted');\n            }\n            subscriber = await watchPositionAsync(\n                {\n                    accuracy: Accuracy.BestForNavigation,\n                    timeInterval: 3000,\n                    distanceInterval: 30,\n                },\n                callback\n            );\n```\n\nHere we will use a function that was given to us by the expo library. This is the **watchPositionAsync**. It will basically record your location every 3 seconds or you have travelled 30 meters. Therefore, the recording might be a bit **inaccurate** when you barely moved or sit still. Make sure that you must **ASK FOR THE USER PERMISSION** to use Foreground location\n\n### Background Location\nBackground location means that recording the location while **your phone is not opened or your screen is locked**. This is the most complicated part of this app and it took me days to set up. This is because both IOS and Android have very strict protocols for asking background locations. \n\nWhen we are using background location, we will need to **ASK FOR USER PERMISSION** again but this time when you switch the app to the background it will prompt something like either **allow using location while using the app** or **always allow using location**\n\n```javascript\n  const startLocationTracking = React.useCallback(async () => {\n    let res = await Permissions.askAsync(Permissions.LOCATION);\n    if (res.status !== 'granted') {\n      console.log('Permission to access location was denied');\n    } \n    await Location.startLocationUpdatesAsync(LOCATION_TRACKING, {\n      accuracy: Location.Accuracy.BestForNavigation,\n      timeInterval: 3000, //update every second\n      distanceInterval: 50, //update every 10 meters,\n      foregroundService: {\n        notificationTitle: 'Using your location',\n        notificationBody: 'To turn off, go back to the app and switch something off.',\n      },\n      pausesUpdatesAutomatically: true\n    });\n```\n\nFor the background location, we will use the **startLocationUpdatesAsync** from expo library. This will track the location every 3 seconds or you have travelled 50 meters. \n\n**Notes 1**: For Android, you will need to have a **modal** or a **pop-up** to explain why you want to use the users' background location\n**Notes 2**: For Android, your app will need to have permission from Google Review to be able to see the background location functions \n**Notes 3**: For IOS, the pop up to ask for background location will be quite slow so in the first few tries it might not be up. \n\nThere will be a lot more **notes and tricks** on background location in the parts later when we try to **deploy** it to App Store and Google Play Store\n\n### Displaying it on a Map\nThis is quite easy since we can take advantage of the react native maps. We can use the MapView component to display a map in both IOS maps and Google maps. \n\n```javascript\n        <MapView\n          style={{ height: isRecording ? \"50%\" : \"80%\", flex: 1 }}\n          region={currentLocation && {\n            ...currentLocation.coords,\n            latitudeDelta: 0.005,\n            longitudeDelta: 0.005,\n          }}\n          showsUserLocation={true}\n          followsUserLocation={followsUserLocation}\n```\nThen we will use a **Polyline Component** also from react native maps to display our tracks on the screen. The locations variable here is our **locations** state. This is an array of small **Location** objects (with latitude, longitude, accuracy, ...) which I have explained above.\n```javascript\n    <PolylineComponent locations={locations}/>\n```\n\n\nThis is the screen where we are drawing the tracks on the map.\n{% asset_img 3.record.png %}\n\n### Pin a location\nThis is the **innovative** part of the app when compare to other apps. When we travelled to a new place, you can pin the current location and the app will display immediately the current address to the screen. This uses **Google Maps API** to get the most accurate current address.\n\n```javascript\n    const reverseGeocodeAPI = async (latlng) => {\n    const res = await axios.get(`${BASE_URL}?latlng=${latlng}&key=${API_KEY}`)\n    return res.data.results[0].formatted_address\n    }\n```\n\nSpecifically, we use the **reverseGeocode** API to achieve this functionality. In order to set up and use Google Maps API, you will first need a **Google API key**.\n\n1. Go to Google Cloud Console and create 2 new API keys at the Credentials page: 1 for IOS and 1 for Android\n{% asset_img apikey.png %}\n2. Restrict 1 key to Android App and the other to IOS app\n{% asset_img restrictkey.png %}\n3. Enable the Google Maps SDK for both IOS and Android in the market page \n{% asset_img market.png %}\n\nNow you have successfully set up the API keys and are ready to call the Google APIs\n\n### Customize a Track after saving\nThis is basically adding some information for the track before saving it, you can add name, type, descriptions and an **image** of your track. In order to upload image here, we once again need to **ask for the users permission** to access the media library and have to upload to **Cloudinary**\n\n**Notice**: because there will be a lot of inputs in this screen and you dont want the keyboard to **cover** your inputs, make sure to use **KeyboardAvoidingView** for IOS:\n\n```javascript\n    {Platform.OS === \"ios\" ? (\n      <KeyboardAvoidingView style={{ flex: 1 }} behavior=\"padding\">\n```\n\nAnd do this for Android:\n```javascript\n    <KeyboardAvoidingView keyboardVerticalOffset={-1000} style={{ flex: 1 }}>\n```\n\n### Posting it to Feed\nThe Feed screen is basically a **social media screen** where it will list out all the current posts and each post will have avatar, name, descriptions, image and **like, comment and share** sections like a normal Facebook post.\n\nThis can be done by getting all the posts from the database and display it to the screen\n\n```javascript\n  useEffect(() => {\n    fetchPosts()\n  }, [isFocused])\n\n  useEffect(() => {\n    if (state) {\n      setSortedState(state.slice().sort((a, b) => b.createdAt - a.createdAt))\n    }\n  }, [state])\n```\n\nWhat I do in the second useEffect is that I sort the post in the order that **newest** posts are on top. I will explain more about the schema of each post and comment and like cause it will be quite **complicated** \n\n## Backend\n### Setting up Express and some libraries\nIn Express, we used some standard libraries such as express, bodyParser and mongoose (for handle MongoDB). To connect to MongoDB, I have already written a blog [\"http://localhost:4000/Doctorally/\"](here). You guys can check it out.\n\n```javascript\nconst express = require(\"express\")\nconst mongoose = require(\"mongoose\")\nconst bodyParser = require(\"body-parser\")\n```\n\n**Notice that**, we use this config to extend our request data size:\n\n```javascript\n    app.use(express.urlencoded({\n        limit: '50mb',\n        parameterLimit: 100000,\n        extended: true \n    }));\n```\n\n### Explaining the routes\nThere are 3 types of routes:\n1. **Authentication** Routes. This is the authentication router using JWT Token. It is really common and I will not mention it in details here\n2. **Track** Routes. These are the routers that you will use to save your track details to MongoDB\n\nThis is an example of how to use the track routes to find **all** tracks of a user\n```javascript\n    router.get(\"/tracks\", requireAuth, async (req, res) => {\n        const tracks = await Track.find({userId: req.user._id})\n        res.send(tracks)\n    })\n```\n\n3. **Posts** Routes. These are the routers to control the posts that are posted to the Feed. Below is an example of how to get a post with a **specified id**:\n\n```javascript\n    router.get(\"/posts/:id\", requireAuth, async (req, res) => {\n        const id = req.params.id\n        const query = {_id: id}\n        const post = await Post.findOne(query)\n        try{\n            res.send(post)\n        }\n        catch(err){\n            return res.status(422).send({error: err.message})\n        }\n    })\n```\n\n### Explaining MongoDB Schema \nIn this part, I will explain in detail the schemas of each type of routes. \n\n#### The user schema:\nThe user schema consists of **information** like: email, password (encrypted), firstName, lastName, age, gender, image (link to avatar image)\n\n**Note 1**: we can set the image (avatar link) of a default image before the users change their avatar\n**Note 2**: In the user model, we will add a method to help comparePassword so that when we login, the password will be compared with the **encrypted** password saved in the database \n\n```javascript\nuserSchema.methods.comparePassword = function(candidatePassword) {\n  const user = this;\n\n  return new Promise((resolve, reject) => {\n    bcrypt.compare(candidatePassword, user.password, (err, isMatch) => {\n      if (err) {\n        return reject(err);\n      }\n\n      if (!isMatch) {\n        return reject(false);\n      }\n      \n      resolve(true);\n    });\n  });\n};\n```\n\n#### The Track Schema\nHere we need to understand the detailed information of each location that we saved. Each location we saved will be a **POINT** schema with information like current latitude, longitude, altitude, accuracy, ...\n\n```javascript\n    const pointSchema = new mongoose.Schema({\n        timestamp: Number,\n        coords:{\n            latitude: Number,\n            longitude: Number,\n            altitude: Number,\n            accuracy: Number,\n            heading: Number,\n            speed: Number\n        }\n    })\n```\nTherefore, each track will be an **list** of consecutive **points** so a track schema will look like this:\n```javascript\nconst trackSchema = new mongoose.Schema({\n    userId:{\n        type: mongoose.Schema.Types.ObjectId, \n        ref: 'User'\n    },\n    locations: [pointSchema],\n```\n\nNotice that we will also need a **userId** in each track. This will be a **reference** to the user table. This will help us keep track of whose track is this. \n\n### The Post Schema\nEach post will contain likes, comments, and a map of the track we saved. Therefore, we need **userId** as a reference of the user table to know whose post is this. We also need **trackId** as a reference of the track table to know what track is this. Lastly, we need the **likes** and **comments** schema to be lists of likeSchemas and commentSchemas.\n\nThese are the likeSchema and commentSchema\n```javascript\n    const commentSchema = new mongoose.Schema({\n        userId:{\n            type: mongoose.Schema.Types.ObjectId,\n            ref: 'User',\n        },\n        username: String,\n        text: String,\n        avatar: String\n    })\n\n    const likeSchema = new mongoose.Schema({\n        userId:{\n            type: mongoose.Schema.Types.ObjectId, \n            ref: 'User',\n        },\n        username:String,\n        avatar: String\n    })\n```\n\n```javascript\nconst postSchema = new mongoose.Schema({\n    userId:{\n        type: mongoose.Schema.Types.ObjectId, \n        ref: 'User',\n    },\n    trackId:{\n        type: mongoose.Schema.Types.ObjectId, \n        ref: 'Track'\n    },\n    likes: {\n        type: [likeSchema],\n        default: []\n    },\n    comments: {\n        type: [commentSchema],\n        default: []\n    },\n```\nThis is basically how we create the **postSchema**.\n\n### Host server on Google App Engine\nIn order to run your server on all machines, we need to host our server somewhere but I chose **Google App Engine**. You can use whatever service you like. Here is the quick recap of the steps that is in [\"https://cloud.google.com/appengine/docs/standard/nodejs/quickstart\"](this official tutorial) \n\n1. Create an app on Google Cloud Console\n{% asset_img newapp.png %}\n\n2. Register for the Google App Engine service to that app. Make sure to choose the region that is close to you\n{% asset_img newapp2.png %}\n\n3. Make sure that billing is enabled for your Cloud project (just use the trial version)\n\n4. Enable Cloud build API in the Market\n{% asset_img newapp3.png %}\n\n5. **IMPORTANT**: In your server folder, go to package.json and change the **\"main\" key** to \"server.js\". This is because google app engine only takes server.js as the main file. \n\n```javascript\n{\n  \"name\": \"track-server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"server.js\",\n  \"dependencies\": {\n    \"@expo/ngrok\": \"^2.4.3\",\n    \"aws-sdk\": \"^2.905.0\",\n    \"bcrypt\": \"^5.0.0\",\n    \"body-parser\": \"^1.19.0\",\n    \"express\": \"^4.17.1\",\n    \"jsonwebtoken\": \"^8.5.1\",\n    \"mongoose\": \"^5.11.16\",\n    \"multer\": \"^1.4.2\",\n    \"nodemon\": \"^2.0.7\"\n  },\n```\n\n6. Change the name of your main file (in the directory) from **index.js -> server.js**. Make sure to change all imports if necessary.\n\n7. Run gcloud app deploy and click yes if prompted\n\n8. After finished uploading, you are done. You can always check the logs if there is any error on the google cloud console -> Logs \n{% asset_img newapp4.png %}\n\n\n## Testing and Deploying to App Store and Google Play Store\nThis is the most exhausting and frustrating part but you have to go through this the first time. It actually took me **more time** to deploy to 2 stores than doing code. \n\n### Deploying an Expo App to App Store\nI will walk you through the very **detailed** steps from beginning to seeing your app on **App Store**\n1. Setting up app.json file\n2. Testing your app on Simulator and Custom Expo Go\n3. Build the app for IOS using the archive\n4. Register for Apple Development Program through Apple Developer App\n5. Create an app on App Store Connect\n6. Prepare screenshots and video records of your Application\n7. Test your app on TestFlight \n8. Submit your app for review and wait for approval\n\n#### Setting up app.json file\n**Versions and Build Number**: This is the file that all expo projects have. You will need to handle **versioning** and **buildNumber**. These seem difficult at first but it is actually really easy. Everytime you make changes and create a new build, you will increment your **build number** like from 1.1.5 -> 1.1.6. And everytime, you have a huge change or you want to update a version that is on the App Store already, you will need to **increase the version** like from 1.1.0 -> 1.2.0 \n\n**Icon Image** Here, you can set up your splash screen image (loading screen) or your customized icon. \n\n**ios file**. This is the most important file for IOS App as you can see from the name. In here, you will need to add the **PERMISSIONS YOU ASK FROM THE USERS** in the **infoPlist** key. Since my app is using background location, foreground location, media library and camera, all of these **configurations** are required:\n\n```json\n      \"infoPlist\": {\n        \"NSCameraUsageDescription\": \"Allow Dashboard to ...\",\n        \"NSLocationWhenInUseUsageDescription\": \"Allow Dashboard to ...\", \n        \"NSLocationAlwaysUsageDescription\": \"Allow Dashboard to ...\",\n        \"NSLocationAlwaysAndWhenInUseUsageDescription\": \"Allow Dashboard to ...\",\n        \"NSPhotoLibraryUsageDescription\": \"Give Dashboard permission to ...\",\n        \"UIBackgroundModes\": [\n          \"location\",\n          \"fetch\"\n        ]\n      },\n```\n\nIn the string value, you must provide a **detailed** description of how you want to use the features you ask from the users. For example, \"Allow Dashboard to access media library to upload avatar images\". You should also add a config of your API key like this if you are using Google Maps.\n\n```json\n    \"config\":{\n    \"googleMapsApiKey\": \"your api key\"\n    }\n```\n\n#### Testing your app on Simulator and Custom Expo Go\n\nUsually when builing your app, you would have already tested with some kind of simulators. To test an IOS App, it would be best to use **Xcode Simulator**. You can open Xcode and open the **simulator** from choose from navigation bar Window -> Devices and Simulator. Remember that you can choose any type of Iphone you want to simulate. You will need multiple Iphones for taking the screenshots later.\n\nAnother way to more accurately test it with Iphone is using the Custom Expo Go. You should consider following the instructions [\"https://docs.expo.io/guides/adhoc-builds/\"](here)\n\n#### Build the app for IOS using the archive\nYou need to build the iOS bundle that actually packages the code of your app. This is then deployed somewhere on the Expo servers. In order to do this run the code below. Detailed Instructions are at [\"https://docs.expo.io/distribution/building-standalone-apps/\"](here)\n\n```javascript\n    expo build:ios -t archive\n```\n\nThis will initiate the build and you will wait for Expo to build your code to an ios package. When it is done, it will give you a link where you can download your an **.ipa** file then encompasses your code. **KEEP THIS .IPA FILE** this is basically your whole app. \n\n#### Register for Apple Development Program through Apple Developer App\nYou will need to sign up for the Apple Developer Program:\n1. Go to https://developer.apple.com/programs/ and sign in with your Apple ID\n2. Click on Enroll\n3. Fill out the information and pay the $99 fee\n4. Wait for 1-2 days for your order to be processed\n\nor you can download the Apple Developer app from App Store to your **PHONE**. And register for the Apple Developer Program from the Account Tab. **Notice** that the $99 will be deducted from your current logged in **Apple ID**\n\n#### Create an app on App Store Connect\n\nGo to https://appstoreconnect.apple.com after you have successfully signed up for the Apple Developer Program and sign in to your Apple ID\n\nCreate a new app like in here:\n{% asset_img newapple.png %}\n\n**Notice**: THERE WILL BE AN ERROR HERE in the **bundle id**. The bundle id will be generated by the name and you will take that bundle ID and copy it into your app.json bundleId in IOS. However, it will not be activated right away you will get back into appstoreconnect and select from the dropdown and you will see your bundleId generated\n\n#### Prepare screenshots and video records of your Application\n\nPreparing **screenshots** of your Application in 6.5 inch phones (1242 × 2688px) and 5.5 inch phones (1242 x 2208px). It would be best to use the Simulator and take the **video recordings** and screenshots from their. You will also need screenshots of your app in tablets 2nd and 3rd generations as well but it is okay if you use the 4th or the 5th generation in your Simulator\n\n#### Test your app on TestFlight \n\nDownload the app Transporter from App Store to your Mac. Link [\"https://apps.apple.com/us/app/transporter/id1450874784?mt=12\"](here)\n\nRemember the **.ipa** file that I told you to save. This **.ipa** file is really important. You can now drop the .ipa file into your transporter app and it will upload automatically to TestFlight on App Store Connect. **REMEMBER**, you will need a different build version for each upload. You **CANNOT** have 2 builds that have the same versions and the same build number.\n\nYou can see the details in these 2 pictures below:\n\n{% asset_img newapple2.png %}\n\n{% asset_img newapple3.png %}\n\n\n#### Submit your app for review and wait for approval\n\nWhen you have finished all the steps above, your app is ready to submit for review. It will take from 24-48 hours to complete. **Notice** that Apple will extensively check and test out your app. Therefore, you should make sure that your app follows these rules so that it will not be rejected by Apple. The link is [here](\"https://developer.apple.com/app-store/review/\")\n\n### Deploying an Expo App to Google Play Store\n\n1. Setting up app.json file\n2. Testing your app on Android Emulator\n3. Build the .apk or .aab file for Android \n4. Register for Google Play Developer\n5. Create an app on Google Play\n6. Prepare screenshots and images of your Application\n7. Push your app through the testing stages and wait for review\n\n#### Setting up app.json file\nThe app.json file is quite similar to ios. You will control your version like the build number from IOS using the **versionCode**. **YOU HAVE TO SET YOUR API KEY** if you are using google maps:\n\n```json\n    \"config\":{\n      \"googleMaps\":{\n        \"apiKey\": \"your api key\"\n      }\n    }\n```\n\n**android file**. This is the most important file for Android App. In here, you will need to add the **PERMISSIONS YOU ASK FROM THE USERS** in the **permissions** key. Since my app is using background location, foreground location, media library and camera, all of these **configurations** are required. More info on setting up the file can be found [here](\"https://docs.expo.io/versions/v41.0.0/config/app/#apikey-2\")\n\n```json\n    \"permissions\": [\n      \"CAMERA\",\n      \"ACCESS_COARSE_LOCATION\",\n      \"ACCESS_FINE_LOCATION\",\n      \"READ_EXTERNAL_STORAGE\",\n      \"WRITE_EXTERNAL_STORAGE\",\n      \"ACCESS_BACKGROUND_LOCATION\",\n      \"FOREGROUND_SERVICE\"\n    ],\n```\n#### Testing your app on Android Emulator\nYou should download the Android Studio (link: \"https://developer.android.com/studio\") and use the **Android Emulator** in the AVD Manager. If you are using a Mac M1, you should consider using the Preview version 3 of the Android Emulator [here](\"https://github.com/741g/android-emulator-m1-preview/releases\")\n\nYou can also use an Android Phone and Download **Expo Go**. Then you can test your app like you did in the building stage\n\n#### Register for Google Play Developer\n1. Go to https://play.google.com/console\n2. Register for the Google Play Developer using a Google Account\n3. Pay the $25 fee for the Program\n4. Upload your National Citizen ID to help Google verify  \n\n\n#### Build the .apk or .aab file for Android \nAfter that, you can start the Expo build just like for IOS. When building for android you can choose to build APK (**expo build:android -t apk**) or Android App Bundle (**expo build:android -t app-bundle**). It is recommended that you use the App Bundle command. **KEEP THIS .APK OR .AAB file**\n\nThen, go to your Google Play Console at https://play.google.com/console. Create a new app with the same **bundle id** as your ios app. \n\n#### Testing in Google Play Console\nThere are some **stages** of testing in Google Play Console that you might find trouble understanding. You dont need to go through all the stages of testing even though you are recommended\n\nThere are 6 stages (as I understand): Pre-registration -> Internal Testing -> Closed Testing -> Open Testing -> Production -> Release.\n\nWhat you can do to test is that you will **DROP or UPLOAD** your .aab or .apk\nfile that was generated before into the Google Play Console. This will create a release of your app. You can **PROMOTE** your release in the order of the 6 stages above. For example, you can **promote** internal testing to open testing\nUsually, I would just do Closed Testing and then Production.\n\n1. Pre-registration: Check your app to see which devices it is suitable\n2. Internal and Closed Testing: Add some testers by email and send them a link to test out your app.\n\n{% asset_img google.png %}\n\n3. Open Testing: Your app is basically up in the store for users from the countries you selected to join in and test\n4. Production and Release: Final stages before your app is reviewed and released\n\n#### Prepare screenshots and images of your Application\nYou will need screenshots from an android device. You can just take the screenshots from your Emulator. You will also need a background image for your app. The size is specified on the Google Play Console\n\n#### Push your app through the testing stages and wait for review\n\n**YOUR APP SETTINGS**: can always be found in the **Main Store Listing** in the left tab of your Dashboard\n\n{% asset_img google2.png %}\n\n**COMPLETE YOUR APP CONTENT PAGE**: this page is super important because it has many policies related to ads, privacy policy and etc... This can be found here:\n\n{% asset_img google3.png %}\nYour app will be reviewed by the Google Team and will be published in 2-3 days. \n\n## Thank you for reading this post. I hope this post provided you with some insights on how to build and deploy a mobile application. See you guys again in the next post ! \n\n","slug":"Dashboard-App","published":1,"updated":"2021-06-21T13:38:13.953Z","_id":"ckq5zemsp0003c6sb0xenwvne","comments":1,"layout":"post","photos":[],"link":"","content":"<p>It has been a while since I have written everything. I have some new projects since the winter and I will try to introduce to you guys some of the newest projects I have been working on since the spring semester.</p>\n<p>Right after the finals are over, I have the time to create my first mobile application called <strong>Dashboard: Track your training</strong> (Link <a href=\"here\">“https://linktr.ee/quangnguyen14”</a>) and upload it to Appstore and Google Play. It was quite a challenging time and I wanted to share to you some basics on how to do it and some lessons I learned from deploying my application.</p>\n<p>Here are the <strong>big parts</strong> that will be covered in this post. Notice that I will try not to go into too much details in this post because it will be super long. Instead, I will walk you through the tips, tricks and lessons I learned by a hard way when I was doing my app. If you want to take a look at the source code, feel free to see it <a href=\"here\">“https://github.com/QuangNg14/Dashboard-App”</a></p>\n<ol>\n<li>Introductions</li>\n<li>Frontend</li>\n<li>Explaining the core feature: Location Tracking</li>\n<li>Backend</li>\n<li>Deploying to Appstore and Google Play Store</li>\n</ol>\n<h2><span id=\"introductions\">Introductions</span></h2>\n<h3><span id=\"introductions-of-the-app\">Introductions of the app</span></h3>\n<p><strong>Explaining the name</strong> Dashboard = Dash + board. This name comprises of 2 of the main features of the app. You can <strong>track</strong> your training routes, <strong>pin</strong> your favorite locations and share your selfies to a board (or your <strong>Feed</strong>). It is a free sports management app with a friendly UI design that accurately records your training routes while helping you pin locations at ease and share your achievements with the DASHBOARD network.</p>\n<h3><span id=\"what-technologies-did-i-use\">What technologies did I use?</span></h3>\n<ol>\n<li>\n<p><strong>Expo React Native</strong>. The front end of the app is built based on Expo React Native. It is really convenient and handy in handling the libraries. However, 1 downside is that we cannot control the native files and rely entirely on expo</p>\n</li>\n<li>\n<p><strong>Google Map API</strong>. One of the location features used Google Map API</p>\n</li>\n<li>\n<p><strong>Expo Location</strong>. This is the main library used for building the location tracking function</p>\n</li>\n<li>\n<p><strong>Cloudinary</strong>. This is used to store images uploaded to the app</p>\n</li>\n<li>\n<p><strong>MongoDB and Express</strong>. This is the combo for backend that I usually use to build fullstack apps</p>\n</li>\n<li>\n<p><strong>Google App engine</strong>. This is where I host my server</p>\n</li>\n</ol>\n<h2><span id=\"frontend\">Frontend</span></h2>\n<p>Now we will be entering the main part <strong>building</strong> the actual app. Here are the components of our app. I will split into 2 parts: <strong>the Side Screens</strong> and the <strong>core feature</strong> Location Tracking</p>\n<h3><span id=\"side-screens\">Side Screens</span></h3>\n<ol>\n<li>Explaining Navigation v5 of React Native</li>\n<li>Building Welcome and Authentication Screens</li>\n<li>Building Account Screen</li>\n</ol>\n<h4><span id=\"explaining-navigation-v5-of-react-native\">Explaining Navigation v5 of React Native</span></h4>\n<p>The core of every app is navigation. In the newest version of react navigation v5, there has been a lot of changes to the navigation. Below is the map of our navigation. As you can see, we start from the <strong>welcome screen</strong> and the <strong>login/signup screen</strong> if we are not authenticated. The login and signup screen will be a <strong>stack navigator</strong> to move back and forth.</p>\n<p>We will do a quick check to see if the user is authenticated. If they are not, they will be in the login, signup screen. If they are, they will be navigated to the <strong>Main screen</strong>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;authState.userToken != <span class=\"literal\">null</span> ? (</span><br><span class=\"line\">    <span class=\"comment\">// &lt;HomeTabScreen/&gt;</span></span><br><span class=\"line\">        &lt;Drawer.Navigator</span><br><span class=\"line\">            initialRouteName=<span class=\"string\">\"TrackCreate\"</span></span><br><span class=\"line\">            drawerContent=&#123;props =&gt; &lt;DrawerContainer &#123;...props&#125; /&gt;&#125;&gt;</span><br><span class=\"line\">            &lt;Drawer.Screen name=<span class=\"string\">\"TrackCreate\"</span> component=&#123;HomeTabScreen&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Drawer.Navigator&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ) : (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;AuthStackScreen /</span>&gt;</span><br><span class=\"line\">)&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/Dashboard-App/navigator.png\">\n<p>In the main screen, there will be a <strong>bottom tab navigator</strong>. This will help us navigate between 4 screens: Track Create, Track List, Feed and Account.</p>\n<ol>\n<li><strong>Track Create</strong>: after we finished recording a track, we will move to <strong>Track Custom Screen</strong> so we will need a stack navigator for these 2 screens</li>\n<li><strong>Track List</strong>: after we clicked on a track on the track list, we will move to the track details. Thus, we will also need a stack navigator for these 2 screens.</li>\n<li><strong>Feed and Account</strong> Screens stand by their own so we just need to add them to the Bottom Tab Navigator</li>\n</ol>\n<h5><span id=\"quick-tip-how-to-customize-the-screen-header\">Quick Tip: How to customize the screen header</span></h5>\n<p>You <strong>HAVE</strong> to transform your screen into a stack screen by itself to customize the screen header.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;HomeTab.Screen</span><br><span class=\"line\">  name=<span class=\"string\">\"Feed\"</span></span><br><span class=\"line\">  component=&#123;FeedCreateStackScreen&#125;</span><br><span class=\"line\">  options=&#123;&#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"Feed\"</span></span><br><span class=\"line\">  &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>Here I created the FeedCreateStackScreen for my Feed Screen to be able to customize my screen title.</p>\n<h4><span id=\"building-welcome-and-loginsignup-screen\">Building Welcome and Login/Signup Screen</span></h4>\n<p>Here is a look of the Login/Signup Screen:</p>\n<img src=\"/Dashboard-App/signup.png\">\n<p><strong>Notice</strong><br>\nThese screens have basic functions to authenticate. I have already written a post about authenticating using JWT token <a href=\"here\">“http://localhost:4000/MessengerClone/”</a>. However, we need to make sure that will use <strong>SafeAreaView and ScrollView</strong> to make it scrollable when the keyboard is opened (so that the keyboard doesnt cover the inputs)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SafeAreaView style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">    &lt;View&gt;</span><br><span class=\"line\">        &lt;ScrollView</span><br><span class=\"line\">            showsVerticalScrollIndicator=&#123;<span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<h4><span id=\"building-account-screen\">Building Account Screen</span></h4>\n<p>This is where the users can customize their profile. This screen has some basic features like changing avatar and viewing the personal information.</p>\n<p>Here it gets to a point where you will need to ask the users for <strong>permission</strong> to access their photos and cameras. This is the first permission we will need and luckily, we have <strong>expo-image-picker</strong> and <strong>expo-camera</strong> to help us. Below is how we usually request for permission to access the <strong>media library</strong> (photos) from the user in Expo.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  (<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Platform.OS !== <span class=\"string\">'web'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; status &#125; = <span class=\"keyword\">await</span> ImagePicker.requestMediaLibraryPermissionsAsync();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (status !== <span class=\"string\">'granted'</span>) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'Sorry, we need camera roll permissions to make this work!'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)();</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n<p><strong>Notes</strong> we should set the quality to 0.1 or lower to reduce the loading time for our app. We should also set the <strong>base64</strong> equal to true to <strong>store</strong> the image later</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pickImage = <span class=\"keyword\">async</span> () =&gt; &#123;    </span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> ImagePicker.launchImageLibraryAsync(&#123;</span><br><span class=\"line\">    mediaTypes: ImagePicker.MediaTypeOptions.All,</span><br><span class=\"line\">    allowsEditing: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    aspect: [<span class=\"number\">4</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">    quality: <span class=\"number\">0.1</span>,</span><br><span class=\"line\">    base64: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result.cancelled) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>There are many ways to store your images but I choose to use <strong>Cloudinary</strong> because their free package is really nice. What Cloudinary does is that it will create an image based on your <strong>base64</strong> link and <strong>upload</strong> that to their storage. After that, you can save your <strong>profile image link</strong> to your database and get it down whenever you want.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> base64Img = <span class=\"string\">`data:image/jpg;base64,<span class=\"subst\">$&#123;result.base64&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"file\"</span>: base64Img,</span><br><span class=\"line\">  <span class=\"string\">\"upload_preset\"</span>: <span class=\"string\">\"iqtz1hm2\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">await</span> fetch(CLOUDINARY_URL, &#123;</span><br><span class=\"line\">  body: <span class=\"built_in\">JSON</span>.stringify(data),</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<img src=\"/Dashboard-App/8.avatar.png\">\n<h2><span id=\"explaining-the-core-feature-location-tracking\">Explaining the core feature: Location Tracking</span></h2>\n<p>This is probably the most important feature of the app. Location Tracking is pretty complicated and I will break it down for you in some parts</p>\n<ol>\n<li>Updating time continuously</li>\n<li>Create a Track reducer to handle recording new tracks</li>\n<li>Foreground Location</li>\n<li>Background Location</li>\n<li>Displaying it on a Map</li>\n<li>Customize a Track after saving</li>\n<li>Posting it to Feed</li>\n</ol>\n<h3><span id=\"updating-time-continuously\">Updating time continuously</span></h3>\n<p>This is probably the easiest part. As you can see in most tracking app, there is a clock running <strong>continuously</strong>. I did this by having 3 <strong>states</strong>: hour, minute and second. When we start recording, we will increase second by 1 (every second) by using a <strong>setInterval</strong> function along with a <strong>useEffect</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> interval = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setSecond(second + <span class=\"number\">1</span>), <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<p>Then, if the second state is &gt;= 60, it will be <strong>resetted</strong> to 0 and the minute state will be increased by 1. Similarly, if the minute state is &gt;= 60, it will be <strong>resetted</strong> to 0 and the hour state will be increased by 1.</p>\n<h3><span id=\"create-a-location-context-to-handle-recording-new-tracks\">Create a Location context to handle recording new tracks</span></h3>\n<p>This is where we handle all the functions that are related to handling recodring the Locations. This can include <strong>startRecording, stopRecording, and addLocation</strong>. These are 3 things that are most important to the app. Everytime the user clicks Record, we will change the state to startRecording. Similarly, if they click Cancel, we will cancel recording.</p>\n<p><strong>Important Notes</strong> When we are recording locations, we will add a new location (this is a combination of longitude, latitude, currentSpeed, accuracy level, …) every second to our state using the <strong>addLocation</strong> function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addLocation = <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">location, isRecording, speedLst</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        dispatch(&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"add_current_location\"</span>, <span class=\"attr\">payload</span>: location&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isRecording)&#123;</span><br><span class=\"line\">        dispatch(&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"add_location\"</span>, <span class=\"attr\">payload</span>: location&#125;)</span><br><span class=\"line\">        dispatch(&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"add_speed\"</span>, <span class=\"attr\">payload</span>: location.coords.speed * <span class=\"number\">3.6</span>&#125;)</span><br><span class=\"line\">        dispatch(&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"add_current_speed\"</span>, <span class=\"attr\">payload</span>: location.coords.speed * <span class=\"number\">3.6</span>&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This is how the recording look like:</p>\n<img src=\"/Dashboard-App/3.record.png\">\n<h3><span id=\"foreground-location\">Foreground Location</span></h3>\n<p>Foreground location means that recording the location while <strong>your phone is opened and you are opening the app</strong>. This might not be too useful for an app that tracks your location while you are training because when you are cycling or running, you might <strong>lock</strong> your phone or <strong>turn it off</strong>. However, we will still have to include this.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> startWatching = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; granted &#125; = <span class=\"keyword\">await</span> requestPermissionsAsync();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!granted) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Location permission not granted'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        subscriber = <span class=\"keyword\">await</span> watchPositionAsync(</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                accuracy: Accuracy.BestForNavigation,</span><br><span class=\"line\">                timeInterval: <span class=\"number\">3000</span>,</span><br><span class=\"line\">                distanceInterval: <span class=\"number\">30</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            callback</span><br><span class=\"line\">        );</span><br></pre></td></tr></table></figure>\n<p>Here we will use a function that was given to us by the expo library. This is the <strong>watchPositionAsync</strong>. It will basically record your location every 3 seconds or you have travelled 30 meters. Therefore, the recording might be a bit <strong>inaccurate</strong> when you barely moved or sit still. Make sure that you must <strong>ASK FOR THE USER PERMISSION</strong> to use Foreground location</p>\n<h3><span id=\"background-location\">Background Location</span></h3>\n<p>Background location means that recording the location while <strong>your phone is not opened or your screen is locked</strong>. This is the most complicated part of this app and it took me days to set up. This is because both IOS and Android have very strict protocols for asking background locations.</p>\n<p>When we are using background location, we will need to <strong>ASK FOR USER PERMISSION</strong> again but this time when you switch the app to the background it will prompt something like either <strong>allow using location while using the app</strong> or <strong>always allow using location</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> startLocationTracking = React.useCallback(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> Permissions.askAsync(Permissions.LOCATION);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.status !== <span class=\"string\">'granted'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Permission to access location was denied'</span>);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">await</span> Location.startLocationUpdatesAsync(LOCATION_TRACKING, &#123;</span><br><span class=\"line\">    accuracy: Location.Accuracy.BestForNavigation,</span><br><span class=\"line\">    timeInterval: <span class=\"number\">3000</span>, <span class=\"comment\">//update every second</span></span><br><span class=\"line\">    distanceInterval: <span class=\"number\">50</span>, <span class=\"comment\">//update every 10 meters,</span></span><br><span class=\"line\">    foregroundService: &#123;</span><br><span class=\"line\">      notificationTitle: <span class=\"string\">'Using your location'</span>,</span><br><span class=\"line\">      notificationBody: <span class=\"string\">'To turn off, go back to the app and switch something off.'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pausesUpdatesAutomatically: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>For the background location, we will use the <strong>startLocationUpdatesAsync</strong> from expo library. This will track the location every 3 seconds or you have travelled 50 meters.</p>\n<p><strong>Notes 1</strong>: For Android, you will need to have a <strong>modal</strong> or a <strong>pop-up</strong> to explain why you want to use the users’ background location<br>\n<strong>Notes 2</strong>: For Android, your app will need to have permission from Google Review to be able to see the background location functions<br>\n<strong>Notes 3</strong>: For IOS, the pop up to ask for background location will be quite slow so in the first few tries it might not be up.</p>\n<p>There will be a lot more <strong>notes and tricks</strong> on background location in the parts later when we try to <strong>deploy</strong> it to App Store and Google Play Store</p>\n<h3><span id=\"displaying-it-on-a-map\">Displaying it on a Map</span></h3>\n<p>This is quite easy since we can take advantage of the react native maps. We can use the MapView component to display a map in both IOS maps and Google maps.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;MapView</span><br><span class=\"line\">  style=&#123;&#123; <span class=\"attr\">height</span>: isRecording ? <span class=\"string\">\"50%\"</span> : <span class=\"string\">\"80%\"</span>, <span class=\"attr\">flex</span>: <span class=\"number\">1</span> &#125;&#125;</span><br><span class=\"line\">  region=&#123;currentLocation &amp;&amp; &#123;</span><br><span class=\"line\">    ...currentLocation.coords,</span><br><span class=\"line\">    latitudeDelta: <span class=\"number\">0.005</span>,</span><br><span class=\"line\">    longitudeDelta: <span class=\"number\">0.005</span>,</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">  showsUserLocation=&#123;<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">  followsUserLocation=&#123;followsUserLocation&#125;</span><br></pre></td></tr></table></figure>\n<p>Then we will use a <strong>Polyline Component</strong> also from react native maps to display our tracks on the screen. The locations variable here is our <strong>locations</strong> state. This is an array of small <strong>Location</strong> objects (with latitude, longitude, accuracy, …) which I have explained above.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;PolylineComponent locations=&#123;locations&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<p>This is the screen where we are drawing the tracks on the map.</p>\n<img src=\"/Dashboard-App/3.record.png\">\n<h3><span id=\"pin-a-location\">Pin a location</span></h3>\n<p>This is the <strong>innovative</strong> part of the app when compare to other apps. When we travelled to a new place, you can pin the current location and the app will display immediately the current address to the screen. This uses <strong>Google Maps API</strong> to get the most accurate current address.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reverseGeocodeAPI = <span class=\"keyword\">async</span> (latlng) =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">`<span class=\"subst\">$&#123;BASE_URL&#125;</span>?latlng=<span class=\"subst\">$&#123;latlng&#125;</span>&amp;key=<span class=\"subst\">$&#123;API_KEY&#125;</span>`</span>)</span><br><span class=\"line\"><span class=\"keyword\">return</span> res.data.results[<span class=\"number\">0</span>].formatted_address</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Specifically, we use the <strong>reverseGeocode</strong> API to achieve this functionality. In order to set up and use Google Maps API, you will first need a <strong>Google API key</strong>.</p>\n<ol>\n<li>Go to Google Cloud Console and create 2 new API keys at the Credentials page: 1 for IOS and 1 for Android</li>\n</ol>\n<img src=\"/Dashboard-App/apikey.png\">\n<ol start=\"2\">\n<li>Restrict 1 key to Android App and the other to IOS app</li>\n</ol>\n<img src=\"/Dashboard-App/restrictkey.png\">\n<ol start=\"3\">\n<li>Enable the Google Maps SDK for both IOS and Android in the market page</li>\n</ol>\n<img src=\"/Dashboard-App/market.png\">\n<p>Now you have successfully set up the API keys and are ready to call the Google APIs</p>\n<h3><span id=\"customize-a-track-after-saving\">Customize a Track after saving</span></h3>\n<p>This is basically adding some information for the track before saving it, you can add name, type, descriptions and an <strong>image</strong> of your track. In order to upload image here, we once again need to <strong>ask for the users permission</strong> to access the media library and have to upload to <strong>Cloudinary</strong></p>\n<p><strong>Notice</strong>: because there will be a lot of inputs in this screen and you dont want the keyboard to <strong>cover</strong> your inputs, make sure to use <strong>KeyboardAvoidingView</strong> for IOS:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;Platform.OS === <span class=\"string\">\"ios\"</span> ? (</span><br><span class=\"line\">  &lt;KeyboardAvoidingView style=&#123;&#123; <span class=\"attr\">flex</span>: <span class=\"number\">1</span> &#125;&#125; behavior=<span class=\"string\">\"padding\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>And do this for Android:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;KeyboardAvoidingView keyboardVerticalOffset=&#123;<span class=\"number\">-1000</span>&#125; style=&#123;&#123; <span class=\"attr\">flex</span>: <span class=\"number\">1</span> &#125;&#125;&gt;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"posting-it-to-feed\">Posting it to Feed</span></h3>\n<p>The Feed screen is basically a <strong>social media screen</strong> where it will list out all the current posts and each post will have avatar, name, descriptions, image and <strong>like, comment and share</strong> sections like a normal Facebook post.</p>\n<p>This can be done by getting all the posts from the database and display it to the screen</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  fetchPosts()</span><br><span class=\"line\">&#125;, [isFocused])</span><br><span class=\"line\"></span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (state) &#123;</span><br><span class=\"line\">    setSortedState(state.slice().sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> b.createdAt - a.createdAt))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, [state])</span><br></pre></td></tr></table></figure>\n<p>What I do in the second useEffect is that I sort the post in the order that <strong>newest</strong> posts are on top. I will explain more about the schema of each post and comment and like cause it will be quite <strong>complicated</strong></p>\n<h2><span id=\"backend\">Backend</span></h2>\n<h3><span id=\"setting-up-express-and-some-libraries\">Setting up Express and some libraries</span></h3>\n<p>In Express, we used some standard libraries such as express, bodyParser and mongoose (for handle MongoDB). To connect to MongoDB, I have already written a blog <a href=\"here\">“http://localhost:4000/Doctorally/”</a>. You guys can check it out.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">\"body-parser\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>Notice that</strong>, we use this config to extend our request data size:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.urlencoded(&#123;</span><br><span class=\"line\">    limit: <span class=\"string\">'50mb'</span>,</span><br><span class=\"line\">    parameterLimit: <span class=\"number\">100000</span>,</span><br><span class=\"line\">    extended: <span class=\"literal\">true</span> </span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<h3><span id=\"explaining-the-routes\">Explaining the routes</span></h3>\n<p>There are 3 types of routes:</p>\n<ol>\n<li><strong>Authentication</strong> Routes. This is the authentication router using JWT Token. It is really common and I will not mention it in details here</li>\n<li><strong>Track</strong> Routes. These are the routers that you will use to save your track details to MongoDB</li>\n</ol>\n<p>This is an example of how to use the track routes to find <strong>all</strong> tracks of a user</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">\"/tracks\"</span>, requireAuth, <span class=\"keyword\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tracks = <span class=\"keyword\">await</span> Track.find(&#123;<span class=\"attr\">userId</span>: req.user._id&#125;)</span><br><span class=\"line\">    res.send(tracks)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><strong>Posts</strong> Routes. These are the routers to control the posts that are posted to the Feed. Below is an example of how to get a post with a <strong>specified id</strong>:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">\"/posts/:id\"</span>, requireAuth, <span class=\"keyword\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = req.params.id</span><br><span class=\"line\">    <span class=\"keyword\">const</span> query = &#123;<span class=\"attr\">_id</span>: id&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> post = <span class=\"keyword\">await</span> Post.findOne(query)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        res.send(post)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.status(<span class=\"number\">422</span>).send(&#123;<span class=\"attr\">error</span>: err.message&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3><span id=\"explaining-mongodb-schema\">Explaining MongoDB Schema</span></h3>\n<p>In this part, I will explain in detail the schemas of each type of routes.</p>\n<h4><span id=\"the-user-schema\">The user schema:</span></h4>\n<p>The user schema consists of <strong>information</strong> like: email, password (encrypted), firstName, lastName, age, gender, image (link to avatar image)</p>\n<p><strong>Note 1</strong>: we can set the image (avatar link) of a default image before the users change their avatar<br>\n<strong>Note 2</strong>: In the user model, we will add a method to help comparePassword so that when we login, the password will be compared with the <strong>encrypted</strong> password saved in the database</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userSchema.methods.comparePassword = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">candidatePassword</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    bcrypt.compare(candidatePassword, user.password, (err, isMatch) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject(err);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isMatch) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject(<span class=\"literal\">false</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      resolve(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"the-track-schema\">The Track Schema</span></h4>\n<p>Here we need to understand the detailed information of each location that we saved. Each location we saved will be a <strong>POINT</strong> schema with information like current latitude, longitude, altitude, accuracy, …</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pointSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    timestamp: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    coords:&#123;</span><br><span class=\"line\">        latitude: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">        longitude: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">        altitude: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">        accuracy: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">        heading: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">        speed: <span class=\"built_in\">Number</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Therefore, each track will be an <strong>list</strong> of consecutive <strong>points</strong> so a track schema will look like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> trackSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    userId:&#123;</span><br><span class=\"line\">        type: mongoose.Schema.Types.ObjectId, </span><br><span class=\"line\">        ref: <span class=\"string\">'User'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    locations: [pointSchema],</span><br></pre></td></tr></table></figure>\n<p>Notice that we will also need a <strong>userId</strong> in each track. This will be a <strong>reference</strong> to the user table. This will help us keep track of whose track is this.</p>\n<h3><span id=\"the-post-schema\">The Post Schema</span></h3>\n<p>Each post will contain likes, comments, and a map of the track we saved. Therefore, we need <strong>userId</strong> as a reference of the user table to know whose post is this. We also need <strong>trackId</strong> as a reference of the track table to know what track is this. Lastly, we need the <strong>likes</strong> and <strong>comments</strong> schema to be lists of likeSchemas and commentSchemas.</p>\n<p>These are the likeSchema and commentSchema</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> commentSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    userId:&#123;</span><br><span class=\"line\">        type: mongoose.Schema.Types.ObjectId,</span><br><span class=\"line\">        ref: <span class=\"string\">'User'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    username: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    text: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    avatar: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> likeSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    userId:&#123;</span><br><span class=\"line\">        type: mongoose.Schema.Types.ObjectId, </span><br><span class=\"line\">        ref: <span class=\"string\">'User'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    username:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">    avatar: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> postSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    userId:&#123;</span><br><span class=\"line\">        type: mongoose.Schema.Types.ObjectId, </span><br><span class=\"line\">        ref: <span class=\"string\">'User'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    trackId:&#123;</span><br><span class=\"line\">        type: mongoose.Schema.Types.ObjectId, </span><br><span class=\"line\">        ref: <span class=\"string\">'Track'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    likes: &#123;</span><br><span class=\"line\">        type: [likeSchema],</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: []</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    comments: &#123;</span><br><span class=\"line\">        type: [commentSchema],</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: []</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<p>This is basically how we create the <strong>postSchema</strong>.</p>\n<h3><span id=\"host-server-on-google-app-engine\">Host server on Google App Engine</span></h3>\n<p>In order to run your server on all machines, we need to host our server somewhere but I chose <strong>Google App Engine</strong>. You can use whatever service you like. Here is the quick recap of the steps that is in [“<a href=\"https://cloud.google.com/appengine/docs/standard/nodejs/quickstart\" target=\"_blank\" rel=\"noopener\">https://cloud.google.com/appengine/docs/standard/nodejs/quickstart</a>”](this official tutorial)</p>\n<ol>\n<li>Create an app on Google Cloud Console</li>\n</ol>\n<img src=\"/Dashboard-App/newapp.png\">\n<ol start=\"2\">\n<li>Register for the Google App Engine service to that app. Make sure to choose the region that is close to you</li>\n</ol>\n<img src=\"/Dashboard-App/newapp2.png\">\n<ol start=\"3\">\n<li>\n<p>Make sure that billing is enabled for your Cloud project (just use the trial version)</p>\n</li>\n<li>\n<p>Enable Cloud build API in the Market</p>\n</li>\n</ol>\n<img src=\"/Dashboard-App/newapp3.png\">\n<ol start=\"5\">\n<li><strong>IMPORTANT</strong>: In your server folder, go to package.json and change the <strong>“main” key</strong> to “server.js”. This is because google app engine only takes server.js as the main file.</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"track-server\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"server.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"@expo/ngrok\"</span>: <span class=\"string\">\"^2.4.3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"aws-sdk\"</span>: <span class=\"string\">\"^2.905.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"bcrypt\"</span>: <span class=\"string\">\"^5.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"body-parser\"</span>: <span class=\"string\">\"^1.19.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"express\"</span>: <span class=\"string\">\"^4.17.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"jsonwebtoken\"</span>: <span class=\"string\">\"^8.5.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mongoose\"</span>: <span class=\"string\">\"^5.11.16\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"multer\"</span>: <span class=\"string\">\"^1.4.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"nodemon\"</span>: <span class=\"string\">\"^2.0.7\"</span></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>\n<p>Change the name of your main file (in the directory) from <strong>index.js -&gt; server.js</strong>. Make sure to change all imports if necessary.</p>\n</li>\n<li>\n<p>Run gcloud app deploy and click yes if prompted</p>\n</li>\n<li>\n<p>After finished uploading, you are done. You can always check the logs if there is any error on the google cloud console -&gt; Logs</p>\n</li>\n</ol>\n<img src=\"/Dashboard-App/newapp4.png\">\n<h2><span id=\"testing-and-deploying-to-app-store-and-google-play-store\">Testing and Deploying to App Store and Google Play Store</span></h2>\n<p>This is the most exhausting and frustrating part but you have to go through this the first time. It actually took me <strong>more time</strong> to deploy to 2 stores than doing code.</p>\n<h3><span id=\"deploying-an-expo-app-to-app-store\">Deploying an Expo App to App Store</span></h3>\n<p>I will walk you through the very <strong>detailed</strong> steps from beginning to seeing your app on <strong>App Store</strong></p>\n<ol>\n<li>Setting up app.json file</li>\n<li>Testing your app on Simulator and Custom Expo Go</li>\n<li>Build the app for IOS using the archive</li>\n<li>Register for Apple Development Program through Apple Developer App</li>\n<li>Create an app on App Store Connect</li>\n<li>Prepare screenshots and video records of your Application</li>\n<li>Test your app on TestFlight</li>\n<li>Submit your app for review and wait for approval</li>\n</ol>\n<h4><span id=\"setting-up-appjson-file\">Setting up app.json file</span></h4>\n<p><strong>Versions and Build Number</strong>: This is the file that all expo projects have. You will need to handle <strong>versioning</strong> and <strong>buildNumber</strong>. These seem difficult at first but it is actually really easy. Everytime you make changes and create a new build, you will increment your <strong>build number</strong> like from 1.1.5 -&gt; 1.1.6. And everytime, you have a huge change or you want to update a version that is on the App Store already, you will need to <strong>increase the version</strong> like from 1.1.0 -&gt; 1.2.0</p>\n<p><strong>Icon Image</strong> Here, you can set up your splash screen image (loading screen) or your customized icon.</p>\n<p><strong>ios file</strong>. This is the most important file for IOS App as you can see from the name. In here, you will need to add the <strong>PERMISSIONS YOU ASK FROM THE USERS</strong> in the <strong>infoPlist</strong> key. Since my app is using background location, foreground location, media library and camera, all of these <strong>configurations</strong> are required:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"infoPlist\": &#123;</span><br><span class=\"line\">  \"NSCameraUsageDescription\": \"Allow Dashboard to ...\",</span><br><span class=\"line\">  \"NSLocationWhenInUseUsageDescription\": \"Allow Dashboard to ...\", </span><br><span class=\"line\">  \"NSLocationAlwaysUsageDescription\": \"Allow Dashboard to ...\",</span><br><span class=\"line\">  \"NSLocationAlwaysAndWhenInUseUsageDescription\": \"Allow Dashboard to ...\",</span><br><span class=\"line\">  \"NSPhotoLibraryUsageDescription\": \"Give Dashboard permission to ...\",</span><br><span class=\"line\">  \"UIBackgroundModes\": [</span><br><span class=\"line\">    \"location\",</span><br><span class=\"line\">    <span class=\"string\">\"fetch\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>In the string value, you must provide a <strong>detailed</strong> description of how you want to use the features you ask from the users. For example, “Allow Dashboard to access media library to upload avatar images”. You should also add a config of your API key like this if you are using Google Maps.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"config\":&#123;</span><br><span class=\"line\">\"googleMapsApiKey\": \"your api key\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"testing-your-app-on-simulator-and-custom-expo-go\">Testing your app on Simulator and Custom Expo Go</span></h4>\n<p>Usually when builing your app, you would have already tested with some kind of simulators. To test an IOS App, it would be best to use <strong>Xcode Simulator</strong>. You can open Xcode and open the <strong>simulator</strong> from choose from navigation bar Window -&gt; Devices and Simulator. Remember that you can choose any type of Iphone you want to simulate. You will need multiple Iphones for taking the screenshots later.</p>\n<p>Another way to more accurately test it with Iphone is using the Custom Expo Go. You should consider following the instructions <a href=\"here\">“https://docs.expo.io/guides/adhoc-builds/”</a></p>\n<h4><span id=\"build-the-app-for-ios-using-the-archive\">Build the app for IOS using the archive</span></h4>\n<p>You need to build the iOS bundle that actually packages the code of your app. This is then deployed somewhere on the Expo servers. In order to do this run the code below. Detailed Instructions are at <a href=\"here\">“https://docs.expo.io/distribution/building-standalone-apps/”</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expo build:ios -t archive</span><br></pre></td></tr></table></figure>\n<p>This will initiate the build and you will wait for Expo to build your code to an ios package. When it is done, it will give you a link where you can download your an <strong>.ipa</strong> file then encompasses your code. <strong>KEEP THIS .IPA FILE</strong> this is basically your whole app.</p>\n<h4><span id=\"register-for-apple-development-program-through-apple-developer-app\">Register for Apple Development Program through Apple Developer App</span></h4>\n<p>You will need to sign up for the Apple Developer Program:</p>\n<ol>\n<li>Go to <a href=\"https://developer.apple.com/programs/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/programs/</a> and sign in with your Apple ID</li>\n<li>Click on Enroll</li>\n<li>Fill out the information and pay the $99 fee</li>\n<li>Wait for 1-2 days for your order to be processed</li>\n</ol>\n<p>or you can download the Apple Developer app from App Store to your <strong>PHONE</strong>. And register for the Apple Developer Program from the Account Tab. <strong>Notice</strong> that the $99 will be deducted from your current logged in <strong>Apple ID</strong></p>\n<h4><span id=\"create-an-app-on-app-store-connect\">Create an app on App Store Connect</span></h4>\n<p>Go to <a href=\"https://appstoreconnect.apple.com\" target=\"_blank\" rel=\"noopener\">https://appstoreconnect.apple.com</a> after you have successfully signed up for the Apple Developer Program and sign in to your Apple ID</p>\n<p>Create a new app like in here:</p>\n<img src=\"/Dashboard-App/newapple.png\">\n<p><strong>Notice</strong>: THERE WILL BE AN ERROR HERE in the <strong>bundle id</strong>. The bundle id will be generated by the name and you will take that bundle ID and copy it into your app.json bundleId in IOS. However, it will not be activated right away you will get back into appstoreconnect and select from the dropdown and you will see your bundleId generated</p>\n<h4><span id=\"prepare-screenshots-and-video-records-of-your-application\">Prepare screenshots and video records of your Application</span></h4>\n<p>Preparing <strong>screenshots</strong> of your Application in 6.5 inch phones (1242 × 2688px) and 5.5 inch phones (1242 x 2208px). It would be best to use the Simulator and take the <strong>video recordings</strong> and screenshots from their. You will also need screenshots of your app in tablets 2nd and 3rd generations as well but it is okay if you use the 4th or the 5th generation in your Simulator</p>\n<h4><span id=\"test-your-app-on-testflight\">Test your app on TestFlight</span></h4>\n<p>Download the app Transporter from App Store to your Mac. Link <a href=\"here\">“https://apps.apple.com/us/app/transporter/id1450874784?mt=12”</a></p>\n<p>Remember the <strong>.ipa</strong> file that I told you to save. This <strong>.ipa</strong> file is really important. You can now drop the .ipa file into your transporter app and it will upload automatically to TestFlight on App Store Connect. <strong>REMEMBER</strong>, you will need a different build version for each upload. You <strong>CANNOT</strong> have 2 builds that have the same versions and the same build number.</p>\n<p>You can see the details in these 2 pictures below:</p>\n<img src=\"/Dashboard-App/newapple2.png\">\n<img src=\"/Dashboard-App/newapple3.png\">\n<h4><span id=\"submit-your-app-for-review-and-wait-for-approval\">Submit your app for review and wait for approval</span></h4>\n<p>When you have finished all the steps above, your app is ready to submit for review. It will take from 24-48 hours to complete. <strong>Notice</strong> that Apple will extensively check and test out your app. Therefore, you should make sure that your app follows these rules so that it will not be rejected by Apple. The link is <a href=\"%22https://developer.apple.com/app-store/review/%22\">here</a></p>\n<h3><span id=\"deploying-an-expo-app-to-google-play-store\">Deploying an Expo App to Google Play Store</span></h3>\n<ol>\n<li>Setting up app.json file</li>\n<li>Testing your app on Android Emulator</li>\n<li>Build the .apk or .aab file for Android</li>\n<li>Register for Google Play Developer</li>\n<li>Create an app on Google Play</li>\n<li>Prepare screenshots and images of your Application</li>\n<li>Push your app through the testing stages and wait for review</li>\n</ol>\n<h4><span id=\"setting-up-appjson-file\">Setting up app.json file</span></h4>\n<p>The app.json file is quite similar to ios. You will control your version like the build number from IOS using the <strong>versionCode</strong>. <strong>YOU HAVE TO SET YOUR API KEY</strong> if you are using google maps:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"config\":&#123;</span><br><span class=\"line\">  \"googleMaps\":&#123;</span><br><span class=\"line\">    \"apiKey\": \"your api key\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>android file</strong>. This is the most important file for Android App. In here, you will need to add the <strong>PERMISSIONS YOU ASK FROM THE USERS</strong> in the <strong>permissions</strong> key. Since my app is using background location, foreground location, media library and camera, all of these <strong>configurations</strong> are required. More info on setting up the file can be found <a href=\"%22https://docs.expo.io/versions/v41.0.0/config/app/#apikey-2%22\">here</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"permissions\": [</span><br><span class=\"line\">  \"CAMERA\",</span><br><span class=\"line\">  \"ACCESS_COARSE_LOCATION\",</span><br><span class=\"line\">  \"ACCESS_FINE_LOCATION\",</span><br><span class=\"line\">  \"READ_EXTERNAL_STORAGE\",</span><br><span class=\"line\">  \"WRITE_EXTERNAL_STORAGE\",</span><br><span class=\"line\">  \"ACCESS_BACKGROUND_LOCATION\",</span><br><span class=\"line\">  <span class=\"string\">\"FOREGROUND_SERVICE\"</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h4><span id=\"testing-your-app-on-android-emulator\">Testing your app on Android Emulator</span></h4>\n<p>You should download the Android Studio (link: “<a href=\"https://developer.android.com/studio\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/studio</a>”) and use the <strong>Android Emulator</strong> in the AVD Manager. If you are using a Mac M1, you should consider using the Preview version 3 of the Android Emulator <a href=\"%22https://github.com/741g/android-emulator-m1-preview/releases%22\">here</a></p>\n<p>You can also use an Android Phone and Download <strong>Expo Go</strong>. Then you can test your app like you did in the building stage</p>\n<h4><span id=\"register-for-google-play-developer\">Register for Google Play Developer</span></h4>\n<ol>\n<li>Go to <a href=\"https://play.google.com/console\" target=\"_blank\" rel=\"noopener\">https://play.google.com/console</a></li>\n<li>Register for the Google Play Developer using a Google Account</li>\n<li>Pay the $25 fee for the Program</li>\n<li>Upload your National Citizen ID to help Google verify</li>\n</ol>\n<h4><span id=\"build-the-apk-or-aab-file-for-android\">Build the .apk or .aab file for Android</span></h4>\n<p>After that, you can start the Expo build just like for IOS. When building for android you can choose to build APK (<strong>expo build:android -t apk</strong>) or Android App Bundle (<strong>expo build:android -t app-bundle</strong>). It is recommended that you use the App Bundle command. <strong>KEEP THIS .APK OR .AAB file</strong></p>\n<p>Then, go to your Google Play Console at <a href=\"https://play.google.com/console\" target=\"_blank\" rel=\"noopener\">https://play.google.com/console</a>. Create a new app with the same <strong>bundle id</strong> as your ios app.</p>\n<h4><span id=\"testing-in-google-play-console\">Testing in Google Play Console</span></h4>\n<p>There are some <strong>stages</strong> of testing in Google Play Console that you might find trouble understanding. You dont need to go through all the stages of testing even though you are recommended</p>\n<p>There are 6 stages (as I understand): Pre-registration -&gt; Internal Testing -&gt; Closed Testing -&gt; Open Testing -&gt; Production -&gt; Release.</p>\n<p>What you can do to test is that you will <strong>DROP or UPLOAD</strong> your .aab or .apk<br>\nfile that was generated before into the Google Play Console. This will create a release of your app. You can <strong>PROMOTE</strong> your release in the order of the 6 stages above. For example, you can <strong>promote</strong> internal testing to open testing<br>\nUsually, I would just do Closed Testing and then Production.</p>\n<ol>\n<li>Pre-registration: Check your app to see which devices it is suitable</li>\n<li>Internal and Closed Testing: Add some testers by email and send them a link to test out your app.</li>\n</ol>\n<img src=\"/Dashboard-App/google.png\">\n<ol start=\"3\">\n<li>Open Testing: Your app is basically up in the store for users from the countries you selected to join in and test</li>\n<li>Production and Release: Final stages before your app is reviewed and released</li>\n</ol>\n<h4><span id=\"prepare-screenshots-and-images-of-your-application\">Prepare screenshots and images of your Application</span></h4>\n<p>You will need screenshots from an android device. You can just take the screenshots from your Emulator. You will also need a background image for your app. The size is specified on the Google Play Console</p>\n<h4><span id=\"push-your-app-through-the-testing-stages-and-wait-for-review\">Push your app through the testing stages and wait for review</span></h4>\n<p><strong>YOUR APP SETTINGS</strong>: can always be found in the <strong>Main Store Listing</strong> in the left tab of your Dashboard</p>\n<img src=\"/Dashboard-App/google2.png\">\n<p><strong>COMPLETE YOUR APP CONTENT PAGE</strong>: this page is super important because it has many policies related to ads, privacy policy and etc… This can be found here:</p>\n<img src=\"/Dashboard-App/google3.png\">\n<p>Your app will be reviewed by the Google Team and will be published in 2-3 days.</p>\n<h2><span id=\"thank-you-for-reading-this-post-i-hope-this-post-provided-you-with-some-insights-on-how-to-build-and-deploy-a-mobile-application-see-you-guys-again-in-the-next-post\">Thank you for reading this post. I hope this post provided you with some insights on how to build and deploy a mobile application. See you guys again in the next post !</span></h2>\n","site":{"data":{}},"excerpt":"","more":"<p>It has been a while since I have written everything. I have some new projects since the winter and I will try to introduce to you guys some of the newest projects I have been working on since the spring semester.</p>\n<p>Right after the finals are over, I have the time to create my first mobile application called <strong>Dashboard: Track your training</strong> (Link <a href=\"here\">“https://linktr.ee/quangnguyen14”</a>) and upload it to Appstore and Google Play. It was quite a challenging time and I wanted to share to you some basics on how to do it and some lessons I learned from deploying my application.</p>\n<p>Here are the <strong>big parts</strong> that will be covered in this post. Notice that I will try not to go into too much details in this post because it will be super long. Instead, I will walk you through the tips, tricks and lessons I learned by a hard way when I was doing my app. If you want to take a look at the source code, feel free to see it <a href=\"here\">“https://github.com/QuangNg14/Dashboard-App”</a></p>\n<ol>\n<li>Introductions</li>\n<li>Frontend</li>\n<li>Explaining the core feature: Location Tracking</li>\n<li>Backend</li>\n<li>Deploying to Appstore and Google Play Store</li>\n</ol>\n<h2>Introductions</h2>\n<h3>Introductions of the app</h3>\n<p><strong>Explaining the name</strong> Dashboard = Dash + board. This name comprises of 2 of the main features of the app. You can <strong>track</strong> your training routes, <strong>pin</strong> your favorite locations and share your selfies to a board (or your <strong>Feed</strong>). It is a free sports management app with a friendly UI design that accurately records your training routes while helping you pin locations at ease and share your achievements with the DASHBOARD network.</p>\n<h3>What technologies did I use?</h3>\n<ol>\n<li>\n<p><strong>Expo React Native</strong>. The front end of the app is built based on Expo React Native. It is really convenient and handy in handling the libraries. However, 1 downside is that we cannot control the native files and rely entirely on expo</p>\n</li>\n<li>\n<p><strong>Google Map API</strong>. One of the location features used Google Map API</p>\n</li>\n<li>\n<p><strong>Expo Location</strong>. This is the main library used for building the location tracking function</p>\n</li>\n<li>\n<p><strong>Cloudinary</strong>. This is used to store images uploaded to the app</p>\n</li>\n<li>\n<p><strong>MongoDB and Express</strong>. This is the combo for backend that I usually use to build fullstack apps</p>\n</li>\n<li>\n<p><strong>Google App engine</strong>. This is where I host my server</p>\n</li>\n</ol>\n<h2>Frontend</h2>\n<p>Now we will be entering the main part <strong>building</strong> the actual app. Here are the components of our app. I will split into 2 parts: <strong>the Side Screens</strong> and the <strong>core feature</strong> Location Tracking</p>\n<h3>Side Screens</h3>\n<ol>\n<li>Explaining Navigation v5 of React Native</li>\n<li>Building Welcome and Authentication Screens</li>\n<li>Building Account Screen</li>\n</ol>\n<h4>Explaining Navigation v5 of React Native</h4>\n<p>The core of every app is navigation. In the newest version of react navigation v5, there has been a lot of changes to the navigation. Below is the map of our navigation. As you can see, we start from the <strong>welcome screen</strong> and the <strong>login/signup screen</strong> if we are not authenticated. The login and signup screen will be a <strong>stack navigator</strong> to move back and forth.</p>\n<p>We will do a quick check to see if the user is authenticated. If they are not, they will be in the login, signup screen. If they are, they will be navigated to the <strong>Main screen</strong>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;authState.userToken != <span class=\"literal\">null</span> ? (</span><br><span class=\"line\">    <span class=\"comment\">// &lt;HomeTabScreen/&gt;</span></span><br><span class=\"line\">        &lt;Drawer.Navigator</span><br><span class=\"line\">            initialRouteName=<span class=\"string\">\"TrackCreate\"</span></span><br><span class=\"line\">            drawerContent=&#123;props =&gt; &lt;DrawerContainer &#123;...props&#125; /&gt;&#125;&gt;</span><br><span class=\"line\">            &lt;Drawer.Screen name=<span class=\"string\">\"TrackCreate\"</span> component=&#123;HomeTabScreen&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Drawer.Navigator&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ) : (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;AuthStackScreen /</span>&gt;</span><br><span class=\"line\">)&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/Dashboard-App/navigator.png\">\n<p>In the main screen, there will be a <strong>bottom tab navigator</strong>. This will help us navigate between 4 screens: Track Create, Track List, Feed and Account.</p>\n<ol>\n<li><strong>Track Create</strong>: after we finished recording a track, we will move to <strong>Track Custom Screen</strong> so we will need a stack navigator for these 2 screens</li>\n<li><strong>Track List</strong>: after we clicked on a track on the track list, we will move to the track details. Thus, we will also need a stack navigator for these 2 screens.</li>\n<li><strong>Feed and Account</strong> Screens stand by their own so we just need to add them to the Bottom Tab Navigator</li>\n</ol>\n<h5>Quick Tip: How to customize the screen header</h5>\n<p>You <strong>HAVE</strong> to transform your screen into a stack screen by itself to customize the screen header.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;HomeTab.Screen</span><br><span class=\"line\">  name=<span class=\"string\">\"Feed\"</span></span><br><span class=\"line\">  component=&#123;FeedCreateStackScreen&#125;</span><br><span class=\"line\">  options=&#123;&#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"Feed\"</span></span><br><span class=\"line\">  &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>Here I created the FeedCreateStackScreen for my Feed Screen to be able to customize my screen title.</p>\n<h4>Building Welcome and Login/Signup Screen</h4>\n<p>Here is a look of the Login/Signup Screen:</p>\n<img src=\"/Dashboard-App/signup.png\">\n<p><strong>Notice</strong><br>\nThese screens have basic functions to authenticate. I have already written a post about authenticating using JWT token <a href=\"here\">“http://localhost:4000/MessengerClone/”</a>. However, we need to make sure that will use <strong>SafeAreaView and ScrollView</strong> to make it scrollable when the keyboard is opened (so that the keyboard doesnt cover the inputs)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SafeAreaView style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">    &lt;View&gt;</span><br><span class=\"line\">        &lt;ScrollView</span><br><span class=\"line\">            showsVerticalScrollIndicator=&#123;<span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<h4>Building Account Screen</h4>\n<p>This is where the users can customize their profile. This screen has some basic features like changing avatar and viewing the personal information.</p>\n<p>Here it gets to a point where you will need to ask the users for <strong>permission</strong> to access their photos and cameras. This is the first permission we will need and luckily, we have <strong>expo-image-picker</strong> and <strong>expo-camera</strong> to help us. Below is how we usually request for permission to access the <strong>media library</strong> (photos) from the user in Expo.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  (<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Platform.OS !== <span class=\"string\">'web'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; status &#125; = <span class=\"keyword\">await</span> ImagePicker.requestMediaLibraryPermissionsAsync();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (status !== <span class=\"string\">'granted'</span>) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'Sorry, we need camera roll permissions to make this work!'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)();</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n<p><strong>Notes</strong> we should set the quality to 0.1 or lower to reduce the loading time for our app. We should also set the <strong>base64</strong> equal to true to <strong>store</strong> the image later</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pickImage = <span class=\"keyword\">async</span> () =&gt; &#123;    </span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> ImagePicker.launchImageLibraryAsync(&#123;</span><br><span class=\"line\">    mediaTypes: ImagePicker.MediaTypeOptions.All,</span><br><span class=\"line\">    allowsEditing: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    aspect: [<span class=\"number\">4</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">    quality: <span class=\"number\">0.1</span>,</span><br><span class=\"line\">    base64: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result.cancelled) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>There are many ways to store your images but I choose to use <strong>Cloudinary</strong> because their free package is really nice. What Cloudinary does is that it will create an image based on your <strong>base64</strong> link and <strong>upload</strong> that to their storage. After that, you can save your <strong>profile image link</strong> to your database and get it down whenever you want.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> base64Img = <span class=\"string\">`data:image/jpg;base64,<span class=\"subst\">$&#123;result.base64&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"file\"</span>: base64Img,</span><br><span class=\"line\">  <span class=\"string\">\"upload_preset\"</span>: <span class=\"string\">\"iqtz1hm2\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">await</span> fetch(CLOUDINARY_URL, &#123;</span><br><span class=\"line\">  body: <span class=\"built_in\">JSON</span>.stringify(data),</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<img src=\"/Dashboard-App/8.avatar.png\">\n<h2>Explaining the core feature: Location Tracking</h2>\n<p>This is probably the most important feature of the app. Location Tracking is pretty complicated and I will break it down for you in some parts</p>\n<ol>\n<li>Updating time continuously</li>\n<li>Create a Track reducer to handle recording new tracks</li>\n<li>Foreground Location</li>\n<li>Background Location</li>\n<li>Displaying it on a Map</li>\n<li>Customize a Track after saving</li>\n<li>Posting it to Feed</li>\n</ol>\n<h3>Updating time continuously</h3>\n<p>This is probably the easiest part. As you can see in most tracking app, there is a clock running <strong>continuously</strong>. I did this by having 3 <strong>states</strong>: hour, minute and second. When we start recording, we will increase second by 1 (every second) by using a <strong>setInterval</strong> function along with a <strong>useEffect</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> interval = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setSecond(second + <span class=\"number\">1</span>), <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<p>Then, if the second state is &gt;= 60, it will be <strong>resetted</strong> to 0 and the minute state will be increased by 1. Similarly, if the minute state is &gt;= 60, it will be <strong>resetted</strong> to 0 and the hour state will be increased by 1.</p>\n<h3>Create a Location context to handle recording new tracks</h3>\n<p>This is where we handle all the functions that are related to handling recodring the Locations. This can include <strong>startRecording, stopRecording, and addLocation</strong>. These are 3 things that are most important to the app. Everytime the user clicks Record, we will change the state to startRecording. Similarly, if they click Cancel, we will cancel recording.</p>\n<p><strong>Important Notes</strong> When we are recording locations, we will add a new location (this is a combination of longitude, latitude, currentSpeed, accuracy level, …) every second to our state using the <strong>addLocation</strong> function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addLocation = <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">location, isRecording, speedLst</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        dispatch(&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"add_current_location\"</span>, <span class=\"attr\">payload</span>: location&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isRecording)&#123;</span><br><span class=\"line\">        dispatch(&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"add_location\"</span>, <span class=\"attr\">payload</span>: location&#125;)</span><br><span class=\"line\">        dispatch(&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"add_speed\"</span>, <span class=\"attr\">payload</span>: location.coords.speed * <span class=\"number\">3.6</span>&#125;)</span><br><span class=\"line\">        dispatch(&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"add_current_speed\"</span>, <span class=\"attr\">payload</span>: location.coords.speed * <span class=\"number\">3.6</span>&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This is how the recording look like:</p>\n<img src=\"/Dashboard-App/3.record.png\">\n<h3>Foreground Location</h3>\n<p>Foreground location means that recording the location while <strong>your phone is opened and you are opening the app</strong>. This might not be too useful for an app that tracks your location while you are training because when you are cycling or running, you might <strong>lock</strong> your phone or <strong>turn it off</strong>. However, we will still have to include this.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> startWatching = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; granted &#125; = <span class=\"keyword\">await</span> requestPermissionsAsync();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!granted) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Location permission not granted'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        subscriber = <span class=\"keyword\">await</span> watchPositionAsync(</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                accuracy: Accuracy.BestForNavigation,</span><br><span class=\"line\">                timeInterval: <span class=\"number\">3000</span>,</span><br><span class=\"line\">                distanceInterval: <span class=\"number\">30</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            callback</span><br><span class=\"line\">        );</span><br></pre></td></tr></table></figure>\n<p>Here we will use a function that was given to us by the expo library. This is the <strong>watchPositionAsync</strong>. It will basically record your location every 3 seconds or you have travelled 30 meters. Therefore, the recording might be a bit <strong>inaccurate</strong> when you barely moved or sit still. Make sure that you must <strong>ASK FOR THE USER PERMISSION</strong> to use Foreground location</p>\n<h3>Background Location</h3>\n<p>Background location means that recording the location while <strong>your phone is not opened or your screen is locked</strong>. This is the most complicated part of this app and it took me days to set up. This is because both IOS and Android have very strict protocols for asking background locations.</p>\n<p>When we are using background location, we will need to <strong>ASK FOR USER PERMISSION</strong> again but this time when you switch the app to the background it will prompt something like either <strong>allow using location while using the app</strong> or <strong>always allow using location</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> startLocationTracking = React.useCallback(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> Permissions.askAsync(Permissions.LOCATION);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.status !== <span class=\"string\">'granted'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Permission to access location was denied'</span>);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">await</span> Location.startLocationUpdatesAsync(LOCATION_TRACKING, &#123;</span><br><span class=\"line\">    accuracy: Location.Accuracy.BestForNavigation,</span><br><span class=\"line\">    timeInterval: <span class=\"number\">3000</span>, <span class=\"comment\">//update every second</span></span><br><span class=\"line\">    distanceInterval: <span class=\"number\">50</span>, <span class=\"comment\">//update every 10 meters,</span></span><br><span class=\"line\">    foregroundService: &#123;</span><br><span class=\"line\">      notificationTitle: <span class=\"string\">'Using your location'</span>,</span><br><span class=\"line\">      notificationBody: <span class=\"string\">'To turn off, go back to the app and switch something off.'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pausesUpdatesAutomatically: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>For the background location, we will use the <strong>startLocationUpdatesAsync</strong> from expo library. This will track the location every 3 seconds or you have travelled 50 meters.</p>\n<p><strong>Notes 1</strong>: For Android, you will need to have a <strong>modal</strong> or a <strong>pop-up</strong> to explain why you want to use the users’ background location<br>\n<strong>Notes 2</strong>: For Android, your app will need to have permission from Google Review to be able to see the background location functions<br>\n<strong>Notes 3</strong>: For IOS, the pop up to ask for background location will be quite slow so in the first few tries it might not be up.</p>\n<p>There will be a lot more <strong>notes and tricks</strong> on background location in the parts later when we try to <strong>deploy</strong> it to App Store and Google Play Store</p>\n<h3>Displaying it on a Map</h3>\n<p>This is quite easy since we can take advantage of the react native maps. We can use the MapView component to display a map in both IOS maps and Google maps.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;MapView</span><br><span class=\"line\">  style=&#123;&#123; <span class=\"attr\">height</span>: isRecording ? <span class=\"string\">\"50%\"</span> : <span class=\"string\">\"80%\"</span>, <span class=\"attr\">flex</span>: <span class=\"number\">1</span> &#125;&#125;</span><br><span class=\"line\">  region=&#123;currentLocation &amp;&amp; &#123;</span><br><span class=\"line\">    ...currentLocation.coords,</span><br><span class=\"line\">    latitudeDelta: <span class=\"number\">0.005</span>,</span><br><span class=\"line\">    longitudeDelta: <span class=\"number\">0.005</span>,</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">  showsUserLocation=&#123;<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">  followsUserLocation=&#123;followsUserLocation&#125;</span><br></pre></td></tr></table></figure>\n<p>Then we will use a <strong>Polyline Component</strong> also from react native maps to display our tracks on the screen. The locations variable here is our <strong>locations</strong> state. This is an array of small <strong>Location</strong> objects (with latitude, longitude, accuracy, …) which I have explained above.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;PolylineComponent locations=&#123;locations&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<p>This is the screen where we are drawing the tracks on the map.</p>\n<img src=\"/Dashboard-App/3.record.png\">\n<h3>Pin a location</h3>\n<p>This is the <strong>innovative</strong> part of the app when compare to other apps. When we travelled to a new place, you can pin the current location and the app will display immediately the current address to the screen. This uses <strong>Google Maps API</strong> to get the most accurate current address.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reverseGeocodeAPI = <span class=\"keyword\">async</span> (latlng) =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">`<span class=\"subst\">$&#123;BASE_URL&#125;</span>?latlng=<span class=\"subst\">$&#123;latlng&#125;</span>&amp;key=<span class=\"subst\">$&#123;API_KEY&#125;</span>`</span>)</span><br><span class=\"line\"><span class=\"keyword\">return</span> res.data.results[<span class=\"number\">0</span>].formatted_address</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Specifically, we use the <strong>reverseGeocode</strong> API to achieve this functionality. In order to set up and use Google Maps API, you will first need a <strong>Google API key</strong>.</p>\n<ol>\n<li>Go to Google Cloud Console and create 2 new API keys at the Credentials page: 1 for IOS and 1 for Android</li>\n</ol>\n<img src=\"/Dashboard-App/apikey.png\">\n<ol start=\"2\">\n<li>Restrict 1 key to Android App and the other to IOS app</li>\n</ol>\n<img src=\"/Dashboard-App/restrictkey.png\">\n<ol start=\"3\">\n<li>Enable the Google Maps SDK for both IOS and Android in the market page</li>\n</ol>\n<img src=\"/Dashboard-App/market.png\">\n<p>Now you have successfully set up the API keys and are ready to call the Google APIs</p>\n<h3>Customize a Track after saving</h3>\n<p>This is basically adding some information for the track before saving it, you can add name, type, descriptions and an <strong>image</strong> of your track. In order to upload image here, we once again need to <strong>ask for the users permission</strong> to access the media library and have to upload to <strong>Cloudinary</strong></p>\n<p><strong>Notice</strong>: because there will be a lot of inputs in this screen and you dont want the keyboard to <strong>cover</strong> your inputs, make sure to use <strong>KeyboardAvoidingView</strong> for IOS:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;Platform.OS === <span class=\"string\">\"ios\"</span> ? (</span><br><span class=\"line\">  &lt;KeyboardAvoidingView style=&#123;&#123; <span class=\"attr\">flex</span>: <span class=\"number\">1</span> &#125;&#125; behavior=<span class=\"string\">\"padding\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>And do this for Android:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;KeyboardAvoidingView keyboardVerticalOffset=&#123;<span class=\"number\">-1000</span>&#125; style=&#123;&#123; <span class=\"attr\">flex</span>: <span class=\"number\">1</span> &#125;&#125;&gt;</span><br></pre></td></tr></table></figure>\n<h3>Posting it to Feed</h3>\n<p>The Feed screen is basically a <strong>social media screen</strong> where it will list out all the current posts and each post will have avatar, name, descriptions, image and <strong>like, comment and share</strong> sections like a normal Facebook post.</p>\n<p>This can be done by getting all the posts from the database and display it to the screen</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  fetchPosts()</span><br><span class=\"line\">&#125;, [isFocused])</span><br><span class=\"line\"></span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (state) &#123;</span><br><span class=\"line\">    setSortedState(state.slice().sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> b.createdAt - a.createdAt))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, [state])</span><br></pre></td></tr></table></figure>\n<p>What I do in the second useEffect is that I sort the post in the order that <strong>newest</strong> posts are on top. I will explain more about the schema of each post and comment and like cause it will be quite <strong>complicated</strong></p>\n<h2>Backend</h2>\n<h3>Setting up Express and some libraries</h3>\n<p>In Express, we used some standard libraries such as express, bodyParser and mongoose (for handle MongoDB). To connect to MongoDB, I have already written a blog <a href=\"here\">“http://localhost:4000/Doctorally/”</a>. You guys can check it out.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">\"body-parser\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>Notice that</strong>, we use this config to extend our request data size:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.urlencoded(&#123;</span><br><span class=\"line\">    limit: <span class=\"string\">'50mb'</span>,</span><br><span class=\"line\">    parameterLimit: <span class=\"number\">100000</span>,</span><br><span class=\"line\">    extended: <span class=\"literal\">true</span> </span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<h3>Explaining the routes</h3>\n<p>There are 3 types of routes:</p>\n<ol>\n<li><strong>Authentication</strong> Routes. This is the authentication router using JWT Token. It is really common and I will not mention it in details here</li>\n<li><strong>Track</strong> Routes. These are the routers that you will use to save your track details to MongoDB</li>\n</ol>\n<p>This is an example of how to use the track routes to find <strong>all</strong> tracks of a user</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">\"/tracks\"</span>, requireAuth, <span class=\"keyword\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tracks = <span class=\"keyword\">await</span> Track.find(&#123;<span class=\"attr\">userId</span>: req.user._id&#125;)</span><br><span class=\"line\">    res.send(tracks)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><strong>Posts</strong> Routes. These are the routers to control the posts that are posted to the Feed. Below is an example of how to get a post with a <strong>specified id</strong>:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">\"/posts/:id\"</span>, requireAuth, <span class=\"keyword\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = req.params.id</span><br><span class=\"line\">    <span class=\"keyword\">const</span> query = &#123;<span class=\"attr\">_id</span>: id&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> post = <span class=\"keyword\">await</span> Post.findOne(query)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        res.send(post)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.status(<span class=\"number\">422</span>).send(&#123;<span class=\"attr\">error</span>: err.message&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3>Explaining MongoDB Schema</h3>\n<p>In this part, I will explain in detail the schemas of each type of routes.</p>\n<h4>The user schema:</h4>\n<p>The user schema consists of <strong>information</strong> like: email, password (encrypted), firstName, lastName, age, gender, image (link to avatar image)</p>\n<p><strong>Note 1</strong>: we can set the image (avatar link) of a default image before the users change their avatar<br>\n<strong>Note 2</strong>: In the user model, we will add a method to help comparePassword so that when we login, the password will be compared with the <strong>encrypted</strong> password saved in the database</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userSchema.methods.comparePassword = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">candidatePassword</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    bcrypt.compare(candidatePassword, user.password, (err, isMatch) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject(err);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isMatch) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject(<span class=\"literal\">false</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      resolve(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4>The Track Schema</h4>\n<p>Here we need to understand the detailed information of each location that we saved. Each location we saved will be a <strong>POINT</strong> schema with information like current latitude, longitude, altitude, accuracy, …</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pointSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    timestamp: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    coords:&#123;</span><br><span class=\"line\">        latitude: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">        longitude: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">        altitude: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">        accuracy: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">        heading: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">        speed: <span class=\"built_in\">Number</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Therefore, each track will be an <strong>list</strong> of consecutive <strong>points</strong> so a track schema will look like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> trackSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    userId:&#123;</span><br><span class=\"line\">        type: mongoose.Schema.Types.ObjectId, </span><br><span class=\"line\">        ref: <span class=\"string\">'User'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    locations: [pointSchema],</span><br></pre></td></tr></table></figure>\n<p>Notice that we will also need a <strong>userId</strong> in each track. This will be a <strong>reference</strong> to the user table. This will help us keep track of whose track is this.</p>\n<h3>The Post Schema</h3>\n<p>Each post will contain likes, comments, and a map of the track we saved. Therefore, we need <strong>userId</strong> as a reference of the user table to know whose post is this. We also need <strong>trackId</strong> as a reference of the track table to know what track is this. Lastly, we need the <strong>likes</strong> and <strong>comments</strong> schema to be lists of likeSchemas and commentSchemas.</p>\n<p>These are the likeSchema and commentSchema</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> commentSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    userId:&#123;</span><br><span class=\"line\">        type: mongoose.Schema.Types.ObjectId,</span><br><span class=\"line\">        ref: <span class=\"string\">'User'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    username: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    text: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    avatar: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> likeSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    userId:&#123;</span><br><span class=\"line\">        type: mongoose.Schema.Types.ObjectId, </span><br><span class=\"line\">        ref: <span class=\"string\">'User'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    username:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">    avatar: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> postSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    userId:&#123;</span><br><span class=\"line\">        type: mongoose.Schema.Types.ObjectId, </span><br><span class=\"line\">        ref: <span class=\"string\">'User'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    trackId:&#123;</span><br><span class=\"line\">        type: mongoose.Schema.Types.ObjectId, </span><br><span class=\"line\">        ref: <span class=\"string\">'Track'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    likes: &#123;</span><br><span class=\"line\">        type: [likeSchema],</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: []</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    comments: &#123;</span><br><span class=\"line\">        type: [commentSchema],</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: []</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<p>This is basically how we create the <strong>postSchema</strong>.</p>\n<h3>Host server on Google App Engine</h3>\n<p>In order to run your server on all machines, we need to host our server somewhere but I chose <strong>Google App Engine</strong>. You can use whatever service you like. Here is the quick recap of the steps that is in [“<a href=\"https://cloud.google.com/appengine/docs/standard/nodejs/quickstart\" target=\"_blank\" rel=\"noopener\">https://cloud.google.com/appengine/docs/standard/nodejs/quickstart</a>”](this official tutorial)</p>\n<ol>\n<li>Create an app on Google Cloud Console</li>\n</ol>\n<img src=\"/Dashboard-App/newapp.png\">\n<ol start=\"2\">\n<li>Register for the Google App Engine service to that app. Make sure to choose the region that is close to you</li>\n</ol>\n<img src=\"/Dashboard-App/newapp2.png\">\n<ol start=\"3\">\n<li>\n<p>Make sure that billing is enabled for your Cloud project (just use the trial version)</p>\n</li>\n<li>\n<p>Enable Cloud build API in the Market</p>\n</li>\n</ol>\n<img src=\"/Dashboard-App/newapp3.png\">\n<ol start=\"5\">\n<li><strong>IMPORTANT</strong>: In your server folder, go to package.json and change the <strong>“main” key</strong> to “server.js”. This is because google app engine only takes server.js as the main file.</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"track-server\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"server.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"@expo/ngrok\"</span>: <span class=\"string\">\"^2.4.3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"aws-sdk\"</span>: <span class=\"string\">\"^2.905.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"bcrypt\"</span>: <span class=\"string\">\"^5.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"body-parser\"</span>: <span class=\"string\">\"^1.19.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"express\"</span>: <span class=\"string\">\"^4.17.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"jsonwebtoken\"</span>: <span class=\"string\">\"^8.5.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mongoose\"</span>: <span class=\"string\">\"^5.11.16\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"multer\"</span>: <span class=\"string\">\"^1.4.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"nodemon\"</span>: <span class=\"string\">\"^2.0.7\"</span></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>\n<p>Change the name of your main file (in the directory) from <strong>index.js -&gt; server.js</strong>. Make sure to change all imports if necessary.</p>\n</li>\n<li>\n<p>Run gcloud app deploy and click yes if prompted</p>\n</li>\n<li>\n<p>After finished uploading, you are done. You can always check the logs if there is any error on the google cloud console -&gt; Logs</p>\n</li>\n</ol>\n<img src=\"/Dashboard-App/newapp4.png\">\n<h2>Testing and Deploying to App Store and Google Play Store</h2>\n<p>This is the most exhausting and frustrating part but you have to go through this the first time. It actually took me <strong>more time</strong> to deploy to 2 stores than doing code.</p>\n<h3>Deploying an Expo App to App Store</h3>\n<p>I will walk you through the very <strong>detailed</strong> steps from beginning to seeing your app on <strong>App Store</strong></p>\n<ol>\n<li>Setting up app.json file</li>\n<li>Testing your app on Simulator and Custom Expo Go</li>\n<li>Build the app for IOS using the archive</li>\n<li>Register for Apple Development Program through Apple Developer App</li>\n<li>Create an app on App Store Connect</li>\n<li>Prepare screenshots and video records of your Application</li>\n<li>Test your app on TestFlight</li>\n<li>Submit your app for review and wait for approval</li>\n</ol>\n<h4>Setting up app.json file</h4>\n<p><strong>Versions and Build Number</strong>: This is the file that all expo projects have. You will need to handle <strong>versioning</strong> and <strong>buildNumber</strong>. These seem difficult at first but it is actually really easy. Everytime you make changes and create a new build, you will increment your <strong>build number</strong> like from 1.1.5 -&gt; 1.1.6. And everytime, you have a huge change or you want to update a version that is on the App Store already, you will need to <strong>increase the version</strong> like from 1.1.0 -&gt; 1.2.0</p>\n<p><strong>Icon Image</strong> Here, you can set up your splash screen image (loading screen) or your customized icon.</p>\n<p><strong>ios file</strong>. This is the most important file for IOS App as you can see from the name. In here, you will need to add the <strong>PERMISSIONS YOU ASK FROM THE USERS</strong> in the <strong>infoPlist</strong> key. Since my app is using background location, foreground location, media library and camera, all of these <strong>configurations</strong> are required:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"infoPlist\": &#123;</span><br><span class=\"line\">  \"NSCameraUsageDescription\": \"Allow Dashboard to ...\",</span><br><span class=\"line\">  \"NSLocationWhenInUseUsageDescription\": \"Allow Dashboard to ...\", </span><br><span class=\"line\">  \"NSLocationAlwaysUsageDescription\": \"Allow Dashboard to ...\",</span><br><span class=\"line\">  \"NSLocationAlwaysAndWhenInUseUsageDescription\": \"Allow Dashboard to ...\",</span><br><span class=\"line\">  \"NSPhotoLibraryUsageDescription\": \"Give Dashboard permission to ...\",</span><br><span class=\"line\">  \"UIBackgroundModes\": [</span><br><span class=\"line\">    \"location\",</span><br><span class=\"line\">    <span class=\"string\">\"fetch\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>In the string value, you must provide a <strong>detailed</strong> description of how you want to use the features you ask from the users. For example, “Allow Dashboard to access media library to upload avatar images”. You should also add a config of your API key like this if you are using Google Maps.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"config\":&#123;</span><br><span class=\"line\">\"googleMapsApiKey\": \"your api key\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4>Testing your app on Simulator and Custom Expo Go</h4>\n<p>Usually when builing your app, you would have already tested with some kind of simulators. To test an IOS App, it would be best to use <strong>Xcode Simulator</strong>. You can open Xcode and open the <strong>simulator</strong> from choose from navigation bar Window -&gt; Devices and Simulator. Remember that you can choose any type of Iphone you want to simulate. You will need multiple Iphones for taking the screenshots later.</p>\n<p>Another way to more accurately test it with Iphone is using the Custom Expo Go. You should consider following the instructions <a href=\"here\">“https://docs.expo.io/guides/adhoc-builds/”</a></p>\n<h4>Build the app for IOS using the archive</h4>\n<p>You need to build the iOS bundle that actually packages the code of your app. This is then deployed somewhere on the Expo servers. In order to do this run the code below. Detailed Instructions are at <a href=\"here\">“https://docs.expo.io/distribution/building-standalone-apps/”</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expo build:ios -t archive</span><br></pre></td></tr></table></figure>\n<p>This will initiate the build and you will wait for Expo to build your code to an ios package. When it is done, it will give you a link where you can download your an <strong>.ipa</strong> file then encompasses your code. <strong>KEEP THIS .IPA FILE</strong> this is basically your whole app.</p>\n<h4>Register for Apple Development Program through Apple Developer App</h4>\n<p>You will need to sign up for the Apple Developer Program:</p>\n<ol>\n<li>Go to <a href=\"https://developer.apple.com/programs/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/programs/</a> and sign in with your Apple ID</li>\n<li>Click on Enroll</li>\n<li>Fill out the information and pay the $99 fee</li>\n<li>Wait for 1-2 days for your order to be processed</li>\n</ol>\n<p>or you can download the Apple Developer app from App Store to your <strong>PHONE</strong>. And register for the Apple Developer Program from the Account Tab. <strong>Notice</strong> that the $99 will be deducted from your current logged in <strong>Apple ID</strong></p>\n<h4>Create an app on App Store Connect</h4>\n<p>Go to <a href=\"https://appstoreconnect.apple.com\" target=\"_blank\" rel=\"noopener\">https://appstoreconnect.apple.com</a> after you have successfully signed up for the Apple Developer Program and sign in to your Apple ID</p>\n<p>Create a new app like in here:</p>\n<img src=\"/Dashboard-App/newapple.png\">\n<p><strong>Notice</strong>: THERE WILL BE AN ERROR HERE in the <strong>bundle id</strong>. The bundle id will be generated by the name and you will take that bundle ID and copy it into your app.json bundleId in IOS. However, it will not be activated right away you will get back into appstoreconnect and select from the dropdown and you will see your bundleId generated</p>\n<h4>Prepare screenshots and video records of your Application</h4>\n<p>Preparing <strong>screenshots</strong> of your Application in 6.5 inch phones (1242 × 2688px) and 5.5 inch phones (1242 x 2208px). It would be best to use the Simulator and take the <strong>video recordings</strong> and screenshots from their. You will also need screenshots of your app in tablets 2nd and 3rd generations as well but it is okay if you use the 4th or the 5th generation in your Simulator</p>\n<h4>Test your app on TestFlight</h4>\n<p>Download the app Transporter from App Store to your Mac. Link <a href=\"here\">“https://apps.apple.com/us/app/transporter/id1450874784?mt=12”</a></p>\n<p>Remember the <strong>.ipa</strong> file that I told you to save. This <strong>.ipa</strong> file is really important. You can now drop the .ipa file into your transporter app and it will upload automatically to TestFlight on App Store Connect. <strong>REMEMBER</strong>, you will need a different build version for each upload. You <strong>CANNOT</strong> have 2 builds that have the same versions and the same build number.</p>\n<p>You can see the details in these 2 pictures below:</p>\n<img src=\"/Dashboard-App/newapple2.png\">\n<img src=\"/Dashboard-App/newapple3.png\">\n<h4>Submit your app for review and wait for approval</h4>\n<p>When you have finished all the steps above, your app is ready to submit for review. It will take from 24-48 hours to complete. <strong>Notice</strong> that Apple will extensively check and test out your app. Therefore, you should make sure that your app follows these rules so that it will not be rejected by Apple. The link is <a href=\"%22https://developer.apple.com/app-store/review/%22\">here</a></p>\n<h3>Deploying an Expo App to Google Play Store</h3>\n<ol>\n<li>Setting up app.json file</li>\n<li>Testing your app on Android Emulator</li>\n<li>Build the .apk or .aab file for Android</li>\n<li>Register for Google Play Developer</li>\n<li>Create an app on Google Play</li>\n<li>Prepare screenshots and images of your Application</li>\n<li>Push your app through the testing stages and wait for review</li>\n</ol>\n<h4>Setting up app.json file</h4>\n<p>The app.json file is quite similar to ios. You will control your version like the build number from IOS using the <strong>versionCode</strong>. <strong>YOU HAVE TO SET YOUR API KEY</strong> if you are using google maps:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"config\":&#123;</span><br><span class=\"line\">  \"googleMaps\":&#123;</span><br><span class=\"line\">    \"apiKey\": \"your api key\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>android file</strong>. This is the most important file for Android App. In here, you will need to add the <strong>PERMISSIONS YOU ASK FROM THE USERS</strong> in the <strong>permissions</strong> key. Since my app is using background location, foreground location, media library and camera, all of these <strong>configurations</strong> are required. More info on setting up the file can be found <a href=\"%22https://docs.expo.io/versions/v41.0.0/config/app/#apikey-2%22\">here</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"permissions\": [</span><br><span class=\"line\">  \"CAMERA\",</span><br><span class=\"line\">  \"ACCESS_COARSE_LOCATION\",</span><br><span class=\"line\">  \"ACCESS_FINE_LOCATION\",</span><br><span class=\"line\">  \"READ_EXTERNAL_STORAGE\",</span><br><span class=\"line\">  \"WRITE_EXTERNAL_STORAGE\",</span><br><span class=\"line\">  \"ACCESS_BACKGROUND_LOCATION\",</span><br><span class=\"line\">  <span class=\"string\">\"FOREGROUND_SERVICE\"</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h4>Testing your app on Android Emulator</h4>\n<p>You should download the Android Studio (link: “<a href=\"https://developer.android.com/studio\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/studio</a>”) and use the <strong>Android Emulator</strong> in the AVD Manager. If you are using a Mac M1, you should consider using the Preview version 3 of the Android Emulator <a href=\"%22https://github.com/741g/android-emulator-m1-preview/releases%22\">here</a></p>\n<p>You can also use an Android Phone and Download <strong>Expo Go</strong>. Then you can test your app like you did in the building stage</p>\n<h4>Register for Google Play Developer</h4>\n<ol>\n<li>Go to <a href=\"https://play.google.com/console\" target=\"_blank\" rel=\"noopener\">https://play.google.com/console</a></li>\n<li>Register for the Google Play Developer using a Google Account</li>\n<li>Pay the $25 fee for the Program</li>\n<li>Upload your National Citizen ID to help Google verify</li>\n</ol>\n<h4>Build the .apk or .aab file for Android</h4>\n<p>After that, you can start the Expo build just like for IOS. When building for android you can choose to build APK (<strong>expo build:android -t apk</strong>) or Android App Bundle (<strong>expo build:android -t app-bundle</strong>). It is recommended that you use the App Bundle command. <strong>KEEP THIS .APK OR .AAB file</strong></p>\n<p>Then, go to your Google Play Console at <a href=\"https://play.google.com/console\" target=\"_blank\" rel=\"noopener\">https://play.google.com/console</a>. Create a new app with the same <strong>bundle id</strong> as your ios app.</p>\n<h4>Testing in Google Play Console</h4>\n<p>There are some <strong>stages</strong> of testing in Google Play Console that you might find trouble understanding. You dont need to go through all the stages of testing even though you are recommended</p>\n<p>There are 6 stages (as I understand): Pre-registration -&gt; Internal Testing -&gt; Closed Testing -&gt; Open Testing -&gt; Production -&gt; Release.</p>\n<p>What you can do to test is that you will <strong>DROP or UPLOAD</strong> your .aab or .apk<br>\nfile that was generated before into the Google Play Console. This will create a release of your app. You can <strong>PROMOTE</strong> your release in the order of the 6 stages above. For example, you can <strong>promote</strong> internal testing to open testing<br>\nUsually, I would just do Closed Testing and then Production.</p>\n<ol>\n<li>Pre-registration: Check your app to see which devices it is suitable</li>\n<li>Internal and Closed Testing: Add some testers by email and send them a link to test out your app.</li>\n</ol>\n<img src=\"/Dashboard-App/google.png\">\n<ol start=\"3\">\n<li>Open Testing: Your app is basically up in the store for users from the countries you selected to join in and test</li>\n<li>Production and Release: Final stages before your app is reviewed and released</li>\n</ol>\n<h4>Prepare screenshots and images of your Application</h4>\n<p>You will need screenshots from an android device. You can just take the screenshots from your Emulator. You will also need a background image for your app. The size is specified on the Google Play Console</p>\n<h4>Push your app through the testing stages and wait for review</h4>\n<p><strong>YOUR APP SETTINGS</strong>: can always be found in the <strong>Main Store Listing</strong> in the left tab of your Dashboard</p>\n<img src=\"/Dashboard-App/google2.png\">\n<p><strong>COMPLETE YOUR APP CONTENT PAGE</strong>: this page is super important because it has many policies related to ads, privacy policy and etc… This can be found here:</p>\n<img src=\"/Dashboard-App/google3.png\">\n<p>Your app will be reviewed by the Google Team and will be published in 2-3 days.</p>\n<h2>Thank you for reading this post. I hope this post provided you with some insights on how to build and deploy a mobile application. See you guys again in the next post !</h2>\n"},{"title":"Post#4 Creating Doctorally - Online Supporting Platform","catalog":true,"date":"2020-10-18T01:53:06.000Z","subtitle":"20-min read","header-img":"Hospital.png","readtime":"20-min read","_content":"\n## It has been a long time since I last wrote on my blog. So I want to add some usefel posts in my break time\n\nDuring the Covid-19 pandemic, me and my friends have created a online platform to connect **healthcare workers** to **volunteers** with their basic needs called Doctorally. Here I am going to explain quickly how we did it.\n\nAgain this is a **MERN** stack. I have explained it here in [this post](https://decodecraft.com/CreateBlog/). I am going to divide the post into 2 parts the **frontend** and the **backend**\n\n### FRONTEND\n\nFor the frontend the main tools we used was: \n\n1. Material UI Framework. You can find the details [here](https://material-ui.com/)\n2. React-router-dom and react-router. \n3. React hooks: useContext and useEffect\n4. Authentication\n5. Custom authentication hook.\n6. API calling from Mapbox, Openstreetmap and custom API. \n\n### 1. Material UI Framework\n\nThis framework gives us a very beautiful layout. We can handle or store the data we get from the server by using **Containers** or **Tables** of Material UI. \n\nWe can get all the layouts we want Button, Box, Container, Grid. For example this is a **Table** the that handles that data from an API.\n\n{% asset_img material.PNG %}\n\nThis is a basic set up of the Tables that we are using to list out all the data: \n```javascript\n<TableContainer className={classes.container}>\n  <Table stickyHeader aria-label=\"sticky table\">\n    <TableHead>\n      <TableRow>\n        <StyledTableCell align='center'>\n          <div\n            style={{\n            fontWeight: 'bold',\n            fontFamily: 'Faustina'\n            }}>{getLongLineText(locale.lang, \"covid19_data\", \"heads\", \"country\")}\n          </div>\n```\n\nRemember to **import** all the necessaries depencies the most commonly used in Material UI is '@material-ui/core'.\n\n\n### 2. React-router-dom and react-router\n\nSince our website is a single page website, using react router can help us quickly change between the pages and pass data to different places through **props** or **query** or **params**\n\n```javascript\n  <Route exact path=\"/\" component={HomePage} />\n  <Route exact path=\"/about\" component={About} />\n  <Route exact path=\"/volunteer\" component={Volunteer} />\n  <Route exact path=\"/volunteer/signup\" component={VolunteerSignUp} />\n  <Route exact path=\"/volunteer/signup/success\" component={SuccessVolunteer} />\n```\n\nThe **exact path** will be the link to our pages. For example, if our domain is (this)[https://doctorally-test.herokuapp.com/]. Then if we access https://doctorally-test.herokuapp.com/about, we will get the About page. \n\nThe **Component** we passed in will be rendered if we access that path. So the About Component will be rendered if the About page is accessed. \n\nWhen we want to pass extra information or access a page that is **unique** to each person (that could be a page that we can only access after logged in), we will pass the **params** \"/:id\" into the path.\n\n```javascript\n  <Route exact path=\"/requests/:id\" component={RequestResponse} />\n```\n\nThis means that after the doctors create a request in the **RequestResponse** component, there will be a unique id generated. We can only access this request by having that id.\n\nRemember to wrap the App in the main index.js file in BrowserRouter for the Router to work \n```javascript\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n```\n\n### 3. React hooks: useContext, useEffect, useHistory, useParams\nBeside useState which will obviously be used a lot, we used some additional hooks as listed in the title. \n\n#### 3.1 useContext\nThis is a very efficient way to maintain a website in 2 languages and quickly switch between each other. Our website has 2 languages Vietnamese and English. We will store all the texts in the website by variables \n\n```javascript\nconst ENG = {\n  header: {\n    about: \"About\",\n    volunteer: \"Volunteer\",\n    request_help: \"Request Help\",\n  },\n\n  homepage: {\n    volunteer: {\n      title: \"Volunteer\",\n      description_strong: \"Small actions spread love. \",\n    }\n}\n```\n\nAnd we store all the Vietnamese versions of the words also in variables\n\n```javascript\nconst VIE = {\n  header: {\n    about: \"Về chúng mình\",\n    volunteer: \"Tình nguyện\",\n    request_help: \"Yêu cầu giúp đỡ\",\n  },\n\n  homepage: {\n    volunteer: {\n      title: \"Tình nguyện\",\n      description_strong: \"Hành động nhỏ loan tỏa yêu thương. \",\n    }\n  }\n```\n\nIn order to switch between the 2, we create a context and called it localeContext.\nSo this variable will have 2 values English or Vietnamese, if we want to change all the words to another language we can just change this variable. \n\nThis will be the function that sets up the localeContext. The getText function we browse in all the texts we store upper in the objects **ENG** and **VIE** and get the appropriate words.\n\n```javascript\n\nconst localeContext = React.createContext({ lang: \"ENG\", setLang: () => { } });\n\nconst getText = (loc, key, lang) => {\n  if (lang === \"VIE\") {\n    return VIE[loc][key];\n  }\n  return ENG[loc][key];\n};\n\n```\n\nThis is one application in the website where we get the text and display it inside a button\n\n```javascript\nconst locale = useContext(localeContext);\n <Button>\n  {getText(\"header\", \"supply_stores\", locale.lang)}\n</Button>\n```\n#### 3.2 useEffect\n\nWe use this every time we want to load the data automatically from the server whenever we get into the page. \n\nAssume that we want to perform GET method from the API \"/helpRequest\". This will get all the helprequest data from the Mongodb.\n\n```javascript\n  const [requestData, setRequestData] = useState([]);\n  const [invalidate, setInvalidate] = useState(true);\n  useEffect(() => {\n    if (invalidate) {\n      axios.get(\"/helpRequest\")\n        .then((res) => {\n          // setRequestData(res);\n          console.log(res)\n          setInvalidate(false);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  }, [invalidate]);\n```\n\nThis function will be run everytime the state invalidate is changed. Invalidate is a state to cleanup the function, meaning that this will not be run continuously while we are still in the page but only run when we reload or switch to the page. \nAfter the we perform the **GET** request, we will store the **res** data into the requestData state and set the invalidate to false so that the function will not be called again.\n\n#### 3.3 useHistory, useParams\n\nuseHistory is a React hook that helps us change the page really efficiently. Remember before we have our react-router set up. Here we can imagine the history is our website link and if we are at the main page and want to navigate to about page we can simply do \n\n```javascript\n  const history = useHistory();\n  history.push(\"/about\")\n```\n\nSo similar question to what we have before in react-router, if we want to switch to a page that is unique to each person, what will we do? \n\nHere we assume that we have the id of the page that we want to switch to is **id**. We can push it into the history through params \n\n```javascript\n  const history = useHistory();\n  const handleBoxClick = () => {\n    history.push(`requests/${id}`);\n  };\n```\n\nNow if we switch to the ${domain}/requests/${id} page, we can get the id that we just passed through the params by using the hook useParams\n```javascript\n  const { id } = useParams();\n```\n\n### 4. Authentication\nThis is quite a complicate process that involves that backend as well. First in the frontend we will set up our submit form using Formik (a more efficient form). \n\nThis is the basic form of the username input \n```javascript\n      <Form onSubmit={formik.handleSubmit}>\n        <Form.Group>\n          <Form.Label className=\"code\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"username\"\n            value={formik.values.username}\n            onChange={formik.handleChange}\n            isInvalid={formik.errors.username}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {formik.errors.username}\n          </Form.Control.Feedback>\n        </Form.Group>\n      </Form>\n```\n\nThis big Form will have an **handleSubmit** function that is embedded in the Formik to send all the data \n\nAfter submitting the form, we will call to the login api and after that we will receive a new user with a newly generated JWT token. We will the add this token to the localStorage in order to use the Remember Me function. When we log out, we will delete this jwt token from the localStorage.\n\n```javascript\nconst formik = useFormik({\n  ...\nonSubmit: (values) => {\n      fetchLogin(values.username, values.password, values.role)\n        .then((authUser) => {\n          if (values.rememberMe) {\n            localStorage.setItem(\"jwt\", authUser.token);\n          }\n          setAuthUser(authUser);\n          history.push(\"/\")\n        })\n        .catch(() => {\n          setFailureModalVisible(true);\n        });\n    },\n})\n\n```\n\nWe will do a similar thing to the Register Method\n\n### 5. Custom authentication hook.\nThis is a very useful hook to use when we want to only allow access to a page if the person has authenticated (logged in).\n\n```javascript\nconst withAuth = (WrappedComponent) => (props) => {\n  const { authUser, setAuthUser } = useContext(authCtx);\n  useEffect(() => {\n    if (!authUser) {\n      const jwt = localStorage.getItem('jwt');\n      if (jwt) {\n        fetchProfile(jwt).then((user) => setAuthUser(user));\n      }\n    }\n  }, [authUser, fetchProfile, setAuthUser]);\n\n  if (profileApi.loading) {\n    return <Loading />;\n  }\n  if (authUser !== null) {\n    return <WrappedComponent {...props} />;\n  }\n  return <Auth {...props} />;\n};\n```\n\nWe will store the data of the authenticated user after logging in to a authUser context so that we can access this data everywhere in our app. We will get the jwt in the localStorage and find out the appropriate current user. Then we will pass all the props of the (WrappedComponent) into the withAuth component. So for example if we want that user can only access OfferHelp if they have logged in then we will wrap it up as the following: \n```javascript\nexport default withAuth(OfferHelp);\n```\n\n### 6. API calling from Mapbox, Openstreetmap and custom API. \n\nIn our app, we use Openstreemap API to get the nearby stores from the healthcare worker's locations. So here is what we will do. We will get the input location of the healthcare workers. Then we will use Openstreetmap to convert it into longitude and latitude. After that, we will implement that longitude and latitude into the Mapbox API to get all the shops that are nearby the healthcare's workers locations (I can use Google Map API for this but it is quite costly) \n\nThis is we get the longitude and latitude of the location \n```javascript\nconst fetchNearbyStoreDataLocation = async (location) => {\n  const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${location}&format=json&polygon_geojson=1&addressdetails=1`)\n  const resJson = await response.json()\n  return resJson\n}\n```\n\nThen we will store the data we get from the **fetchNearbyStoreDataLocation** into a state called **locationCordinate**\n\n```javascript\n  const [locationCordinate, setLocationCordinate] = useState({\n    lat: 0,\n    lon: 0\n  })\n   fetchNearbyStoreDataLocation(newQuery)\n      .then((res) => {\n        setLocationCordinate({\n          lat: res[0].lat,\n          lon: res[0].lon\n        })\n```\n\nAfter that, we will get the nearby stores from the location coordinates data using mapbox \n```javascript\nconst fetchNearbyStoreData = async (locationCordinate) => {\n  var tileset = 'mapbox.mapbox-streets-v8'\n  var radius = 2000; //meters\n  var limit = 30; // The maximum amount of results to return\n  var layers = 'poi_label'\n  var query = 'https://api.mapbox.com/v4/' + tileset + '/tilequery/' + locationCordinate.lon + ',' + locationCordinate.lat + '.json?radius=' + radius + '&limit=' + limit + '&layers=' + layers + '&access_token=' + mapboxgl.accessToken\n\n  const response = await fetch(query)\n  const resJson = await response.json()\n  return resJson\n}\n```\n\n### BACKEND\nThe backend is mostly used to handle the API calls that we make in the frontend so we will have 3 main **API calls**\n\n1. Authentication \n2. HelpRequests\n3. Volunteer\n\nWe use these libraries and dependencies: express, mongoose, cors, body-parser, path, jsonwebtoken(jwt). For the database, we will use the online cloud Mongodb in order to deploy it later.\n\n#### 1. Authentication\nFirst we must create the API for both the login and the register request\n```javascript\nrouter.post('/register', (req, res) => {\n  const { username, password, role } = req.body;\n  register(username, password, role)\n    .then((result) => {\n      res.json({ success: true });\n    })\n    .catch((err) => {\n      switch (err.message) {\n        case ERROR.USERNAME_EXISTED:\n          res.status(409).json({ success: false, err: ERROR.USERNAME_EXISTED });\n          break;\n        default:\n          res.status(500).json({ success: false, err: ERROR.INTERNAL_ERROR });\n          break;\n      }\n    });\n});\n\nrouter.post('/login', (req, res) => {\n  const { username, password, role } = req.body;\n  login(username, password, role)\n    .then((user) => {\n      const token = generateJWT(user);\n      res.json({\n        user: user,\n        token: token,\n      });\n    })\n    .catch((err) => {\n      res.status(401).json({ success: false, err: err.message });\n    });\n});\n```\n\nWe will receive the req.body directly from the form that we create in the Frontend by calling the API \"/login\" and \"/register\". In here we can see that there are 2 functions login and register. \n\nFor example for the register function, we will \n  1. check if the user has already existed \n  2. create a newUser with 2 fields username and role(doctor or volunteer)\n  3. generate an encripted password from the password user entered\n  4. save the user to the database\n```javascript\nconst register = async (username, password, role) => {\n  const user = await User.findOne({ username });\n  if (user) throw new Error(ERROR.USERNAME_EXISTED);\n  const newUser = new User({\n    username, role\n  });\n  newUser.generatePassword(password);\n  return newUser.save();\n};\n```\n\n#### 2. HelpRequests\nSo the helpRequest can only be accessed by users will healthcare workers or doctor's role. The doctors will make helpRequest and send it to the server. Once we have the data of the request, we will save all of them in their respective fields in the Mongoose Scheme and save to the Database\n\n``` javascript\nrouter.get(\"/\", (req, res) => {\n  HelpRequest.find((err, help) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.json(help);\n    }\n  });\n});\n\nrouter.post(\"/\", (req, res) => {\n  const data = req.body;\n  const newData = Object.keys(data[0]).filter((key) => data[0][key] == true);\n  const helpRequest = new HelpRequest({\n    medicalSupplies: data[0].medicalSupplies,\n    masks: data[0].masks,\n    ...\n  });\n  helpRequest.save();\n});\n```\n\n#### 3. Volunteer\nThe volunteer is a little bit more complex. There are 2 types of volunteers: volunteers without helping a specific doctor and with helping a specific doctor. For type 1, we can just filled out a form and send it to the server and the information will be saved to the database. However, for type 2, we will need the id of the doctor whose the volunteer is helping, and then push that to the server.\n```javascript\nrouter.get(\"/\", (req, res) => {\n  console.log(req.body);\n  VolunteerRequest.find((err, help) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.json(help);\n    }\n  });\n});\n\nrouter.post(\"/\", (req, res) => {\n  const data = req.body;\n  const newData = Object.keys(data[0]).filter((key)=> data[0][key] == true)\n  const volunteerRequest = new VolunteerRequest({\n    meals: data[0].meals,\n    drinks: data[0].drinks,\n    idDoctor: data[1].idDoctor,\n    ...\n  });\n  volunteerRequest.save();\n```\n\nThis is the end of this post, I hope you enjoy it and learn something new from the post. I would like to thank all my team members Hoang Lam, Tuan Hoang, Hoang Minh and Hong Minh for creating this website together. If you want to check out the website, here is the [link](https://doctorally-test.herokuapp.com/). In the next post, we will see how to deploy a project with a server using heroku.","source":"_posts/Doctorally.md","raw":"---\ntitle: Post#4 Creating Doctorally - Online Supporting Platform\ncatalog: true\ndate: 2020-10-18 08:53:06\nsubtitle: 20-min read\nheader-img: \"Hospital.png\"\ntags: [javascript, reactjs, nodejs, api]\nreadtime: 20-min read\n---\n\n## It has been a long time since I last wrote on my blog. So I want to add some usefel posts in my break time\n\nDuring the Covid-19 pandemic, me and my friends have created a online platform to connect **healthcare workers** to **volunteers** with their basic needs called Doctorally. Here I am going to explain quickly how we did it.\n\nAgain this is a **MERN** stack. I have explained it here in [this post](https://decodecraft.com/CreateBlog/). I am going to divide the post into 2 parts the **frontend** and the **backend**\n\n### FRONTEND\n\nFor the frontend the main tools we used was: \n\n1. Material UI Framework. You can find the details [here](https://material-ui.com/)\n2. React-router-dom and react-router. \n3. React hooks: useContext and useEffect\n4. Authentication\n5. Custom authentication hook.\n6. API calling from Mapbox, Openstreetmap and custom API. \n\n### 1. Material UI Framework\n\nThis framework gives us a very beautiful layout. We can handle or store the data we get from the server by using **Containers** or **Tables** of Material UI. \n\nWe can get all the layouts we want Button, Box, Container, Grid. For example this is a **Table** the that handles that data from an API.\n\n{% asset_img material.PNG %}\n\nThis is a basic set up of the Tables that we are using to list out all the data: \n```javascript\n<TableContainer className={classes.container}>\n  <Table stickyHeader aria-label=\"sticky table\">\n    <TableHead>\n      <TableRow>\n        <StyledTableCell align='center'>\n          <div\n            style={{\n            fontWeight: 'bold',\n            fontFamily: 'Faustina'\n            }}>{getLongLineText(locale.lang, \"covid19_data\", \"heads\", \"country\")}\n          </div>\n```\n\nRemember to **import** all the necessaries depencies the most commonly used in Material UI is '@material-ui/core'.\n\n\n### 2. React-router-dom and react-router\n\nSince our website is a single page website, using react router can help us quickly change between the pages and pass data to different places through **props** or **query** or **params**\n\n```javascript\n  <Route exact path=\"/\" component={HomePage} />\n  <Route exact path=\"/about\" component={About} />\n  <Route exact path=\"/volunteer\" component={Volunteer} />\n  <Route exact path=\"/volunteer/signup\" component={VolunteerSignUp} />\n  <Route exact path=\"/volunteer/signup/success\" component={SuccessVolunteer} />\n```\n\nThe **exact path** will be the link to our pages. For example, if our domain is (this)[https://doctorally-test.herokuapp.com/]. Then if we access https://doctorally-test.herokuapp.com/about, we will get the About page. \n\nThe **Component** we passed in will be rendered if we access that path. So the About Component will be rendered if the About page is accessed. \n\nWhen we want to pass extra information or access a page that is **unique** to each person (that could be a page that we can only access after logged in), we will pass the **params** \"/:id\" into the path.\n\n```javascript\n  <Route exact path=\"/requests/:id\" component={RequestResponse} />\n```\n\nThis means that after the doctors create a request in the **RequestResponse** component, there will be a unique id generated. We can only access this request by having that id.\n\nRemember to wrap the App in the main index.js file in BrowserRouter for the Router to work \n```javascript\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n```\n\n### 3. React hooks: useContext, useEffect, useHistory, useParams\nBeside useState which will obviously be used a lot, we used some additional hooks as listed in the title. \n\n#### 3.1 useContext\nThis is a very efficient way to maintain a website in 2 languages and quickly switch between each other. Our website has 2 languages Vietnamese and English. We will store all the texts in the website by variables \n\n```javascript\nconst ENG = {\n  header: {\n    about: \"About\",\n    volunteer: \"Volunteer\",\n    request_help: \"Request Help\",\n  },\n\n  homepage: {\n    volunteer: {\n      title: \"Volunteer\",\n      description_strong: \"Small actions spread love. \",\n    }\n}\n```\n\nAnd we store all the Vietnamese versions of the words also in variables\n\n```javascript\nconst VIE = {\n  header: {\n    about: \"Về chúng mình\",\n    volunteer: \"Tình nguyện\",\n    request_help: \"Yêu cầu giúp đỡ\",\n  },\n\n  homepage: {\n    volunteer: {\n      title: \"Tình nguyện\",\n      description_strong: \"Hành động nhỏ loan tỏa yêu thương. \",\n    }\n  }\n```\n\nIn order to switch between the 2, we create a context and called it localeContext.\nSo this variable will have 2 values English or Vietnamese, if we want to change all the words to another language we can just change this variable. \n\nThis will be the function that sets up the localeContext. The getText function we browse in all the texts we store upper in the objects **ENG** and **VIE** and get the appropriate words.\n\n```javascript\n\nconst localeContext = React.createContext({ lang: \"ENG\", setLang: () => { } });\n\nconst getText = (loc, key, lang) => {\n  if (lang === \"VIE\") {\n    return VIE[loc][key];\n  }\n  return ENG[loc][key];\n};\n\n```\n\nThis is one application in the website where we get the text and display it inside a button\n\n```javascript\nconst locale = useContext(localeContext);\n <Button>\n  {getText(\"header\", \"supply_stores\", locale.lang)}\n</Button>\n```\n#### 3.2 useEffect\n\nWe use this every time we want to load the data automatically from the server whenever we get into the page. \n\nAssume that we want to perform GET method from the API \"/helpRequest\". This will get all the helprequest data from the Mongodb.\n\n```javascript\n  const [requestData, setRequestData] = useState([]);\n  const [invalidate, setInvalidate] = useState(true);\n  useEffect(() => {\n    if (invalidate) {\n      axios.get(\"/helpRequest\")\n        .then((res) => {\n          // setRequestData(res);\n          console.log(res)\n          setInvalidate(false);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  }, [invalidate]);\n```\n\nThis function will be run everytime the state invalidate is changed. Invalidate is a state to cleanup the function, meaning that this will not be run continuously while we are still in the page but only run when we reload or switch to the page. \nAfter the we perform the **GET** request, we will store the **res** data into the requestData state and set the invalidate to false so that the function will not be called again.\n\n#### 3.3 useHistory, useParams\n\nuseHistory is a React hook that helps us change the page really efficiently. Remember before we have our react-router set up. Here we can imagine the history is our website link and if we are at the main page and want to navigate to about page we can simply do \n\n```javascript\n  const history = useHistory();\n  history.push(\"/about\")\n```\n\nSo similar question to what we have before in react-router, if we want to switch to a page that is unique to each person, what will we do? \n\nHere we assume that we have the id of the page that we want to switch to is **id**. We can push it into the history through params \n\n```javascript\n  const history = useHistory();\n  const handleBoxClick = () => {\n    history.push(`requests/${id}`);\n  };\n```\n\nNow if we switch to the ${domain}/requests/${id} page, we can get the id that we just passed through the params by using the hook useParams\n```javascript\n  const { id } = useParams();\n```\n\n### 4. Authentication\nThis is quite a complicate process that involves that backend as well. First in the frontend we will set up our submit form using Formik (a more efficient form). \n\nThis is the basic form of the username input \n```javascript\n      <Form onSubmit={formik.handleSubmit}>\n        <Form.Group>\n          <Form.Label className=\"code\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"username\"\n            value={formik.values.username}\n            onChange={formik.handleChange}\n            isInvalid={formik.errors.username}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {formik.errors.username}\n          </Form.Control.Feedback>\n        </Form.Group>\n      </Form>\n```\n\nThis big Form will have an **handleSubmit** function that is embedded in the Formik to send all the data \n\nAfter submitting the form, we will call to the login api and after that we will receive a new user with a newly generated JWT token. We will the add this token to the localStorage in order to use the Remember Me function. When we log out, we will delete this jwt token from the localStorage.\n\n```javascript\nconst formik = useFormik({\n  ...\nonSubmit: (values) => {\n      fetchLogin(values.username, values.password, values.role)\n        .then((authUser) => {\n          if (values.rememberMe) {\n            localStorage.setItem(\"jwt\", authUser.token);\n          }\n          setAuthUser(authUser);\n          history.push(\"/\")\n        })\n        .catch(() => {\n          setFailureModalVisible(true);\n        });\n    },\n})\n\n```\n\nWe will do a similar thing to the Register Method\n\n### 5. Custom authentication hook.\nThis is a very useful hook to use when we want to only allow access to a page if the person has authenticated (logged in).\n\n```javascript\nconst withAuth = (WrappedComponent) => (props) => {\n  const { authUser, setAuthUser } = useContext(authCtx);\n  useEffect(() => {\n    if (!authUser) {\n      const jwt = localStorage.getItem('jwt');\n      if (jwt) {\n        fetchProfile(jwt).then((user) => setAuthUser(user));\n      }\n    }\n  }, [authUser, fetchProfile, setAuthUser]);\n\n  if (profileApi.loading) {\n    return <Loading />;\n  }\n  if (authUser !== null) {\n    return <WrappedComponent {...props} />;\n  }\n  return <Auth {...props} />;\n};\n```\n\nWe will store the data of the authenticated user after logging in to a authUser context so that we can access this data everywhere in our app. We will get the jwt in the localStorage and find out the appropriate current user. Then we will pass all the props of the (WrappedComponent) into the withAuth component. So for example if we want that user can only access OfferHelp if they have logged in then we will wrap it up as the following: \n```javascript\nexport default withAuth(OfferHelp);\n```\n\n### 6. API calling from Mapbox, Openstreetmap and custom API. \n\nIn our app, we use Openstreemap API to get the nearby stores from the healthcare worker's locations. So here is what we will do. We will get the input location of the healthcare workers. Then we will use Openstreetmap to convert it into longitude and latitude. After that, we will implement that longitude and latitude into the Mapbox API to get all the shops that are nearby the healthcare's workers locations (I can use Google Map API for this but it is quite costly) \n\nThis is we get the longitude and latitude of the location \n```javascript\nconst fetchNearbyStoreDataLocation = async (location) => {\n  const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${location}&format=json&polygon_geojson=1&addressdetails=1`)\n  const resJson = await response.json()\n  return resJson\n}\n```\n\nThen we will store the data we get from the **fetchNearbyStoreDataLocation** into a state called **locationCordinate**\n\n```javascript\n  const [locationCordinate, setLocationCordinate] = useState({\n    lat: 0,\n    lon: 0\n  })\n   fetchNearbyStoreDataLocation(newQuery)\n      .then((res) => {\n        setLocationCordinate({\n          lat: res[0].lat,\n          lon: res[0].lon\n        })\n```\n\nAfter that, we will get the nearby stores from the location coordinates data using mapbox \n```javascript\nconst fetchNearbyStoreData = async (locationCordinate) => {\n  var tileset = 'mapbox.mapbox-streets-v8'\n  var radius = 2000; //meters\n  var limit = 30; // The maximum amount of results to return\n  var layers = 'poi_label'\n  var query = 'https://api.mapbox.com/v4/' + tileset + '/tilequery/' + locationCordinate.lon + ',' + locationCordinate.lat + '.json?radius=' + radius + '&limit=' + limit + '&layers=' + layers + '&access_token=' + mapboxgl.accessToken\n\n  const response = await fetch(query)\n  const resJson = await response.json()\n  return resJson\n}\n```\n\n### BACKEND\nThe backend is mostly used to handle the API calls that we make in the frontend so we will have 3 main **API calls**\n\n1. Authentication \n2. HelpRequests\n3. Volunteer\n\nWe use these libraries and dependencies: express, mongoose, cors, body-parser, path, jsonwebtoken(jwt). For the database, we will use the online cloud Mongodb in order to deploy it later.\n\n#### 1. Authentication\nFirst we must create the API for both the login and the register request\n```javascript\nrouter.post('/register', (req, res) => {\n  const { username, password, role } = req.body;\n  register(username, password, role)\n    .then((result) => {\n      res.json({ success: true });\n    })\n    .catch((err) => {\n      switch (err.message) {\n        case ERROR.USERNAME_EXISTED:\n          res.status(409).json({ success: false, err: ERROR.USERNAME_EXISTED });\n          break;\n        default:\n          res.status(500).json({ success: false, err: ERROR.INTERNAL_ERROR });\n          break;\n      }\n    });\n});\n\nrouter.post('/login', (req, res) => {\n  const { username, password, role } = req.body;\n  login(username, password, role)\n    .then((user) => {\n      const token = generateJWT(user);\n      res.json({\n        user: user,\n        token: token,\n      });\n    })\n    .catch((err) => {\n      res.status(401).json({ success: false, err: err.message });\n    });\n});\n```\n\nWe will receive the req.body directly from the form that we create in the Frontend by calling the API \"/login\" and \"/register\". In here we can see that there are 2 functions login and register. \n\nFor example for the register function, we will \n  1. check if the user has already existed \n  2. create a newUser with 2 fields username and role(doctor or volunteer)\n  3. generate an encripted password from the password user entered\n  4. save the user to the database\n```javascript\nconst register = async (username, password, role) => {\n  const user = await User.findOne({ username });\n  if (user) throw new Error(ERROR.USERNAME_EXISTED);\n  const newUser = new User({\n    username, role\n  });\n  newUser.generatePassword(password);\n  return newUser.save();\n};\n```\n\n#### 2. HelpRequests\nSo the helpRequest can only be accessed by users will healthcare workers or doctor's role. The doctors will make helpRequest and send it to the server. Once we have the data of the request, we will save all of them in their respective fields in the Mongoose Scheme and save to the Database\n\n``` javascript\nrouter.get(\"/\", (req, res) => {\n  HelpRequest.find((err, help) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.json(help);\n    }\n  });\n});\n\nrouter.post(\"/\", (req, res) => {\n  const data = req.body;\n  const newData = Object.keys(data[0]).filter((key) => data[0][key] == true);\n  const helpRequest = new HelpRequest({\n    medicalSupplies: data[0].medicalSupplies,\n    masks: data[0].masks,\n    ...\n  });\n  helpRequest.save();\n});\n```\n\n#### 3. Volunteer\nThe volunteer is a little bit more complex. There are 2 types of volunteers: volunteers without helping a specific doctor and with helping a specific doctor. For type 1, we can just filled out a form and send it to the server and the information will be saved to the database. However, for type 2, we will need the id of the doctor whose the volunteer is helping, and then push that to the server.\n```javascript\nrouter.get(\"/\", (req, res) => {\n  console.log(req.body);\n  VolunteerRequest.find((err, help) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.json(help);\n    }\n  });\n});\n\nrouter.post(\"/\", (req, res) => {\n  const data = req.body;\n  const newData = Object.keys(data[0]).filter((key)=> data[0][key] == true)\n  const volunteerRequest = new VolunteerRequest({\n    meals: data[0].meals,\n    drinks: data[0].drinks,\n    idDoctor: data[1].idDoctor,\n    ...\n  });\n  volunteerRequest.save();\n```\n\nThis is the end of this post, I hope you enjoy it and learn something new from the post. I would like to thank all my team members Hoang Lam, Tuan Hoang, Hoang Minh and Hong Minh for creating this website together. If you want to check out the website, here is the [link](https://doctorally-test.herokuapp.com/). In the next post, we will see how to deploy a project with a server using heroku.","slug":"Doctorally","published":1,"updated":"2021-06-21T02:21:06.201Z","_id":"ckq5zemsu0006c6sbaodfwplv","comments":1,"layout":"post","photos":[],"link":"","content":"<h2><span id=\"it-has-been-a-long-time-since-i-last-wrote-on-my-blog-so-i-want-to-add-some-usefel-posts-in-my-break-time\">It has been a long time since I last wrote on my blog. So I want to add some usefel posts in my break time</span></h2>\n<p>During the Covid-19 pandemic, me and my friends have created a online platform to connect <strong>healthcare workers</strong> to <strong>volunteers</strong> with their basic needs called Doctorally. Here I am going to explain quickly how we did it.</p>\n<p>Again this is a <strong>MERN</strong> stack. I have explained it here in <a href=\"https://decodecraft.com/CreateBlog/\">this post</a>. I am going to divide the post into 2 parts the <strong>frontend</strong> and the <strong>backend</strong></p>\n<h3><span id=\"frontend\">FRONTEND</span></h3>\n<p>For the frontend the main tools we used was:</p>\n<ol>\n<li>Material UI Framework. You can find the details <a href=\"https://material-ui.com/\" target=\"_blank\" rel=\"noopener\">here</a></li>\n<li>React-router-dom and react-router.</li>\n<li>React hooks: useContext and useEffect</li>\n<li>Authentication</li>\n<li>Custom authentication hook.</li>\n<li>API calling from Mapbox, Openstreetmap and custom API.</li>\n</ol>\n<h3><span id=\"1-material-ui-framework\">1. Material UI Framework</span></h3>\n<p>This framework gives us a very beautiful layout. We can handle or store the data we get from the server by using <strong>Containers</strong> or <strong>Tables</strong> of Material UI.</p>\n<p>We can get all the layouts we want Button, Box, Container, Grid. For example this is a <strong>Table</strong> the that handles that data from an API.</p>\n\n<p>This is a basic set up of the Tables that we are using to list out all the data:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TableContainer className=&#123;classes.container&#125;&gt;</span><br><span class=\"line\">  &lt;Table stickyHeader aria-label=<span class=\"string\">\"sticky table\"</span>&gt;</span><br><span class=\"line\">    &lt;TableHead&gt;</span><br><span class=\"line\">      &lt;TableRow&gt;</span><br><span class=\"line\">        &lt;StyledTableCell align=<span class=\"string\">'center'</span>&gt;</span><br><span class=\"line\">          &lt;div</span><br><span class=\"line\">            style=&#123;&#123;</span><br><span class=\"line\">            fontWeight: <span class=\"string\">'bold'</span>,</span><br><span class=\"line\">            fontFamily: <span class=\"string\">'Faustina'</span></span><br><span class=\"line\">            &#125;&#125;&gt;&#123;getLongLineText(locale.lang, <span class=\"string\">\"covid19_data\"</span>, <span class=\"string\">\"heads\"</span>, <span class=\"string\">\"country\"</span>)&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Remember to <strong>import</strong> all the necessaries depencies the most commonly used in Material UI is ‘@material-ui/core’.</p>\n<h3><span id=\"2-react-router-dom-and-react-router\">2. React-router-dom and react-router</span></h3>\n<p>Since our website is a single page website, using react router can help us quickly change between the pages and pass data to different places through <strong>props</strong> or <strong>query</strong> or <strong>params</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route exact path=<span class=\"string\">\"/\"</span> component=&#123;HomePage&#125; /&gt;</span><br><span class=\"line\">&lt;Route exact path=<span class=\"string\">\"/about\"</span> component=&#123;About&#125; /&gt;</span><br><span class=\"line\">&lt;Route exact path=<span class=\"string\">\"/volunteer\"</span> component=&#123;Volunteer&#125; /&gt;</span><br><span class=\"line\">&lt;Route exact path=<span class=\"string\">\"/volunteer/signup\"</span> component=&#123;VolunteerSignUp&#125; /&gt;</span><br><span class=\"line\">&lt;Route exact path=<span class=\"string\">\"/volunteer/signup/success\"</span> component=&#123;SuccessVolunteer&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>The <strong>exact path</strong> will be the link to our pages. For example, if our domain is (this)[<a href=\"https://doctorally-test.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">https://doctorally-test.herokuapp.com/</a>]. Then if we access <a href=\"https://doctorally-test.herokuapp.com/about\" target=\"_blank\" rel=\"noopener\">https://doctorally-test.herokuapp.com/about</a>, we will get the About page.</p>\n<p>The <strong>Component</strong> we passed in will be rendered if we access that path. So the About Component will be rendered if the About page is accessed.</p>\n<p>When we want to pass extra information or access a page that is <strong>unique</strong> to each person (that could be a page that we can only access after logged in), we will pass the <strong>params</strong> “/:id” into the path.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route exact path=<span class=\"string\">\"/requests/:id\"</span> component=&#123;RequestResponse&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>This means that after the doctors create a request in the <strong>RequestResponse</strong> component, there will be a unique id generated. We can only access this request by having that id.</p>\n<p>Remember to wrap the App in the main index.js file in BrowserRouter for the Router to work</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/BrowserRouter&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"3-react-hooks-usecontext-useeffect-usehistory-useparams\">3. React hooks: useContext, useEffect, useHistory, useParams</span></h3>\n<p>Beside useState which will obviously be used a lot, we used some additional hooks as listed in the title.</p>\n<h4><span id=\"31-usecontext\">3.1 useContext</span></h4>\n<p>This is a very efficient way to maintain a website in 2 languages and quickly switch between each other. Our website has 2 languages Vietnamese and English. We will store all the texts in the website by variables</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ENG = &#123;</span><br><span class=\"line\">  header: &#123;</span><br><span class=\"line\">    about: <span class=\"string\">\"About\"</span>,</span><br><span class=\"line\">    volunteer: <span class=\"string\">\"Volunteer\"</span>,</span><br><span class=\"line\">    request_help: <span class=\"string\">\"Request Help\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  homepage: &#123;</span><br><span class=\"line\">    volunteer: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">\"Volunteer\"</span>,</span><br><span class=\"line\">      description_strong: <span class=\"string\">\"Small actions spread love. \"</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And we store all the Vietnamese versions of the words also in variables</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VIE = &#123;</span><br><span class=\"line\">  header: &#123;</span><br><span class=\"line\">    about: <span class=\"string\">\"Về chúng mình\"</span>,</span><br><span class=\"line\">    volunteer: <span class=\"string\">\"Tình nguyện\"</span>,</span><br><span class=\"line\">    request_help: <span class=\"string\">\"Yêu cầu giúp đỡ\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  homepage: &#123;</span><br><span class=\"line\">    volunteer: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">\"Tình nguyện\"</span>,</span><br><span class=\"line\">      description_strong: <span class=\"string\">\"Hành động nhỏ loan tỏa yêu thương. \"</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>In order to switch between the 2, we create a context and called it localeContext.<br>\nSo this variable will have 2 values English or Vietnamese, if we want to change all the words to another language we can just change this variable.</p>\n<p>This will be the function that sets up the localeContext. The getText function we browse in all the texts we store upper in the objects <strong>ENG</strong> and <strong>VIE</strong> and get the appropriate words.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> localeContext = React.createContext(&#123; <span class=\"attr\">lang</span>: <span class=\"string\">\"ENG\"</span>, <span class=\"attr\">setLang</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; &#125; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getText = <span class=\"function\">(<span class=\"params\">loc, key, lang</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lang === <span class=\"string\">\"VIE\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> VIE[loc][key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ENG[loc][key];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>This is one application in the website where we get the text and display it inside a button</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> locale = useContext(localeContext);</span><br><span class=\"line\"> &lt;Button&gt;</span><br><span class=\"line\">  &#123;getText(<span class=\"string\">\"header\"</span>, <span class=\"string\">\"supply_stores\"</span>, locale.lang)&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Button&gt;</span></span><br></pre></td></tr></table></figure>\n<h4><span id=\"32-useeffect\">3.2 useEffect</span></h4>\n<p>We use this every time we want to load the data automatically from the server whenever we get into the page.</p>\n<p>Assume that we want to perform GET method from the API “/helpRequest”. This will get all the helprequest data from the Mongodb.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [requestData, setRequestData] = useState([]);</span><br><span class=\"line\"><span class=\"keyword\">const</span> [invalidate, setInvalidate] = useState(<span class=\"literal\">true</span>);</span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (invalidate) &#123;</span><br><span class=\"line\">    axios.get(<span class=\"string\">\"/helpRequest\"</span>)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// setRequestData(res);</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">        setInvalidate(<span class=\"literal\">false</span>);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, [invalidate]);</span><br></pre></td></tr></table></figure>\n<p>This function will be run everytime the state invalidate is changed. Invalidate is a state to cleanup the function, meaning that this will not be run continuously while we are still in the page but only run when we reload or switch to the page.<br>\nAfter the we perform the <strong>GET</strong> request, we will store the <strong>res</strong> data into the requestData state and set the invalidate to false so that the function will not be called again.</p>\n<h4><span id=\"33-usehistory-useparams\">3.3 useHistory, useParams</span></h4>\n<p>useHistory is a React hook that helps us change the page really efficiently. Remember before we have our react-router set up. Here we can imagine the history is our website link and if we are at the main page and want to navigate to about page we can simply do</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> history = useHistory();</span><br><span class=\"line\">history.push(<span class=\"string\">\"/about\"</span>)</span><br></pre></td></tr></table></figure>\n<p>So similar question to what we have before in react-router, if we want to switch to a page that is unique to each person, what will we do?</p>\n<p>Here we assume that we have the id of the page that we want to switch to is <strong>id</strong>. We can push it into the history through params</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> history = useHistory();</span><br><span class=\"line\"><span class=\"keyword\">const</span> handleBoxClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  history.push(<span class=\"string\">`requests/<span class=\"subst\">$&#123;id&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Now if we switch to the ${domain}/requests/${id} page, we can get the id that we just passed through the params by using the hook useParams</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; id &#125; = useParams();</span><br></pre></td></tr></table></figure>\n<h3><span id=\"4-authentication\">4. Authentication</span></h3>\n<p>This is quite a complicate process that involves that backend as well. First in the frontend we will set up our submit form using Formik (a more efficient form).</p>\n<p>This is the basic form of the username input</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Form onSubmit=&#123;formik.handleSubmit&#125;&gt;</span><br><span class=\"line\">  &lt;Form.Group&gt;</span><br><span class=\"line\">    &lt;Form.Label className=<span class=\"string\">\"code\"</span>&gt;Username&lt;<span class=\"regexp\">/Form.Label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Form.Control</span></span><br><span class=\"line\"><span class=\"regexp\">      type=\"text\"</span></span><br><span class=\"line\"><span class=\"regexp\">      name=\"username\"</span></span><br><span class=\"line\"><span class=\"regexp\">      value=&#123;formik.values.username&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      onChange=&#123;formik.handleChange&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      isInvalid=&#123;formik.errors.username&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span>&gt;</span><br><span class=\"line\">    &lt;Form.Control.Feedback type=<span class=\"string\">\"invalid\"</span>&gt;</span><br><span class=\"line\">      &#123;formik.errors.username&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Form.Control.Feedback&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Form.Group&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Form&gt;</span></span><br></pre></td></tr></table></figure>\n<p>This big Form will have an <strong>handleSubmit</strong> function that is embedded in the Formik to send all the data</p>\n<p>After submitting the form, we will call to the login api and after that we will receive a new user with a newly generated JWT token. We will the add this token to the localStorage in order to use the Remember Me function. When we log out, we will delete this jwt token from the localStorage.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> formik = useFormik(&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">onSubmit: <span class=\"function\">(<span class=\"params\">values</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      fetchLogin(values.username, values.password, values.role)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">authUser</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (values.rememberMe) &#123;</span><br><span class=\"line\">            localStorage.setItem(<span class=\"string\">\"jwt\"</span>, authUser.token);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          setAuthUser(authUser);</span><br><span class=\"line\">          history.push(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          setFailureModalVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>We will do a similar thing to the Register Method</p>\n<h3><span id=\"5-custom-authentication-hook\">5. Custom authentication hook.</span></h3>\n<p>This is a very useful hook to use when we want to only allow access to a page if the person has authenticated (logged in).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> withAuth = <span class=\"function\">(<span class=\"params\">WrappedComponent</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; authUser, setAuthUser &#125; = useContext(authCtx);</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!authUser) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> jwt = localStorage.getItem(<span class=\"string\">'jwt'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (jwt) &#123;</span><br><span class=\"line\">        fetchProfile(jwt).then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> setAuthUser(user));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [authUser, fetchProfile, setAuthUser]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (profileApi.loading) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;Loading /&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (authUser !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;WrappedComponent &#123;...props&#125; /&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;Auth &#123;...props&#125; /&gt;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>We will store the data of the authenticated user after logging in to a authUser context so that we can access this data everywhere in our app. We will get the jwt in the localStorage and find out the appropriate current user. Then we will pass all the props of the (WrappedComponent) into the withAuth component. So for example if we want that user can only access OfferHelp if they have logged in then we will wrap it up as the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withAuth(OfferHelp);</span><br></pre></td></tr></table></figure>\n<h3><span id=\"6-api-calling-from-mapbox-openstreetmap-and-custom-api\">6. API calling from Mapbox, Openstreetmap and custom API.</span></h3>\n<p>In our app, we use Openstreemap API to get the nearby stores from the healthcare worker’s locations. So here is what we will do. We will get the input location of the healthcare workers. Then we will use Openstreetmap to convert it into longitude and latitude. After that, we will implement that longitude and latitude into the Mapbox API to get all the shops that are nearby the healthcare’s workers locations (I can use Google Map API for this but it is quite costly)</p>\n<p>This is we get the longitude and latitude of the location</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fetchNearbyStoreDataLocation = <span class=\"keyword\">async</span> (location) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"string\">`https://nominatim.openstreetmap.org/search?q=<span class=\"subst\">$&#123;location&#125;</span>&amp;format=json&amp;polygon_geojson=1&amp;addressdetails=1`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> resJson = <span class=\"keyword\">await</span> response.json()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resJson</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Then we will store the data we get from the <strong>fetchNearbyStoreDataLocation</strong> into a state called <strong>locationCordinate</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [locationCordinate, setLocationCordinate] = useState(&#123;</span><br><span class=\"line\">  lat: <span class=\"number\">0</span>,</span><br><span class=\"line\">  lon: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> fetchNearbyStoreDataLocation(newQuery)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      setLocationCordinate(&#123;</span><br><span class=\"line\">        lat: res[<span class=\"number\">0</span>].lat,</span><br><span class=\"line\">        lon: res[<span class=\"number\">0</span>].lon</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>\n<p>After that, we will get the nearby stores from the location coordinates data using mapbox</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fetchNearbyStoreData = <span class=\"keyword\">async</span> (locationCordinate) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tileset = <span class=\"string\">'mapbox.mapbox-streets-v8'</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> radius = <span class=\"number\">2000</span>; <span class=\"comment\">//meters</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> limit = <span class=\"number\">30</span>; <span class=\"comment\">// The maximum amount of results to return</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> layers = <span class=\"string\">'poi_label'</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> query = <span class=\"string\">'https://api.mapbox.com/v4/'</span> + tileset + <span class=\"string\">'/tilequery/'</span> + locationCordinate.lon + <span class=\"string\">','</span> + locationCordinate.lat + <span class=\"string\">'.json?radius='</span> + radius + <span class=\"string\">'&amp;limit='</span> + limit + <span class=\"string\">'&amp;layers='</span> + layers + <span class=\"string\">'&amp;access_token='</span> + mapboxgl.accessToken</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(query)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> resJson = <span class=\"keyword\">await</span> response.json()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resJson</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"backend\">BACKEND</span></h3>\n<p>The backend is mostly used to handle the API calls that we make in the frontend so we will have 3 main <strong>API calls</strong></p>\n<ol>\n<li>Authentication</li>\n<li>HelpRequests</li>\n<li>Volunteer</li>\n</ol>\n<p>We use these libraries and dependencies: express, mongoose, cors, body-parser, path, jsonwebtoken(jwt). For the database, we will use the online cloud Mongodb in order to deploy it later.</p>\n<h4><span id=\"1-authentication\">1. Authentication</span></h4>\n<p>First we must create the API for both the login and the register request</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/register'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; username, password, role &#125; = req.body;</span><br><span class=\"line\">  register(username, password, role)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      res.json(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (err.message) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> ERROR.USERNAME_EXISTED:</span><br><span class=\"line\">          res.status(<span class=\"number\">409</span>).json(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">false</span>, <span class=\"attr\">err</span>: ERROR.USERNAME_EXISTED &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          res.status(<span class=\"number\">500</span>).json(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">false</span>, <span class=\"attr\">err</span>: ERROR.INTERNAL_ERROR &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/login'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; username, password, role &#125; = req.body;</span><br><span class=\"line\">  login(username, password, role)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> token = generateJWT(user);</span><br><span class=\"line\">      res.json(&#123;</span><br><span class=\"line\">        user: user,</span><br><span class=\"line\">        token: token,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      res.status(<span class=\"number\">401</span>).json(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">false</span>, <span class=\"attr\">err</span>: err.message &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>We will receive the req.body directly from the form that we create in the Frontend by calling the API “/login” and “/register”. In here we can see that there are 2 functions login and register.</p>\n<p>For example for the register function, we will</p>\n<ol>\n<li>check if the user has already existed</li>\n<li>create a newUser with 2 fields username and role(doctor or volunteer)</li>\n<li>generate an encripted password from the password user entered</li>\n<li>save the user to the database</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> register = <span class=\"keyword\">async</span> (username, password, role) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"keyword\">await</span> User.findOne(&#123; username &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (user) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(ERROR.USERNAME_EXISTED);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newUser = <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">    username, role</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  newUser.generatePassword(password);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newUser.save();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"2-helprequests\">2. HelpRequests</span></h4>\n<p>So the helpRequest can only be accessed by users will healthcare workers or doctor’s role. The doctors will make helpRequest and send it to the server. Once we have the data of the request, we will save all of them in their respective fields in the Mongoose Scheme and save to the Database</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  HelpRequest.find(<span class=\"function\">(<span class=\"params\">err, help</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res.json(help);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">\"/\"</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = req.body;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newData = <span class=\"built_in\">Object</span>.keys(data[<span class=\"number\">0</span>]).filter(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> data[<span class=\"number\">0</span>][key] == <span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> helpRequest = <span class=\"keyword\">new</span> HelpRequest(&#123;</span><br><span class=\"line\">    medicalSupplies: data[<span class=\"number\">0</span>].medicalSupplies,</span><br><span class=\"line\">    masks: data[<span class=\"number\">0</span>].masks,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  helpRequest.save();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4><span id=\"3-volunteer\">3. Volunteer</span></h4>\n<p>The volunteer is a little bit more complex. There are 2 types of volunteers: volunteers without helping a specific doctor and with helping a specific doctor. For type 1, we can just filled out a form and send it to the server and the information will be saved to the database. However, for type 2, we will need the id of the doctor whose the volunteer is helping, and then push that to the server.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.body);</span><br><span class=\"line\">  VolunteerRequest.find(<span class=\"function\">(<span class=\"params\">err, help</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res.json(help);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">\"/\"</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = req.body;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newData = <span class=\"built_in\">Object</span>.keys(data[<span class=\"number\">0</span>]).filter(<span class=\"function\">(<span class=\"params\">key</span>)=&gt;</span> data[<span class=\"number\">0</span>][key] == <span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> volunteerRequest = <span class=\"keyword\">new</span> VolunteerRequest(&#123;</span><br><span class=\"line\">    meals: data[<span class=\"number\">0</span>].meals,</span><br><span class=\"line\">    drinks: data[<span class=\"number\">0</span>].drinks,</span><br><span class=\"line\">    idDoctor: data[<span class=\"number\">1</span>].idDoctor,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  volunteerRequest.save();</span><br></pre></td></tr></table></figure>\n<p>This is the end of this post, I hope you enjoy it and learn something new from the post. I would like to thank all my team members Hoang Lam, Tuan Hoang, Hoang Minh and Hong Minh for creating this website together. If you want to check out the website, here is the <a href=\"https://doctorally-test.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">link</a>. In the next post, we will see how to deploy a project with a server using heroku.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>It has been a long time since I last wrote on my blog. So I want to add some usefel posts in my break time</h2>\n<p>During the Covid-19 pandemic, me and my friends have created a online platform to connect <strong>healthcare workers</strong> to <strong>volunteers</strong> with their basic needs called Doctorally. Here I am going to explain quickly how we did it.</p>\n<p>Again this is a <strong>MERN</strong> stack. I have explained it here in <a href=\"https://decodecraft.com/CreateBlog/\">this post</a>. I am going to divide the post into 2 parts the <strong>frontend</strong> and the <strong>backend</strong></p>\n<h3>FRONTEND</h3>\n<p>For the frontend the main tools we used was:</p>\n<ol>\n<li>Material UI Framework. You can find the details <a href=\"https://material-ui.com/\" target=\"_blank\" rel=\"noopener\">here</a></li>\n<li>React-router-dom and react-router.</li>\n<li>React hooks: useContext and useEffect</li>\n<li>Authentication</li>\n<li>Custom authentication hook.</li>\n<li>API calling from Mapbox, Openstreetmap and custom API.</li>\n</ol>\n<h3>1. Material UI Framework</h3>\n<p>This framework gives us a very beautiful layout. We can handle or store the data we get from the server by using <strong>Containers</strong> or <strong>Tables</strong> of Material UI.</p>\n<p>We can get all the layouts we want Button, Box, Container, Grid. For example this is a <strong>Table</strong> the that handles that data from an API.</p>\n\n<p>This is a basic set up of the Tables that we are using to list out all the data:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TableContainer className=&#123;classes.container&#125;&gt;</span><br><span class=\"line\">  &lt;Table stickyHeader aria-label=<span class=\"string\">\"sticky table\"</span>&gt;</span><br><span class=\"line\">    &lt;TableHead&gt;</span><br><span class=\"line\">      &lt;TableRow&gt;</span><br><span class=\"line\">        &lt;StyledTableCell align=<span class=\"string\">'center'</span>&gt;</span><br><span class=\"line\">          &lt;div</span><br><span class=\"line\">            style=&#123;&#123;</span><br><span class=\"line\">            fontWeight: <span class=\"string\">'bold'</span>,</span><br><span class=\"line\">            fontFamily: <span class=\"string\">'Faustina'</span></span><br><span class=\"line\">            &#125;&#125;&gt;&#123;getLongLineText(locale.lang, <span class=\"string\">\"covid19_data\"</span>, <span class=\"string\">\"heads\"</span>, <span class=\"string\">\"country\"</span>)&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Remember to <strong>import</strong> all the necessaries depencies the most commonly used in Material UI is ‘@material-ui/core’.</p>\n<h3>2. React-router-dom and react-router</h3>\n<p>Since our website is a single page website, using react router can help us quickly change between the pages and pass data to different places through <strong>props</strong> or <strong>query</strong> or <strong>params</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route exact path=<span class=\"string\">\"/\"</span> component=&#123;HomePage&#125; /&gt;</span><br><span class=\"line\">&lt;Route exact path=<span class=\"string\">\"/about\"</span> component=&#123;About&#125; /&gt;</span><br><span class=\"line\">&lt;Route exact path=<span class=\"string\">\"/volunteer\"</span> component=&#123;Volunteer&#125; /&gt;</span><br><span class=\"line\">&lt;Route exact path=<span class=\"string\">\"/volunteer/signup\"</span> component=&#123;VolunteerSignUp&#125; /&gt;</span><br><span class=\"line\">&lt;Route exact path=<span class=\"string\">\"/volunteer/signup/success\"</span> component=&#123;SuccessVolunteer&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>The <strong>exact path</strong> will be the link to our pages. For example, if our domain is (this)[<a href=\"https://doctorally-test.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">https://doctorally-test.herokuapp.com/</a>]. Then if we access <a href=\"https://doctorally-test.herokuapp.com/about\" target=\"_blank\" rel=\"noopener\">https://doctorally-test.herokuapp.com/about</a>, we will get the About page.</p>\n<p>The <strong>Component</strong> we passed in will be rendered if we access that path. So the About Component will be rendered if the About page is accessed.</p>\n<p>When we want to pass extra information or access a page that is <strong>unique</strong> to each person (that could be a page that we can only access after logged in), we will pass the <strong>params</strong> “/:id” into the path.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Route exact path=<span class=\"string\">\"/requests/:id\"</span> component=&#123;RequestResponse&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>This means that after the doctors create a request in the <strong>RequestResponse</strong> component, there will be a unique id generated. We can only access this request by having that id.</p>\n<p>Remember to wrap the App in the main index.js file in BrowserRouter for the Router to work</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/BrowserRouter&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>3. React hooks: useContext, useEffect, useHistory, useParams</h3>\n<p>Beside useState which will obviously be used a lot, we used some additional hooks as listed in the title.</p>\n<h4>3.1 useContext</h4>\n<p>This is a very efficient way to maintain a website in 2 languages and quickly switch between each other. Our website has 2 languages Vietnamese and English. We will store all the texts in the website by variables</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ENG = &#123;</span><br><span class=\"line\">  header: &#123;</span><br><span class=\"line\">    about: <span class=\"string\">\"About\"</span>,</span><br><span class=\"line\">    volunteer: <span class=\"string\">\"Volunteer\"</span>,</span><br><span class=\"line\">    request_help: <span class=\"string\">\"Request Help\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  homepage: &#123;</span><br><span class=\"line\">    volunteer: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">\"Volunteer\"</span>,</span><br><span class=\"line\">      description_strong: <span class=\"string\">\"Small actions spread love. \"</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And we store all the Vietnamese versions of the words also in variables</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VIE = &#123;</span><br><span class=\"line\">  header: &#123;</span><br><span class=\"line\">    about: <span class=\"string\">\"Về chúng mình\"</span>,</span><br><span class=\"line\">    volunteer: <span class=\"string\">\"Tình nguyện\"</span>,</span><br><span class=\"line\">    request_help: <span class=\"string\">\"Yêu cầu giúp đỡ\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  homepage: &#123;</span><br><span class=\"line\">    volunteer: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">\"Tình nguyện\"</span>,</span><br><span class=\"line\">      description_strong: <span class=\"string\">\"Hành động nhỏ loan tỏa yêu thương. \"</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>In order to switch between the 2, we create a context and called it localeContext.<br>\nSo this variable will have 2 values English or Vietnamese, if we want to change all the words to another language we can just change this variable.</p>\n<p>This will be the function that sets up the localeContext. The getText function we browse in all the texts we store upper in the objects <strong>ENG</strong> and <strong>VIE</strong> and get the appropriate words.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> localeContext = React.createContext(&#123; <span class=\"attr\">lang</span>: <span class=\"string\">\"ENG\"</span>, <span class=\"attr\">setLang</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; &#125; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getText = <span class=\"function\">(<span class=\"params\">loc, key, lang</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (lang === <span class=\"string\">\"VIE\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> VIE[loc][key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ENG[loc][key];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>This is one application in the website where we get the text and display it inside a button</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> locale = useContext(localeContext);</span><br><span class=\"line\"> &lt;Button&gt;</span><br><span class=\"line\">  &#123;getText(<span class=\"string\">\"header\"</span>, <span class=\"string\">\"supply_stores\"</span>, locale.lang)&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Button&gt;</span></span><br></pre></td></tr></table></figure>\n<h4>3.2 useEffect</h4>\n<p>We use this every time we want to load the data automatically from the server whenever we get into the page.</p>\n<p>Assume that we want to perform GET method from the API “/helpRequest”. This will get all the helprequest data from the Mongodb.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [requestData, setRequestData] = useState([]);</span><br><span class=\"line\"><span class=\"keyword\">const</span> [invalidate, setInvalidate] = useState(<span class=\"literal\">true</span>);</span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (invalidate) &#123;</span><br><span class=\"line\">    axios.get(<span class=\"string\">\"/helpRequest\"</span>)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// setRequestData(res);</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">        setInvalidate(<span class=\"literal\">false</span>);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, [invalidate]);</span><br></pre></td></tr></table></figure>\n<p>This function will be run everytime the state invalidate is changed. Invalidate is a state to cleanup the function, meaning that this will not be run continuously while we are still in the page but only run when we reload or switch to the page.<br>\nAfter the we perform the <strong>GET</strong> request, we will store the <strong>res</strong> data into the requestData state and set the invalidate to false so that the function will not be called again.</p>\n<h4>3.3 useHistory, useParams</h4>\n<p>useHistory is a React hook that helps us change the page really efficiently. Remember before we have our react-router set up. Here we can imagine the history is our website link and if we are at the main page and want to navigate to about page we can simply do</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> history = useHistory();</span><br><span class=\"line\">history.push(<span class=\"string\">\"/about\"</span>)</span><br></pre></td></tr></table></figure>\n<p>So similar question to what we have before in react-router, if we want to switch to a page that is unique to each person, what will we do?</p>\n<p>Here we assume that we have the id of the page that we want to switch to is <strong>id</strong>. We can push it into the history through params</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> history = useHistory();</span><br><span class=\"line\"><span class=\"keyword\">const</span> handleBoxClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  history.push(<span class=\"string\">`requests/<span class=\"subst\">$&#123;id&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Now if we switch to the ${domain}/requests/${id} page, we can get the id that we just passed through the params by using the hook useParams</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; id &#125; = useParams();</span><br></pre></td></tr></table></figure>\n<h3>4. Authentication</h3>\n<p>This is quite a complicate process that involves that backend as well. First in the frontend we will set up our submit form using Formik (a more efficient form).</p>\n<p>This is the basic form of the username input</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Form onSubmit=&#123;formik.handleSubmit&#125;&gt;</span><br><span class=\"line\">  &lt;Form.Group&gt;</span><br><span class=\"line\">    &lt;Form.Label className=<span class=\"string\">\"code\"</span>&gt;Username&lt;<span class=\"regexp\">/Form.Label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Form.Control</span></span><br><span class=\"line\"><span class=\"regexp\">      type=\"text\"</span></span><br><span class=\"line\"><span class=\"regexp\">      name=\"username\"</span></span><br><span class=\"line\"><span class=\"regexp\">      value=&#123;formik.values.username&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      onChange=&#123;formik.handleChange&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">      isInvalid=&#123;formik.errors.username&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span>&gt;</span><br><span class=\"line\">    &lt;Form.Control.Feedback type=<span class=\"string\">\"invalid\"</span>&gt;</span><br><span class=\"line\">      &#123;formik.errors.username&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Form.Control.Feedback&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Form.Group&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Form&gt;</span></span><br></pre></td></tr></table></figure>\n<p>This big Form will have an <strong>handleSubmit</strong> function that is embedded in the Formik to send all the data</p>\n<p>After submitting the form, we will call to the login api and after that we will receive a new user with a newly generated JWT token. We will the add this token to the localStorage in order to use the Remember Me function. When we log out, we will delete this jwt token from the localStorage.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> formik = useFormik(&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">onSubmit: <span class=\"function\">(<span class=\"params\">values</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      fetchLogin(values.username, values.password, values.role)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">authUser</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (values.rememberMe) &#123;</span><br><span class=\"line\">            localStorage.setItem(<span class=\"string\">\"jwt\"</span>, authUser.token);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          setAuthUser(authUser);</span><br><span class=\"line\">          history.push(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          setFailureModalVisible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>We will do a similar thing to the Register Method</p>\n<h3>5. Custom authentication hook.</h3>\n<p>This is a very useful hook to use when we want to only allow access to a page if the person has authenticated (logged in).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> withAuth = <span class=\"function\">(<span class=\"params\">WrappedComponent</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; authUser, setAuthUser &#125; = useContext(authCtx);</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!authUser) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> jwt = localStorage.getItem(<span class=\"string\">'jwt'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (jwt) &#123;</span><br><span class=\"line\">        fetchProfile(jwt).then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> setAuthUser(user));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [authUser, fetchProfile, setAuthUser]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (profileApi.loading) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;Loading /&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (authUser !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;WrappedComponent &#123;...props&#125; /&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;Auth &#123;...props&#125; /&gt;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>We will store the data of the authenticated user after logging in to a authUser context so that we can access this data everywhere in our app. We will get the jwt in the localStorage and find out the appropriate current user. Then we will pass all the props of the (WrappedComponent) into the withAuth component. So for example if we want that user can only access OfferHelp if they have logged in then we will wrap it up as the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withAuth(OfferHelp);</span><br></pre></td></tr></table></figure>\n<h3>6. API calling from Mapbox, Openstreetmap and custom API.</h3>\n<p>In our app, we use Openstreemap API to get the nearby stores from the healthcare worker’s locations. So here is what we will do. We will get the input location of the healthcare workers. Then we will use Openstreetmap to convert it into longitude and latitude. After that, we will implement that longitude and latitude into the Mapbox API to get all the shops that are nearby the healthcare’s workers locations (I can use Google Map API for this but it is quite costly)</p>\n<p>This is we get the longitude and latitude of the location</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fetchNearbyStoreDataLocation = <span class=\"keyword\">async</span> (location) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"string\">`https://nominatim.openstreetmap.org/search?q=<span class=\"subst\">$&#123;location&#125;</span>&amp;format=json&amp;polygon_geojson=1&amp;addressdetails=1`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> resJson = <span class=\"keyword\">await</span> response.json()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resJson</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Then we will store the data we get from the <strong>fetchNearbyStoreDataLocation</strong> into a state called <strong>locationCordinate</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [locationCordinate, setLocationCordinate] = useState(&#123;</span><br><span class=\"line\">  lat: <span class=\"number\">0</span>,</span><br><span class=\"line\">  lon: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> fetchNearbyStoreDataLocation(newQuery)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      setLocationCordinate(&#123;</span><br><span class=\"line\">        lat: res[<span class=\"number\">0</span>].lat,</span><br><span class=\"line\">        lon: res[<span class=\"number\">0</span>].lon</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>\n<p>After that, we will get the nearby stores from the location coordinates data using mapbox</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fetchNearbyStoreData = <span class=\"keyword\">async</span> (locationCordinate) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tileset = <span class=\"string\">'mapbox.mapbox-streets-v8'</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> radius = <span class=\"number\">2000</span>; <span class=\"comment\">//meters</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> limit = <span class=\"number\">30</span>; <span class=\"comment\">// The maximum amount of results to return</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> layers = <span class=\"string\">'poi_label'</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> query = <span class=\"string\">'https://api.mapbox.com/v4/'</span> + tileset + <span class=\"string\">'/tilequery/'</span> + locationCordinate.lon + <span class=\"string\">','</span> + locationCordinate.lat + <span class=\"string\">'.json?radius='</span> + radius + <span class=\"string\">'&amp;limit='</span> + limit + <span class=\"string\">'&amp;layers='</span> + layers + <span class=\"string\">'&amp;access_token='</span> + mapboxgl.accessToken</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(query)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> resJson = <span class=\"keyword\">await</span> response.json()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resJson</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>BACKEND</h3>\n<p>The backend is mostly used to handle the API calls that we make in the frontend so we will have 3 main <strong>API calls</strong></p>\n<ol>\n<li>Authentication</li>\n<li>HelpRequests</li>\n<li>Volunteer</li>\n</ol>\n<p>We use these libraries and dependencies: express, mongoose, cors, body-parser, path, jsonwebtoken(jwt). For the database, we will use the online cloud Mongodb in order to deploy it later.</p>\n<h4>1. Authentication</h4>\n<p>First we must create the API for both the login and the register request</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/register'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; username, password, role &#125; = req.body;</span><br><span class=\"line\">  register(username, password, role)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      res.json(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (err.message) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> ERROR.USERNAME_EXISTED:</span><br><span class=\"line\">          res.status(<span class=\"number\">409</span>).json(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">false</span>, <span class=\"attr\">err</span>: ERROR.USERNAME_EXISTED &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          res.status(<span class=\"number\">500</span>).json(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">false</span>, <span class=\"attr\">err</span>: ERROR.INTERNAL_ERROR &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/login'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; username, password, role &#125; = req.body;</span><br><span class=\"line\">  login(username, password, role)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> token = generateJWT(user);</span><br><span class=\"line\">      res.json(&#123;</span><br><span class=\"line\">        user: user,</span><br><span class=\"line\">        token: token,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      res.status(<span class=\"number\">401</span>).json(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">false</span>, <span class=\"attr\">err</span>: err.message &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>We will receive the req.body directly from the form that we create in the Frontend by calling the API “/login” and “/register”. In here we can see that there are 2 functions login and register.</p>\n<p>For example for the register function, we will</p>\n<ol>\n<li>check if the user has already existed</li>\n<li>create a newUser with 2 fields username and role(doctor or volunteer)</li>\n<li>generate an encripted password from the password user entered</li>\n<li>save the user to the database</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> register = <span class=\"keyword\">async</span> (username, password, role) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"keyword\">await</span> User.findOne(&#123; username &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (user) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(ERROR.USERNAME_EXISTED);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newUser = <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">    username, role</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  newUser.generatePassword(password);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newUser.save();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4>2. HelpRequests</h4>\n<p>So the helpRequest can only be accessed by users will healthcare workers or doctor’s role. The doctors will make helpRequest and send it to the server. Once we have the data of the request, we will save all of them in their respective fields in the Mongoose Scheme and save to the Database</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  HelpRequest.find(<span class=\"function\">(<span class=\"params\">err, help</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res.json(help);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">\"/\"</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = req.body;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newData = <span class=\"built_in\">Object</span>.keys(data[<span class=\"number\">0</span>]).filter(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> data[<span class=\"number\">0</span>][key] == <span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> helpRequest = <span class=\"keyword\">new</span> HelpRequest(&#123;</span><br><span class=\"line\">    medicalSupplies: data[<span class=\"number\">0</span>].medicalSupplies,</span><br><span class=\"line\">    masks: data[<span class=\"number\">0</span>].masks,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  helpRequest.save();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4>3. Volunteer</h4>\n<p>The volunteer is a little bit more complex. There are 2 types of volunteers: volunteers without helping a specific doctor and with helping a specific doctor. For type 1, we can just filled out a form and send it to the server and the information will be saved to the database. However, for type 2, we will need the id of the doctor whose the volunteer is helping, and then push that to the server.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.body);</span><br><span class=\"line\">  VolunteerRequest.find(<span class=\"function\">(<span class=\"params\">err, help</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res.json(help);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">\"/\"</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = req.body;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newData = <span class=\"built_in\">Object</span>.keys(data[<span class=\"number\">0</span>]).filter(<span class=\"function\">(<span class=\"params\">key</span>)=&gt;</span> data[<span class=\"number\">0</span>][key] == <span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> volunteerRequest = <span class=\"keyword\">new</span> VolunteerRequest(&#123;</span><br><span class=\"line\">    meals: data[<span class=\"number\">0</span>].meals,</span><br><span class=\"line\">    drinks: data[<span class=\"number\">0</span>].drinks,</span><br><span class=\"line\">    idDoctor: data[<span class=\"number\">1</span>].idDoctor,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  volunteerRequest.save();</span><br></pre></td></tr></table></figure>\n<p>This is the end of this post, I hope you enjoy it and learn something new from the post. I would like to thank all my team members Hoang Lam, Tuan Hoang, Hoang Minh and Hong Minh for creating this website together. If you want to check out the website, here is the <a href=\"https://doctorally-test.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">link</a>. In the next post, we will see how to deploy a project with a server using heroku.</p>\n"},{"title":"Post#1 How I started coding ...","catalog":true,"date":"2020-03-26T15:19:19.000Z","subtitle":"4 min read","header-img":"demo.jpg","_content":"\n## 19/6/2017\n\n### This is my first blog ever !! Even though I am just still a beginner in programming, I already had two years of intensive coding and I hope you will enjoy the experiences I have to share\n\nI gotta say I didnt start **programming** because all of the sayings such as \"Job warranty\", \"This is a super hot suject\", \"You will be super rich\",...\n\nIt all began while I was playing computer games at home, chilling after finishing the intense highschool entrance test. Just as my screen was grey in the middle of a League of Legends match, I got a call from my best friend.\n\n\"Wanna join a coding class? Its about to start\", he said \n\nThen all of the sudden, the then ever-rising **competitiveness** with my friends (I used to think whatever they knew I must learn as well) had urged me to abandon my game, which caused me to drop some rank points :(, and head straight to the class in HUS\n\nAnd my passion for coding all started in this website \n\n{% asset_img codefun.png %}\n\nThis is a common website for most informatics majors in HUS and since I took this summer class, I sneaked an account on Codefun. \n\nMy first lines of code, pretty stupid common error right :)) But I know as a beginner then I was sympathized by most\n\n{% asset_img firstcode.PNG %}\n\nAfter that it were some of the most **passionate** days of my life. I could feel every problem solved was exciting. The minute I saw each green tick on each problem was a reward for all the instructions in our secret book, all the stackoverflow, all the lines of code we minutely copied online not understanding why it didnt work. \n\nIt was quite a hectic summer but when the new school year was about to come, I left all the passion for coding behind and focused on studying Math (a thing that I still both regret and am grateful for). I was in the National Mathematics Team twice but got the honorable prize twice, quite ashamed :)) \n\nThen, the passion for coding in me arose again when I saw this really cool Codeathon from Techkids (Mindx now) and I was really grateful for having seen that advertisement. I immediately signed up for the **2-day** codecamp (sounds weird) but they were 2 days of 24 hours coding and learning about the thing that made me love coding today **web-dev**. \n\nIn the end, after the successful camp (we won first place :)), my passion for web-dev and coding in general was **ignited** again... Here are some of the first html, css and javascript I designed for the codeathon:\n\n{% asset_img design1.PNG %}\n\nPretty cool right ! \n\nIn summary, I studied different languages such as python, java, c++ (for the sake of learning **algorithms**), and my specialities are **javascript and React** so you will expect many posts related to these 2 languages. \n\nEven though I am not any professional developers or informatics major students, I believe on this blog you will find a lot of helpful **advice and experience** that I gathered during my 2 years of learning web-dev.\n\n### Hope you enjoy it!","source":"_posts/Intro.md","raw":"---\ntitle:  Post#1 How I started coding ... \ncatalog: true\ndate: 2020-03-26 22:19:19\nsubtitle: 4 min read\nheader-img: \"demo.jpg\"\ntags: intro \n---\n\n## 19/6/2017\n\n### This is my first blog ever !! Even though I am just still a beginner in programming, I already had two years of intensive coding and I hope you will enjoy the experiences I have to share\n\nI gotta say I didnt start **programming** because all of the sayings such as \"Job warranty\", \"This is a super hot suject\", \"You will be super rich\",...\n\nIt all began while I was playing computer games at home, chilling after finishing the intense highschool entrance test. Just as my screen was grey in the middle of a League of Legends match, I got a call from my best friend.\n\n\"Wanna join a coding class? Its about to start\", he said \n\nThen all of the sudden, the then ever-rising **competitiveness** with my friends (I used to think whatever they knew I must learn as well) had urged me to abandon my game, which caused me to drop some rank points :(, and head straight to the class in HUS\n\nAnd my passion for coding all started in this website \n\n{% asset_img codefun.png %}\n\nThis is a common website for most informatics majors in HUS and since I took this summer class, I sneaked an account on Codefun. \n\nMy first lines of code, pretty stupid common error right :)) But I know as a beginner then I was sympathized by most\n\n{% asset_img firstcode.PNG %}\n\nAfter that it were some of the most **passionate** days of my life. I could feel every problem solved was exciting. The minute I saw each green tick on each problem was a reward for all the instructions in our secret book, all the stackoverflow, all the lines of code we minutely copied online not understanding why it didnt work. \n\nIt was quite a hectic summer but when the new school year was about to come, I left all the passion for coding behind and focused on studying Math (a thing that I still both regret and am grateful for). I was in the National Mathematics Team twice but got the honorable prize twice, quite ashamed :)) \n\nThen, the passion for coding in me arose again when I saw this really cool Codeathon from Techkids (Mindx now) and I was really grateful for having seen that advertisement. I immediately signed up for the **2-day** codecamp (sounds weird) but they were 2 days of 24 hours coding and learning about the thing that made me love coding today **web-dev**. \n\nIn the end, after the successful camp (we won first place :)), my passion for web-dev and coding in general was **ignited** again... Here are some of the first html, css and javascript I designed for the codeathon:\n\n{% asset_img design1.PNG %}\n\nPretty cool right ! \n\nIn summary, I studied different languages such as python, java, c++ (for the sake of learning **algorithms**), and my specialities are **javascript and React** so you will expect many posts related to these 2 languages. \n\nEven though I am not any professional developers or informatics major students, I believe on this blog you will find a lot of helpful **advice and experience** that I gathered during my 2 years of learning web-dev.\n\n### Hope you enjoy it!","slug":"Intro","published":1,"updated":"2021-06-21T02:21:36.674Z","_id":"ckq5zemt10008c6sb3b5vot94","comments":1,"layout":"post","photos":[],"link":"","content":"<h2><span id=\"1962017\">19/6/2017</span></h2>\n<h3><span id=\"this-is-my-first-blog-ever-even-though-i-am-just-still-a-beginner-in-programming-i-already-had-two-years-of-intensive-coding-and-i-hope-you-will-enjoy-the-experiences-i-have-to-share\">This is my first blog ever !! Even though I am just still a beginner in programming, I already had two years of intensive coding and I hope you will enjoy the experiences I have to share</span></h3>\n<p>I gotta say I didnt start <strong>programming</strong> because all of the sayings such as “Job warranty”, “This is a super hot suject”, “You will be super rich”,…</p>\n<p>It all began while I was playing computer games at home, chilling after finishing the intense highschool entrance test. Just as my screen was grey in the middle of a League of Legends match, I got a call from my best friend.</p>\n<p>“Wanna join a coding class? Its about to start”, he said</p>\n<p>Then all of the sudden, the then ever-rising <strong>competitiveness</strong> with my friends (I used to think whatever they knew I must learn as well) had urged me to abandon my game, which caused me to drop some rank points :(, and head straight to the class in HUS</p>\n<p>And my passion for coding all started in this website</p>\n<img src=\"/Intro/codefun.png\">\n<p>This is a common website for most informatics majors in HUS and since I took this summer class, I sneaked an account on Codefun.</p>\n<p>My first lines of code, pretty stupid common error right :)) But I know as a beginner then I was sympathized by most</p>\n<img src=\"/Intro/firstcode.PNG\">\n<p>After that it were some of the most <strong>passionate</strong> days of my life. I could feel every problem solved was exciting. The minute I saw each green tick on each problem was a reward for all the instructions in our secret book, all the stackoverflow, all the lines of code we minutely copied online not understanding why it didnt work.</p>\n<p>It was quite a hectic summer but when the new school year was about to come, I left all the passion for coding behind and focused on studying Math (a thing that I still both regret and am grateful for). I was in the National Mathematics Team twice but got the honorable prize twice, quite ashamed :))</p>\n<p>Then, the passion for coding in me arose again when I saw this really cool Codeathon from Techkids (Mindx now) and I was really grateful for having seen that advertisement. I immediately signed up for the <strong>2-day</strong> codecamp (sounds weird) but they were 2 days of 24 hours coding and learning about the thing that made me love coding today <strong>web-dev</strong>.</p>\n<p>In the end, after the successful camp (we won first place :)), my passion for web-dev and coding in general was <strong>ignited</strong> again… Here are some of the first html, css and javascript I designed for the codeathon:</p>\n<img src=\"/Intro/design1.PNG\">\n<p>Pretty cool right !</p>\n<p>In summary, I studied different languages such as python, java, c++ (for the sake of learning <strong>algorithms</strong>), and my specialities are <strong>javascript and React</strong> so you will expect many posts related to these 2 languages.</p>\n<p>Even though I am not any professional developers or informatics major students, I believe on this blog you will find a lot of helpful <strong>advice and experience</strong> that I gathered during my 2 years of learning web-dev.</p>\n<h3><span id=\"hope-you-enjoy-it\">Hope you enjoy it!</span></h3>\n","site":{"data":{}},"excerpt":"","more":"<h2>19/6/2017</h2>\n<h3>This is my first blog ever !! Even though I am just still a beginner in programming, I already had two years of intensive coding and I hope you will enjoy the experiences I have to share</h3>\n<p>I gotta say I didnt start <strong>programming</strong> because all of the sayings such as “Job warranty”, “This is a super hot suject”, “You will be super rich”,…</p>\n<p>It all began while I was playing computer games at home, chilling after finishing the intense highschool entrance test. Just as my screen was grey in the middle of a League of Legends match, I got a call from my best friend.</p>\n<p>“Wanna join a coding class? Its about to start”, he said</p>\n<p>Then all of the sudden, the then ever-rising <strong>competitiveness</strong> with my friends (I used to think whatever they knew I must learn as well) had urged me to abandon my game, which caused me to drop some rank points :(, and head straight to the class in HUS</p>\n<p>And my passion for coding all started in this website</p>\n<img src=\"/Intro/codefun.png\">\n<p>This is a common website for most informatics majors in HUS and since I took this summer class, I sneaked an account on Codefun.</p>\n<p>My first lines of code, pretty stupid common error right :)) But I know as a beginner then I was sympathized by most</p>\n<img src=\"/Intro/firstcode.PNG\">\n<p>After that it were some of the most <strong>passionate</strong> days of my life. I could feel every problem solved was exciting. The minute I saw each green tick on each problem was a reward for all the instructions in our secret book, all the stackoverflow, all the lines of code we minutely copied online not understanding why it didnt work.</p>\n<p>It was quite a hectic summer but when the new school year was about to come, I left all the passion for coding behind and focused on studying Math (a thing that I still both regret and am grateful for). I was in the National Mathematics Team twice but got the honorable prize twice, quite ashamed :))</p>\n<p>Then, the passion for coding in me arose again when I saw this really cool Codeathon from Techkids (Mindx now) and I was really grateful for having seen that advertisement. I immediately signed up for the <strong>2-day</strong> codecamp (sounds weird) but they were 2 days of 24 hours coding and learning about the thing that made me love coding today <strong>web-dev</strong>.</p>\n<p>In the end, after the successful camp (we won first place :)), my passion for web-dev and coding in general was <strong>ignited</strong> again… Here are some of the first html, css and javascript I designed for the codeathon:</p>\n<img src=\"/Intro/design1.PNG\">\n<p>Pretty cool right !</p>\n<p>In summary, I studied different languages such as python, java, c++ (for the sake of learning <strong>algorithms</strong>), and my specialities are <strong>javascript and React</strong> so you will expect many posts related to these 2 languages.</p>\n<p>Even though I am not any professional developers or informatics major students, I believe on this blog you will find a lot of helpful <strong>advice and experience</strong> that I gathered during my 2 years of learning web-dev.</p>\n<h3>Hope you enjoy it!</h3>\n"},{"title":"Post#5 Nodejs, Reactjs Heroku Deployment","catalog":true,"date":"2020-10-18T04:41:25.000Z","subtitle":"10-min read","header-img":"flask2.jpg","readtime":null,"_content":"\n## Here in this blog, I will show you how I usually deploy a website with server using Heroku. Hope you enjoy it!\n\nIf you have a static website or website with functions only in the frontend deployment is not that difficult. There are 3 ways that I usually use. \n\n1. Using the Git deployment in Github\nIf you get in the Github setting page, you can scroll down to the Github Pages and publish your site directly from the whichever branch and folder you want. \n\n2. Using Heroku deployment\nYou can check this [article](https://devcenter.heroku.com/articles/git) to see how to deploy using heroku. You will need to push all of your files to a github and conenct the github to heroku \n\n3. Using Firebase hosting\nAgain you can check this [article](https://firebase.google.com/docs/hosting) to see how to host using firebase. You will need to build your app in a way such that it is compressed to only 1 index.js file. \n\n## In this post, we will discuss how to specifically deploy a Nodejs, Reactjs project using Heroku.\n\n### 1. First you will need to create a Mongo Cloud Database\nThis is because if we use the normal local database, we will not be able to deploy our website so that others can access. You will also want to create a cluster and connect that cluster to your server. After finishing that, you will get something like this.\n\n{asset_img mongodb.png}\n\nThis is how you connect the database to your server in your index.js file\n\n```javascript\nmongoose.connect(\n  `mongodb+srv://<username>:<password>@cluster0.4uhkn.mongodb.net/<databaseName>?retryWrites=true&w=majority`,\n  {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n  },\n  (err) => {\n    if (!err) {\n      console.log(\"DB connected!\");\n    } else {\n      console.error(err);\n    }\n  }\n);\n```\n\n### 2. Login to Heroku and create a new app\nYou will create a Heroku account and run the command \"heroku login\" in your terminal. Then you get into the Heroku website to create a new app in the pipeline.\nIt should look like this:\n\n{asset_img heroku.png}\n\n### 3. Connect Github to heroku\nCreate a new github repository. Add the remote location to the **server** folder (the backend folder). Then inside the heroku deploy page, you can find the repository and connect to github \n\n### 4. remember to change your API domain from localhost:5000 to (whatever ourwebsite link)\n\nThis is obvious because the localhost is only in your computer so no other people can access it. This should be stored in a .env file. Originally it should be like this \n```javascript\n  REACT_APP_API_DOMAIN=http://localhost:5000/\n```\n\nSo when you logged into the Heroku, get to the setting page and see the config part. You **MUST** add all the necessary .env values in the **Config Vars** part if you want your website to work.\n\nNow you can change your REACT_APP_API_DOMAIN to whatever your website link will be. Mine will be (https://doctorally-test.herokuapp.com/)\n\n### 5. Build and add to server\nGet into the client folder (the frontend) and run yarn build. It will produce a **build** folder that has all of your frontend materials. Cut and paste it into the **server** folder (the backend).\n\nNow basically our whole app is in the server folder. It will look like this: \n\n{asset_img folder.png}\n\n### 6. Add path finding in the server index.js \nWe must add these 2 lines in order for the server to look exactly for the build folder we just added.\n\n```javascript\napp.use(express.static(path.join(__dirname, 'build')));\napp.get('/*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\n```\n\nRemember to use cors in order to call HTTP request from different pages:\n```javascript\napp.use(cors());\n```\n\nAnd now our server folder is set. We are ready to push and deploy\n\n### 7. Push and deploy \nGet into the server folder. Perform git add, git commit and git push to the github repository we have created earlier. \n\nAnd now we can get into the Heroku main page of our app. Get to the Deploy Page and deploy branch (usually master). \n\nNow congratulations your app is now up and running online !! \n\n\n\n\n","source":"_posts/Heroku.md","raw":"---\ntitle: Post#5 Nodejs, Reactjs Heroku Deployment\ncatalog: true\ndate: 2020-10-18 11:41:25\nsubtitle: 10-min read\nheader-img: \"flask2.jpg\"\ntags: [heroku, nodejs, reactjs, mongodb]\nreadtime:\n---\n\n## Here in this blog, I will show you how I usually deploy a website with server using Heroku. Hope you enjoy it!\n\nIf you have a static website or website with functions only in the frontend deployment is not that difficult. There are 3 ways that I usually use. \n\n1. Using the Git deployment in Github\nIf you get in the Github setting page, you can scroll down to the Github Pages and publish your site directly from the whichever branch and folder you want. \n\n2. Using Heroku deployment\nYou can check this [article](https://devcenter.heroku.com/articles/git) to see how to deploy using heroku. You will need to push all of your files to a github and conenct the github to heroku \n\n3. Using Firebase hosting\nAgain you can check this [article](https://firebase.google.com/docs/hosting) to see how to host using firebase. You will need to build your app in a way such that it is compressed to only 1 index.js file. \n\n## In this post, we will discuss how to specifically deploy a Nodejs, Reactjs project using Heroku.\n\n### 1. First you will need to create a Mongo Cloud Database\nThis is because if we use the normal local database, we will not be able to deploy our website so that others can access. You will also want to create a cluster and connect that cluster to your server. After finishing that, you will get something like this.\n\n{asset_img mongodb.png}\n\nThis is how you connect the database to your server in your index.js file\n\n```javascript\nmongoose.connect(\n  `mongodb+srv://<username>:<password>@cluster0.4uhkn.mongodb.net/<databaseName>?retryWrites=true&w=majority`,\n  {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n  },\n  (err) => {\n    if (!err) {\n      console.log(\"DB connected!\");\n    } else {\n      console.error(err);\n    }\n  }\n);\n```\n\n### 2. Login to Heroku and create a new app\nYou will create a Heroku account and run the command \"heroku login\" in your terminal. Then you get into the Heroku website to create a new app in the pipeline.\nIt should look like this:\n\n{asset_img heroku.png}\n\n### 3. Connect Github to heroku\nCreate a new github repository. Add the remote location to the **server** folder (the backend folder). Then inside the heroku deploy page, you can find the repository and connect to github \n\n### 4. remember to change your API domain from localhost:5000 to (whatever ourwebsite link)\n\nThis is obvious because the localhost is only in your computer so no other people can access it. This should be stored in a .env file. Originally it should be like this \n```javascript\n  REACT_APP_API_DOMAIN=http://localhost:5000/\n```\n\nSo when you logged into the Heroku, get to the setting page and see the config part. You **MUST** add all the necessary .env values in the **Config Vars** part if you want your website to work.\n\nNow you can change your REACT_APP_API_DOMAIN to whatever your website link will be. Mine will be (https://doctorally-test.herokuapp.com/)\n\n### 5. Build and add to server\nGet into the client folder (the frontend) and run yarn build. It will produce a **build** folder that has all of your frontend materials. Cut and paste it into the **server** folder (the backend).\n\nNow basically our whole app is in the server folder. It will look like this: \n\n{asset_img folder.png}\n\n### 6. Add path finding in the server index.js \nWe must add these 2 lines in order for the server to look exactly for the build folder we just added.\n\n```javascript\napp.use(express.static(path.join(__dirname, 'build')));\napp.get('/*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\n```\n\nRemember to use cors in order to call HTTP request from different pages:\n```javascript\napp.use(cors());\n```\n\nAnd now our server folder is set. We are ready to push and deploy\n\n### 7. Push and deploy \nGet into the server folder. Perform git add, git commit and git push to the github repository we have created earlier. \n\nAnd now we can get into the Heroku main page of our app. Get to the Deploy Page and deploy branch (usually master). \n\nNow congratulations your app is now up and running online !! \n\n\n\n\n","slug":"Heroku","published":1,"updated":"2021-06-21T02:21:03.902Z","_id":"ckq5zemt50009c6sb9smtsi80","comments":1,"layout":"post","photos":[],"link":"","content":"<h2><span id=\"here-in-this-blog-i-will-show-you-how-i-usually-deploy-a-website-with-server-using-heroku-hope-you-enjoy-it\">Here in this blog, I will show you how I usually deploy a website with server using Heroku. Hope you enjoy it!</span></h2>\n<p>If you have a static website or website with functions only in the frontend deployment is not that difficult. There are 3 ways that I usually use.</p>\n<ol>\n<li>\n<p>Using the Git deployment in Github<br>\nIf you get in the Github setting page, you can scroll down to the Github Pages and publish your site directly from the whichever branch and folder you want.</p>\n</li>\n<li>\n<p>Using Heroku deployment<br>\nYou can check this <a href=\"https://devcenter.heroku.com/articles/git\" target=\"_blank\" rel=\"noopener\">article</a> to see how to deploy using heroku. You will need to push all of your files to a github and conenct the github to heroku</p>\n</li>\n<li>\n<p>Using Firebase hosting<br>\nAgain you can check this <a href=\"https://firebase.google.com/docs/hosting\" target=\"_blank\" rel=\"noopener\">article</a> to see how to host using firebase. You will need to build your app in a way such that it is compressed to only 1 index.js file.</p>\n</li>\n</ol>\n<h2><span id=\"in-this-post-we-will-discuss-how-to-specifically-deploy-a-nodejs-reactjs-project-using-heroku\">In this post, we will discuss how to specifically deploy a Nodejs, Reactjs project using Heroku.</span></h2>\n<h3><span id=\"1-first-you-will-need-to-create-a-mongo-cloud-database\">1. First you will need to create a Mongo Cloud Database</span></h3>\n<p>This is because if we use the normal local database, we will not be able to deploy our website so that others can access. You will also want to create a cluster and connect that cluster to your server. After finishing that, you will get something like this.</p>\n<p>{asset_img mongodb.png}</p>\n<p>This is how you connect the database to your server in your index.js file</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongoose.connect(</span><br><span class=\"line\">  <span class=\"string\">`mongodb+srv://&lt;username&gt;:&lt;password&gt;@cluster0.4uhkn.mongodb.net/&lt;databaseName&gt;?retryWrites=true&amp;w=majority`</span>,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    useNewUrlParser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    useUnifiedTopology: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  (err) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"DB connected!\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3><span id=\"2-login-to-heroku-and-create-a-new-app\">2. Login to Heroku and create a new app</span></h3>\n<p>You will create a Heroku account and run the command “heroku login” in your terminal. Then you get into the Heroku website to create a new app in the pipeline.<br>\nIt should look like this:</p>\n<p>{asset_img heroku.png}</p>\n<h3><span id=\"3-connect-github-to-heroku\">3. Connect Github to heroku</span></h3>\n<p>Create a new github repository. Add the remote location to the <strong>server</strong> folder (the backend folder). Then inside the heroku deploy page, you can find the repository and connect to github</p>\n<h3><span id=\"4-remember-to-change-your-api-domain-from-localhost5000-to-whatever-ourwebsite-link\">4. remember to change your API domain from localhost:5000 to (whatever ourwebsite link)</span></h3>\n<p>This is obvious because the localhost is only in your computer so no other people can access it. This should be stored in a .env file. Originally it should be like this</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REACT_APP_API_DOMAIN=http:<span class=\"comment\">//localhost:5000/</span></span><br></pre></td></tr></table></figure>\n<p>So when you logged into the Heroku, get to the setting page and see the config part. You <strong>MUST</strong> add all the necessary .env values in the <strong>Config Vars</strong> part if you want your website to work.</p>\n<p>Now you can change your REACT_APP_API_DOMAIN to whatever your website link will be. Mine will be (<a href=\"https://doctorally-test.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">https://doctorally-test.herokuapp.com/</a>)</p>\n<h3><span id=\"5-build-and-add-to-server\">5. Build and add to server</span></h3>\n<p>Get into the client folder (the frontend) and run yarn build. It will produce a <strong>build</strong> folder that has all of your frontend materials. Cut and paste it into the <strong>server</strong> folder (the backend).</p>\n<p>Now basically our whole app is in the server folder. It will look like this:</p>\n<p>{asset_img folder.png}</p>\n<h3><span id=\"6-add-path-finding-in-the-server-indexjs\">6. Add path finding in the server index.js</span></h3>\n<p>We must add these 2 lines in order for the server to look exactly for the build folder we just added.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'build'</span>)));</span><br><span class=\"line\">app.get(<span class=\"string\">'/*'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  res.sendFile(path.join(__dirname, <span class=\"string\">'build'</span>, <span class=\"string\">'index.html'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Remember to use cors in order to call HTTP request from different pages:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(cors());</span><br></pre></td></tr></table></figure>\n<p>And now our server folder is set. We are ready to push and deploy</p>\n<h3><span id=\"7-push-and-deploy\">7. Push and deploy</span></h3>\n<p>Get into the server folder. Perform git add, git commit and git push to the github repository we have created earlier.</p>\n<p>And now we can get into the Heroku main page of our app. Get to the Deploy Page and deploy branch (usually master).</p>\n<p>Now congratulations your app is now up and running online !!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Here in this blog, I will show you how I usually deploy a website with server using Heroku. Hope you enjoy it!</h2>\n<p>If you have a static website or website with functions only in the frontend deployment is not that difficult. There are 3 ways that I usually use.</p>\n<ol>\n<li>\n<p>Using the Git deployment in Github<br>\nIf you get in the Github setting page, you can scroll down to the Github Pages and publish your site directly from the whichever branch and folder you want.</p>\n</li>\n<li>\n<p>Using Heroku deployment<br>\nYou can check this <a href=\"https://devcenter.heroku.com/articles/git\" target=\"_blank\" rel=\"noopener\">article</a> to see how to deploy using heroku. You will need to push all of your files to a github and conenct the github to heroku</p>\n</li>\n<li>\n<p>Using Firebase hosting<br>\nAgain you can check this <a href=\"https://firebase.google.com/docs/hosting\" target=\"_blank\" rel=\"noopener\">article</a> to see how to host using firebase. You will need to build your app in a way such that it is compressed to only 1 index.js file.</p>\n</li>\n</ol>\n<h2>In this post, we will discuss how to specifically deploy a Nodejs, Reactjs project using Heroku.</h2>\n<h3>1. First you will need to create a Mongo Cloud Database</h3>\n<p>This is because if we use the normal local database, we will not be able to deploy our website so that others can access. You will also want to create a cluster and connect that cluster to your server. After finishing that, you will get something like this.</p>\n<p>{asset_img mongodb.png}</p>\n<p>This is how you connect the database to your server in your index.js file</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongoose.connect(</span><br><span class=\"line\">  <span class=\"string\">`mongodb+srv://&lt;username&gt;:&lt;password&gt;@cluster0.4uhkn.mongodb.net/&lt;databaseName&gt;?retryWrites=true&amp;w=majority`</span>,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    useNewUrlParser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    useUnifiedTopology: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  (err) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"DB connected!\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3>2. Login to Heroku and create a new app</h3>\n<p>You will create a Heroku account and run the command “heroku login” in your terminal. Then you get into the Heroku website to create a new app in the pipeline.<br>\nIt should look like this:</p>\n<p>{asset_img heroku.png}</p>\n<h3>3. Connect Github to heroku</h3>\n<p>Create a new github repository. Add the remote location to the <strong>server</strong> folder (the backend folder). Then inside the heroku deploy page, you can find the repository and connect to github</p>\n<h3>4. remember to change your API domain from localhost:5000 to (whatever ourwebsite link)</h3>\n<p>This is obvious because the localhost is only in your computer so no other people can access it. This should be stored in a .env file. Originally it should be like this</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REACT_APP_API_DOMAIN=http:<span class=\"comment\">//localhost:5000/</span></span><br></pre></td></tr></table></figure>\n<p>So when you logged into the Heroku, get to the setting page and see the config part. You <strong>MUST</strong> add all the necessary .env values in the <strong>Config Vars</strong> part if you want your website to work.</p>\n<p>Now you can change your REACT_APP_API_DOMAIN to whatever your website link will be. Mine will be (<a href=\"https://doctorally-test.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">https://doctorally-test.herokuapp.com/</a>)</p>\n<h3>5. Build and add to server</h3>\n<p>Get into the client folder (the frontend) and run yarn build. It will produce a <strong>build</strong> folder that has all of your frontend materials. Cut and paste it into the <strong>server</strong> folder (the backend).</p>\n<p>Now basically our whole app is in the server folder. It will look like this:</p>\n<p>{asset_img folder.png}</p>\n<h3>6. Add path finding in the server index.js</h3>\n<p>We must add these 2 lines in order for the server to look exactly for the build folder we just added.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'build'</span>)));</span><br><span class=\"line\">app.get(<span class=\"string\">'/*'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  res.sendFile(path.join(__dirname, <span class=\"string\">'build'</span>, <span class=\"string\">'index.html'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Remember to use cors in order to call HTTP request from different pages:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(cors());</span><br></pre></td></tr></table></figure>\n<p>And now our server folder is set. We are ready to push and deploy</p>\n<h3>7. Push and deploy</h3>\n<p>Get into the server folder. Perform git add, git commit and git push to the github repository we have created earlier.</p>\n<p>And now we can get into the Heroku main page of our app. Get to the Deploy Page and deploy branch (usually master).</p>\n<p>Now congratulations your app is now up and running online !!</p>\n"},{"title":"Post#7 Messenger Clone - Realtime Messaging Platform with Firebase","catalog":true,"date":"2021-02-01T01:53:06.000Z","subtitle":"30-min read","header-img":"605f46e0efe323669bc2a5a5b7b3835b.png","readtime":"30-min read","_content":"\n## Welcome back to my tech blog. This time I will show you my work during the winter break: Messenger Clone \n\nDuring the winter break, as everybody knows, there were many crashes to big platforms such as Facebook and Messenger. Noticing this, I decided to create a **real-time messaging** platform for me and my friends (potentially become bigger in the future). I hope you will find this post interesting because it has a lot of cool techniques that I have just learned.\n\n### List of important parts in the project:\n1. Firebase Authentication system \n2. Friends relationship management (add, remove friends like on Facebook)\n3. Firebase storage to store and upload images\n4. Real-time messaging of individuals using Firestore and Redux \n5. Real-time messaging of groups using Firestore and Redux \n\n### Important Note:\nOne important thing to note here is that I am **always** using the information and the ids from Firestore not from the auto generated user of Firebase Authentication. This means that anytime the user logs in and inputs any information, it will be uploaded encriptedly to the Firestore and we will draw the information from the database down to our client.\n\n### Setting Up Firebase in a React Project \nI have written a blog about how to set up firebase from start to finish [Here](https://decodecraft.com/TodoApp/). It is vital that you set up everything correctly in order for Firebase to work. In this project, I will use 3 services Firebase Firestore, Firebase Authentication, and Firebase Storage \n\n### 1. Authentication\n\n#### 1.1 Login Form\nDefinitely one of the core parts of any project. In this project, I created a Private Router for authentication which will only allow authenticated users to enter the platform. \n\nWe start by creating 2 pages with 2 forms: Login and Signup. We will use useRef to handle the value that the users input in both forms. \n\n```javascript\n\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required></Form.Control>\n            </Form.Group>\n\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control type=\"password\" ref={passwordRef} required></Form.Control>\n            </Form.Group>\n\n            <Button disabled={loading} className=\"w-100\" type=\"submit\">\n              Log in\n          </Button>\n          </Form>\n\n```\n\nThe form is structure quite standardly. I am using all the components in **react-bootstrap** (Form, Button, Modal). We have 2 form groups correspond to the email and the password. We then save the reference using **useRef** to store the input from user. Finally, there is a button to handle the submit event of the form.\n\nIn the **submit** event, we will execute the following actions. First we will run the login function with email and password. This action is loaded from a **useContext** which I will mention later. Then we will store the result of the successful **Authentication** call and save it to the Database and **LocalStorage** (this is used to remember the user if you want to have that feature). I am also using **useHistory** to navigate between the webpages\n\n```javascript\ntry {\n      setError(\"\")\n      setLoading(true)\n      await login(emailRef.current.value, passwordRef.current.value)\n      .then((data) => {\n        const name = data.user.displayName.split(\" \");\n        const firstName = name[0];\n        const lastName = name[1];\n\n        const loggedInUser = {\n            firstName,\n            lastName,\n            uid: data.user.uid,\n            email: data.user.email\n        }\n\n        localStorage.setItem('user', JSON.stringify(loggedInUser));\n      })\n\n      history.push(\"/\")\n    }\n    catch {\n      setError(\"Failed to login. Please check your password or username and try again\")\n    }\n```\n\nThis is an application of try catch function. Note that here the **login** will be imported from our useContext (an Authentication context) and will be described later in section 1.3 \n\n#### 1.2 Signup Form\n\nThis is very similar to the Login Form. It has 5 form groups firstname, lastname, **email, password and confirmpassword** (you can add more but the last 3 is a must).\n\nHere we will also use **useRef** to handle the input value from the users. The Signup Form is below: \n\n```javascript\n<Form onSubmit={handleSubmit}>\n          <Form.Group id=\"email\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control type=\"email\" ref={emailRef} required></Form.Control>\n          </Form.Group>\n\n          <Form.Group id=\"password\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control type=\"password\" ref={passwordRef} required></Form.Control>\n          </Form.Group>\n\n          <Form.Group id=\"password-confirm\">\n            <Form.Label>Password Confirmation</Form.Label>\n            <Form.Control type=\"password\" ref={passwordConfirmRef} required></Form.Control>\n          </Form.Group>\n\n          <Form.Group id=\"first-name\">\n            <Form.Label>First Name</Form.Label>\n            <Form.Control type=\"first-name\" ref={firstNameRef} required></Form.Control>\n          </Form.Group>\n\n          <Form.Group id=\"last-name\">\n            <Form.Label>Last Name</Form.Label>\n            <Form.Control type=\"last-name\" ref={lastNameRef} required></Form.Control>\n          </Form.Group>\n          <Button disabled={loading} className=\"w-100\" type=\"submit\">\n            Sign Up\n          </Button>\n        </Form>\n```\n\nAgain, very similar to the Login Form, we will have a submit button to handle the **submit event** of the form. Here is when it gets a bit **different**. \n\nWe will first check if the **password** is equal to the **confirmpassword**. I think Bootstrap Forms requires 6 characters at the minimum but you can freely add more conditions. If they are equal, we would perform the try catch function just as in the Login Form:\n\n```javascript\n    try{\n      setError(\"\")\n      setLoading(true)\n      let result = await signup(emailRef.current.value, passwordRef.current.value)\n      await result.user.updateProfile({\n        displayName: firstNameRef.current.value + \" \" + lastNameRef.current.value\n      })\n      await db.collection(\"users\").add({\n        email: emailRef.current.value,\n        firstName: firstNameRef.current.value,\n        lastName: lastNameRef.current.value,\n        uid: result.user.uid,\n        createdAt: new Date(),\n        isOnline: true,\n        profileImage: \"https://i.pinimg.com/originals/e0/7a/22/e07a22eafdb803f1f26bf60de2143f7b.png\",\n        friendList: [],\n        pendingFriends: [],\n      })\n      const loggedInUser = {\n        firstName: firstNameRef.current.value,\n        lastName: lastNameRef.current.value,\n        uid: result.user.uid,\n        email: result.user.email\n      }\n      await localStorage.setItem(\"user\", JSON.stringify(loggedInUser))\n      history.push(\"/\")\n    }\n    catch{\n      setError(\"Failed to create an account. Password must be at least 6 characters or username already existed\")\n    }\n```\n\nWe set the **result** variable to be the result of the successful call to the signup function of Firebase Authentication. Again, the **signup** function will be **imported** from the **useContext** that we will mention in section 1.3. Then I will update the **displayName** of the currentUser that is successfully signed up to Firebase (note that the displayName is a provided feature). However, as I have mentioned in my **Important Notes** I will uploaded the users' information to Firestore even if we already have the currentUser from Authentication. This will allows us to freely manage the encripted information and apply it to later stage of the project.\n\n```javascript\n      await db.collection(\"users\").add({\n        email: emailRef.current.value,\n        firstName: firstNameRef.current.value,\n        lastName: lastNameRef.current.value,\n        uid: result.user.uid,\n        createdAt: new Date(),\n        isOnline: true,\n        profileImage: \"https://i.pinimg.com/originals/e0/7a/22/e07a22eafdb803f1f26bf60de2143f7b.png\",\n        friendList: [],\n        pendingFriends: [],\n      })\n```\n\nHere is the function I called to add to my Firestore database. It includes some fields such as **uid** (id given to us from Firebase Authentication), **createdAt** (exact time that the user signed up), isOnline (manage if the user is currently online or not), **profileImage** (to store profile image), **friendList** (to store our current friendlist), and **pendingFriends** (to store the users sent us a request but we have not respond). After pushing the data to Firestore, we are basically done for signup. Now we should switch to Login page and start building our **Dashboard**. Note that in my website I also built a **Update Profile** and a **Forgot Password** page but that is for later and not the main function of the project  \n\n\n### 2. Friends relationship management (add, remove friends like on Facebook)\n\nThis will be our Dashboard page. It will help you show the personal information, manage your friends, and the list of all users currently using the app so that people can **add friend** and connect to each other. So the core function of this page is to handle **adding and removing** friends. Like I mentioned in the Signup section (1.2), we will use 2 arrays to handle friends **pendingFriends** (users sent us a request but we have not respond) and **friendList** (the people are in our friends' list) \n\nThis is my dashboard page:\n\n{% asset_img dashboard.png %}\n\nIt has a really simple design with a navigating bar (drawer) to the left side. Now, I will show you how to create the **relationship** between the users. \n\nFirst, I will use a useEffect to call to the Firestore database and list out all the users that are using the app. In order to do this, we create a **User** component that has 3 props:\n**id** (the document id of the friend that I sent a friend request to in Firestore), **docId** (the document id of the current user in Firestore), and **user** (the data of the current usere in Firestore).\n\nEverytime we want to pull real-time information from the database to reflect the changes, we will write a useEffect hook. Here I have **pendingFriends** (users sent us a request but we have not respond) and **sentFriendRequests** (users that we sent a friend request to). Remember this data is taken from the **user** collection in the database\n\n```javascript\n  useEffect(() => {\n    db.collection(\"users\").doc(docId).onSnapshot((doc) => {\n      if (doc.data().pendingFriends) {\n        setPendingFriends(doc.data().pendingFriends)\n      }\n    })\n  }, []);\n\n  useEffect(() => {\n    db.collection(\"users\").doc(docId).onSnapshot((doc) => {\n      if (doc.data().sentFriendRequests) {\n        setSentFriendRequests(doc.data().sentFriendRequests)\n      }\n    })\n  }, []);\n```\n\nSecond, we will have 4 operations that we want to execute: **sent** a friend request to someone, **accept** a friend request, **decline** a friend request, and **remove** someone from our friend list. The way you handle these actions is up to you but here is how I handle it \n\n#### 1. Sent a friend request to someone \nWhen we sent a friend request to someone, we want to add the document id of that user to our sentFriendRequest list and add the current user's document id to the pendingList of that user.\nFor example, A sent to B a request -> add B to **sentFriendRequest** list of A and add A to **pendingList** of B. Here is how to execute it. In Firebase, whenever we want to change a array type data, we can use the **FieldValue.arrayUnion** provided by Firebase\n\n```javascript\n    const handleAddFriend = async (id) => {\n    setPending(true)\n    await db.collection(\"users\").doc(id).update({\n      pendingFriends: firebase.firestore.FieldValue.arrayUnion(docId)\n    })\n    await db.collection(\"users\").doc(docId).update({\n      sentFriendRequests: firebase.firestore.FieldValue.arrayUnion(id)\n    })\n  }\n```\n\n\n#### 2. Accept a friend request from someone\n\nWhen A accepts B friend request, we want to add A to B's **friendList**, add B to A's friendList, remove B from **pendingList** of A and remove A from **sendFriendRequest** list of B. Here is the code to perform this action\n\n```javascript\n    const handleAcceptFriend = async (id) => {\n    await db.collection(\"users\").doc(docId).update({\n      friendList: firebase.firestore.FieldValue.arrayUnion(id)\n    })\n\n    await db.collection(\"users\").doc(id).update({\n      friendList: firebase.firestore.FieldValue.arrayUnion(docId)\n    })\n\n    await db.collection(\"users\").doc(docId).update({\n      pendingFriends: pendingFriends.filter((friendId) => friendId != id && friendId != docId)\n    })\n\n    await db.collection(\"users\").doc(id).update({\n      sentFriendRequests: sentFriendRequests.filter((friendId) => friendId != docId)\n    })\n```\n\n#### 3. Decline a friend request of someone\n\nWhen A declines the friend request from B, we basically just remove B from the pendingList of A and remove A from the sentFriendRequest of B\n\n```javascript\n  const handleDeclineFriend = async (id) => {\n    await db.collection(\"users\").doc(id).update({\n      pendingFriends: pendingFriends.filter((friendId) => friendId != id && friendId != docId)\n    })\n\n    await db.collection(\"users\").doc(docId).update({\n      pendingFriends: pendingFriends.filter((friendId) => friendId != id && friendId != docId)\n    })\n\n    await db.collection(\"users\").doc(id).update({\n      sentFriendRequests: sentFriendRequests.filter((friendId) => friendId != id && friendId != docId)\n    })\n\n```\n\n#### 4. Remove someone from our friendlist\n\nWhen A removes B from A's friendlist, we want to remove A from B's friendList and remove B from A's friendList. \n\n\n```javascript\n  const handleRemoveFriend = (e) => {\n    e.preventDefault()\n    // console.log(friendList)\n    db.collection(\"users\").doc(docId).update({\n      friendList: friendList.filter((friend) => friend != friendId && friend != docId)\n    })\n\n    db.collection(\"users\").doc(friendId).update({\n      friendList: friendList.filter((friend) => friend != docId && friend != friendId)\n    })\n```\n\nRight now, we are done with the friends' relationship operations. Now we will try to display the operations to the screen in the way we want. For example, our current user is **A**. Note that the *logic* will flow like this. First, next to every user (that is not our friend yet) in the List of Users will have a \"**add friend**\" button. After sending **B** a friend request, we will change that button to **Pending** and disable it. Then in B's screen, the buttons next to A will be **yes/no** (represent if B want to add friend A or not). If B choose yes, they will both be added to each other's **friendList** and remove from the each other list of users. If B choose no, then A will be removed from B's users list. Here is the ternary expression I used to display this logic in the Dashboard\n\n```javascript\n{\n            sentFriendRequests && sentFriendRequests.includes(id) ?\n              (\n                <Button onClick={() => handleAddFriend(id)} disabled={true}>Pending</Button>\n              )\n              :\n              (\n                <div>\n                  {pendingFriends && pendingFriends.includes(id) ?\n                    (\n                      <div style={{display: \"flex\", flexDirection:\"row\"}}>\n                        <Button style={{marginRight: 20}} onClick={() => handleAcceptFriend(id)}>\n                          <FontAwesomeIcon style={{fontSize: 16}} icon={faCheck}/>\n                        </Button>\n                        <Button onClick={() => handleDeclineFriend(id)}>\n                          <FontAwesomeIcon style={{fontSize: 20}} icon={faTimes}/>\n                        </Button>\n                      </div>\n                    )\n                    :\n                    (\n                      <>\n                        <Button onClick={() => handleAddFriend(id)} disabled={pending}>{pending ? \"Pending\" : (\n                          <FontAwesomeIcon icon={faUserPlus}/>\n                        )}</Button>\n                      </>\n                    )\n                  }\n                </div>\n              )\n          }\n```\n\nThe rest of the dashboard is pretty simple. Here is where I list of the current users that are not my friend.\n\n```javascript\n    userList && userList.map((user) => {\n            if (!friendList.includes(user.id)) {\n              return (\n                <User id={user.id} docId={docId} user={user.user} />\n              )\n            }\n          })\n```\n\n{% asset_img allusers.png %}\n\nAnd here is where I list my friends in the left side of the dashboard. \n\n```javascript\n    {friendList && friendList.map((friendId) => {\n      return (\n        <Friend sentFriendRequests={sentFriendRequests} friendList={friendList} docId={docId} friendId={friendId} />\n      )\n    })}\n```\n\n### 3. Firebase storage to store and upload images\n\nOne of the most important features in the app is to handle **profile images**: upload or change them. Here we will use Firebase **Storage** to upload the image and then extract the **link** from Storage to store it to corresponding users' database\n\n```javascript\n  <input type=\"file\" onChange={handleImageAsFile} />\n  <button onClick={handleFirebaseUpload}>Upload</button>\n```\n\nWe will display these 2 basic HTML on the screen. 1 is an input where we set the type to files. We will only accept image format here. I will capture the event **handleImageAsFile**\n\n```javascript\n  const handleImageAsFile = (e) => {\n    const image = e.target.files[0]\n    setImageAsFile(imageAsFile => image)\n  }\n```\n\nHere is an example of the files in storage. Remember the path that leads to the images is:\n\"/images/{name of image}\"\n\n{% asset_img storage.png %}\n\nWe save our image to a state **imageAsFile**. This will be a **Image File** so we cannot access this yet. From here we have to extract the link to this file from Storage. We will first **upload** the image we selected to Firebase Storage and **access** the **path** that leads to the image using reference and the method **getDownloadURL** of Firebase.\n\n```javascript\n  const handleFirebaseUpload = (e) => {\n    e.preventDefault()\n    if (imageAsFile === '') {\n      console.log(`not an image`)\n    }\n    const uploadTask = storage.ref(`/images/${imageAsFile.name}`).put(imageAsFile)\n    uploadTask.on(\"state_changed\", (snapShot) => {\n    }, (err) => {\n      console.log(err)\n    }, () => {\n      storage.ref('images').child(imageAsFile.name).getDownloadURL()\n        .then(fireBaseUrl => {\n          setImageAsUrl(prevObject => ({ ...prevObject, imgUrl: fireBaseUrl }))\n          db.collection(\"users\").doc(docId).update({\n            profileImage: fireBaseUrl\n          })\n        })\n    })\n    setOpen(false)\n  }\n```\n\nHere we will get our downloadURL of the image to be **firebaseURL**. After receiving this, we will save this to the **corresponding** user database of that user. Now all we have to do is take the URL and display it on the screen \n\n### 4. Real-time messaging of individuals using Firestore and Redux \n\nIt has been quite a long set up right ... We are finally here, the most important and also the core feature of my project the real-time chat between individuals and groups. In this section 4, I will show you how to use Redux to do real-time messaging.\n\nFirst we need to set up **Redux and Redux Thunk** (this is critical in order to perform asynchronous actions in Redux)\n\nFirst in the main index.js outside, we must set up as the following:\n\n```javascript\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n```\n\nBasically, the **store** variable will be from Redux and it will contain all of our states. We just need to **wrap** our App with the **Provider** and we are good to go.\n\nNow we will set up the reducer where will we perform the messaging logic. Below is my reducer folder structure. We will not need the authReducer but just an index.js file and the userReducer\n\n{% asset_img reduxstructure %}\n\nThe user.reducer.js will contain all the definitions for the actions (name, type and corresponding payload) that we will perform\n\n```javascript\nimport { userConstants } from \"../actions/constants\"\n\nconst initState = {\n  users: []\n}\n\nexport default (state = initState, action) => {\n  switch (action.type) {\n    case `${userConstants.GET_REALTIME_USERS}_REQUEST`:\n      break;\n    case `${userConstants.GET_REALTIME_USERS}_SUCCESS`:\n      state = {\n        ...state,\n        users: action.payload.users\n      }\n      break;\n\n    case userConstants.GET_REALTIME_MESSAGES:\n      state = {\n        ...state,\n        conversations: action.payload.conversations\n      }\n      break;\n    case `${userConstants.GET_REALTIME_MESSAGES}_FAILURE`:\n      state = {\n        ...state,\n        conversations: []\n      }\n      break;\n    case userConstants.GET_REALTIME_MESSAGES_GROUP:\n      // console.log(\"have sent message group\")\n      state = {\n        ...state,\n        conversationsGroup: action.payload.conversationsGroup\n      }\n      break;\n    case `${userConstants.GET_REALTIME_MESSAGES_GROUP}_FAILURE`:\n      state = {\n        ...state,\n        conversationsGroup: []\n      }\n      break;\n  }\n  return state;\n} \n```\n\nThe most important actions here are GET_REALTIME_MESSAGES and GET_REALTIME_MESSAGES_GROUP. In these actions, we will update the **state** conversations (for individuals chat) and conversationsGroup (for group chat) with the **corresponding** newState we got after the user texts something. \n\nNext we will set up the most **important** file of the webchat, **user.action.js**. This is where all the magic happens ! \n\nThe first **asynchronous** action we will perform is **createMessage**. This is fired when the user sends something to another person.\n\n```javascript\nexport const createMessage = (messageObject) =>{\n  return async (dispatch) => {\n    db.collection(\"conversations\").add({\n      ...messageObject,\n      isView: false,\n      createdAt: new Date()\n    })\n    .then((data) => {\n      // console.log(data)\n      //success\n    })\n    .catch((err) => {\n      console.log(err)\n    })\n  }\n}\n```\n\nRemember using **Redux Thunk** will help us perform async functions like above. We have a parameter **messageObject**. This parameter will be taken from the client side after the user sent something. REMEMBER THIS PARAMETER.\n\nAfter firing createMessage, we will instantly fire the next function below:\n\n```javascript\nexport const getRealTimeConversations = (user) =>{\n  return async (dispatch) => {\n    db.collection(\"conversations\")\n    .where('user_uid_2', 'in', [user.uid_1, user.uid_2])\n    // .where('user_uid_2', 'in', [user.uid_2, user.uid_1])\n    .orderBy(\"createdAt\", \"asc\")\n    .onSnapshot((snapShot) => {\n      const conversations = []\n      //doc.data() -> vao 1 document\n      snapShot.forEach((doc) => {\n        //nếu như conversation của 2 người match, 1 người là ng gửi và ng kia nhận được \n        // thì mới push vào conversation\n        if((doc.data().user_uid_1 === user.uid_1 && doc.data().user_uid_2 === user.uid_2)\n        ||\n        (doc.data().user_uid_1 === user.uid_2 && doc.data().user_uid_2 === user.uid_1)){\n          conversations.push({id: doc.id, conver: doc.data()})\n        }\n        // console.log(conversations)\n      })\n      dispatch({\n        type: userConstants.GET_REALTIME_MESSAGES,\n        payload: { conversations }\n      })\n    })\n  }\n}\n```\n\nAll the encrypted messages will be stored in the conversations collection in Firestore. Here everytime a person sends a message to another person, **we will retake all the data from that conversation in Firestore and add the new message**. This might seem to be time consuming but the next filtering step will improve our **performance** by a lot.\n\nTo query and filter in the Firebase, I use the **where** method. The user.uid_1 and user.uid_2 are the ids (generated by the Firebase Authentication) of the current user and the person you are messaging to. Whenever the **current user** sends a message, it will **reload** the *conversation* in the database and it will look for all conversation with the user_uid_2 that is contained in the array [user.uid_1 and user.uid_2]. This will ensure that if A sends a message to B, the first **filter** will get all the **conversations** that B is either the sender or the receiver. \n\nThen we sort the order by ascending because we want the lastest messages to be seen last. Finally, this condition will check if the conversation we are taking from the database is exactly the conversation between A and B \n\n```javascript\n  if((doc.data().user_uid_1 === user.uid_1 && doc.data().user_uid_2 === user.uid_2)\n    ||\n    (doc.data().user_uid_1 === user.uid_2 && doc.data().user_uid_2 === user.uid_1)){\n      conversations.push({id: doc.id, conver: doc.data()})\n    }\n```\n\nAfter that we will **dispatch** the action with the payload of conversations so that our reducer file will receive the action. So we are finished with the user.action.js. We have finished setting up for the real-time chat. Now let's move to the HomePage Screen (which is the Chat screen)\n\n  const initChat = (user) => {\n    setCurrentChatId(user.id)\n    setChatStarted(true)\n    setChatGroup(false)\n    setChatUser(`${user.data.firstName} ${user.data.lastName}`)\n    dispatch(getRealTimeConversations({ uid_1: docId, uid_2: user.id }))\n    // setUserUid(user.data.uid)\n    // console.log(user)\n  }\n\nFirst, we have to set up the conversations column, which lists all of our friends and groups (just like in Messenger). Here is the set up for the column \n\n```javascript\n    <div>\n      {\n        newCurrentFriendList && newCurrentFriendList.map((user) => {\n          if(user.id != docId){\n            return (\n              <User chatGroup={chatGroup} currentChatId={currentChatId} id={user.id} key={user.data.uid} user={user} onClick={initChat} />\n            )\n          }\n        })\n      }\n    </div>\n```\n\nWe will map out all of the current user's friends, each in a component called **User**. \n\n{% asset_img sideconver.png %}\n\nWhen we **click** into each user, we will have to initiate the conversations between 2 people (which means we need to use the **actions** we just wrote in Redux). \n\n```javascript\n  const initChat = (user) => {\n    setCurrentChatId(user.id)\n    setChatStarted(true)\n    setChatGroup(false)\n    setChatUser(`${user.data.firstName} ${user.data.lastName}`)\n    dispatch(getRealTimeConversations({ uid_1: docId, uid_2: user.id }))\n  }\n```\n\nWe get the **id** of the user that we just clicked into as **id**. Then we set the ChatUser as the name of the user we are chatting with. Finally, we dispatch the action **getRealTimeConversations** to load all the conversations with that person. \n\nNext, when we send a message to a user, we need to initiate the the **sendMessage** function to execute the action we did in user.action.js \n\n```javascript\n  const sendMessage = async (e) => {\n    e.preventDefault()\n    const messageObject = {\n      user_uid_1: docId,\n      user_uid_2: currentChatId,\n      message: message,\n      haveReply: replyMessage ? true : false,\n      replyMessage: replyMessage\n    }\n    console.log(messageObject)\n    if (message) {\n      dispatch(createMessage(messageObject))\n      .then(() => {\n        setMessage('')\n      })\n    }\n    setReplyMessage(\"\")\n  }\n```\n\nRemember the **messageObject** that I told you to remember. Inside the messageObject will be all the information about the 2 users and that message: **message** (the text that the user sent), **haveReply** (Is the message replied or not), **replyMessage** (the replyMessage if this message has 1). Finally, we will dispatch the **createMessage** action from the user.action.js\n\nHere is the most sophisticated part of the project, where I set up and display all the messages: \n\n```javascript\n(chatStarted && !chatGroup) ?\nuser.conversations && user.conversations.map((conver) => {\n  return (\n    <div style={{ textAlign: conver.conver.user_uid_1 == docId ? 'right' : \"left\" }}>\n      {\n        conver.conver.user_uid_1 == docId ?\n          (<div className=\"maindiv\" style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"flex-end\", zIndex: 9999 }}>\n            {(open6 && (currentMessageEmoji && currentMessageEmoji == conver.id)) ? (\n              <div className=\"emojiContainer\">\n                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(\"heart\")}</div>\n                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[11])}</div>\n                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[70])}</div>\n                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[73])}</div>\n                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[55])}</div>\n                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[116])}</div>\n                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[117])}</div>\n              </div>\n            ) : null}\n            <div>\n              <div className=\"maindiv\" key={conver.id} className=\"messageContainerCurrent\">\n                <div className=\"hide\" id={conver.id} onClick={(e) => handleShowEmojis(e, conver.id)}>{emoji.getUnicode(\"grinning\")}</div>\n                <FontAwesomeIcon className=\"hide\" onClick={(e) => handleReplyMess(e, conver.id)} icon={faReply} />\n                <div className={conver.conver.user_uid_1 == docId ? \"messageStyle\" : \"messageStyleWhite\"} >\n                  {conver.conver.haveReply ? (\n                    <div className=\"chatReplyMessage\">\n                      {conver.conver.replyMessage}\n                    </div>\n                  ) : null}\n                  {conver.conver.message}\n                </div>\n              </div>\n              <div className=\"emojiMessage\" style={{ position: \"absolute\", right: \"1%\", marginTop: -16 }}>{conver.conver.emojiSingle}</div>\n            </div>\n          </div>\n          )\n          :\n\n```\n\nThe above code is the display of the message from the sender. The message from the receiver will be the same but just  A **message** can be splited into **4 parts**:\n1. Checking what user this is the sender or the receiver\n\n```javascript\nconver.conver.user_uid_1 == docId ?\n```\nThis line of code helps us know that this is the sender of the message. \n\n2. Emoji container\n\nDo you know the emojis we typically use in Messenger. Here we use a emoji unicode library to display the emojis\n\n3. Showing the Reacted Emoji\n\nHere is where we handle the event of a user reacts to a message. We need a container to display the emoji. For individuals chatting, we only need to add an **emojiSelected** field in each message document.\n\n```javascript\n  const handleReaction = async (e, id) => {\n    e.preventDefault()\n    setSelectedEmoji(e.currentTarget.textContent)\n    const emojiSelected = e.currentTarget.textContent\n    await db.collection(\"conversations\").doc(id).update({\n      emojiSingle: emojiSelected == selectedEmojiOnDatabase ? \"\" : emojiSelected\n    })\n    await db.collection(\"conversations\").doc(id).onSnapshot((doc) => {\n      if (doc) {\n        setSelectedEmojiOnDatabase(doc.data().emojiSingle)\n      }\n    })\n    setOpen6(false)\n  }\n```\n\n4. Displaying the Reply portion\n\nOf course, we need a reply function for each message. Here we basically add another field **replyMessage** to each message document in the database. \n\n```javascript\n  const handleReplyMess = (e, id) => {\n    // console.log(\"reply\")\n    e.preventDefault()\n    db.collection(\"conversations\").doc(id).get().then((doc) => {\n      setReplyMessage(doc.data().message)\n    })\n  }\n```\n\nAnd thats it, we can now chat individually to each other. For the groups's function is really similar to the individual chat so I will let the [Github Link to Project](https://github.com/MRSNOO/Messenger-Clone-New) so that you can understand it better. Here is the link to the Website [MessengerClone](https://todoapp-aaff8.web.app/). I hope you can experience the website and give me some feedback.\n\n### I hope you like this post. It is really long but it contains a lot of useful information about web technologies. I will see you guys in my next post.\n\n\n\n","source":"_posts/MessengerClone.md","raw":"---\ntitle: Post#7 Messenger Clone - Realtime Messaging Platform with Firebase \ncatalog: true\ndate: 2021-02-01 08:53:06\nsubtitle: 30-min read\nheader-img: \"605f46e0efe323669bc2a5a5b7b3835b.png\"\ntags: [javascript, reactjs, nodejs, api]\nreadtime: 30-min read\n---\n\n## Welcome back to my tech blog. This time I will show you my work during the winter break: Messenger Clone \n\nDuring the winter break, as everybody knows, there were many crashes to big platforms such as Facebook and Messenger. Noticing this, I decided to create a **real-time messaging** platform for me and my friends (potentially become bigger in the future). I hope you will find this post interesting because it has a lot of cool techniques that I have just learned.\n\n### List of important parts in the project:\n1. Firebase Authentication system \n2. Friends relationship management (add, remove friends like on Facebook)\n3. Firebase storage to store and upload images\n4. Real-time messaging of individuals using Firestore and Redux \n5. Real-time messaging of groups using Firestore and Redux \n\n### Important Note:\nOne important thing to note here is that I am **always** using the information and the ids from Firestore not from the auto generated user of Firebase Authentication. This means that anytime the user logs in and inputs any information, it will be uploaded encriptedly to the Firestore and we will draw the information from the database down to our client.\n\n### Setting Up Firebase in a React Project \nI have written a blog about how to set up firebase from start to finish [Here](https://decodecraft.com/TodoApp/). It is vital that you set up everything correctly in order for Firebase to work. In this project, I will use 3 services Firebase Firestore, Firebase Authentication, and Firebase Storage \n\n### 1. Authentication\n\n#### 1.1 Login Form\nDefinitely one of the core parts of any project. In this project, I created a Private Router for authentication which will only allow authenticated users to enter the platform. \n\nWe start by creating 2 pages with 2 forms: Login and Signup. We will use useRef to handle the value that the users input in both forms. \n\n```javascript\n\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required></Form.Control>\n            </Form.Group>\n\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control type=\"password\" ref={passwordRef} required></Form.Control>\n            </Form.Group>\n\n            <Button disabled={loading} className=\"w-100\" type=\"submit\">\n              Log in\n          </Button>\n          </Form>\n\n```\n\nThe form is structure quite standardly. I am using all the components in **react-bootstrap** (Form, Button, Modal). We have 2 form groups correspond to the email and the password. We then save the reference using **useRef** to store the input from user. Finally, there is a button to handle the submit event of the form.\n\nIn the **submit** event, we will execute the following actions. First we will run the login function with email and password. This action is loaded from a **useContext** which I will mention later. Then we will store the result of the successful **Authentication** call and save it to the Database and **LocalStorage** (this is used to remember the user if you want to have that feature). I am also using **useHistory** to navigate between the webpages\n\n```javascript\ntry {\n      setError(\"\")\n      setLoading(true)\n      await login(emailRef.current.value, passwordRef.current.value)\n      .then((data) => {\n        const name = data.user.displayName.split(\" \");\n        const firstName = name[0];\n        const lastName = name[1];\n\n        const loggedInUser = {\n            firstName,\n            lastName,\n            uid: data.user.uid,\n            email: data.user.email\n        }\n\n        localStorage.setItem('user', JSON.stringify(loggedInUser));\n      })\n\n      history.push(\"/\")\n    }\n    catch {\n      setError(\"Failed to login. Please check your password or username and try again\")\n    }\n```\n\nThis is an application of try catch function. Note that here the **login** will be imported from our useContext (an Authentication context) and will be described later in section 1.3 \n\n#### 1.2 Signup Form\n\nThis is very similar to the Login Form. It has 5 form groups firstname, lastname, **email, password and confirmpassword** (you can add more but the last 3 is a must).\n\nHere we will also use **useRef** to handle the input value from the users. The Signup Form is below: \n\n```javascript\n<Form onSubmit={handleSubmit}>\n          <Form.Group id=\"email\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control type=\"email\" ref={emailRef} required></Form.Control>\n          </Form.Group>\n\n          <Form.Group id=\"password\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control type=\"password\" ref={passwordRef} required></Form.Control>\n          </Form.Group>\n\n          <Form.Group id=\"password-confirm\">\n            <Form.Label>Password Confirmation</Form.Label>\n            <Form.Control type=\"password\" ref={passwordConfirmRef} required></Form.Control>\n          </Form.Group>\n\n          <Form.Group id=\"first-name\">\n            <Form.Label>First Name</Form.Label>\n            <Form.Control type=\"first-name\" ref={firstNameRef} required></Form.Control>\n          </Form.Group>\n\n          <Form.Group id=\"last-name\">\n            <Form.Label>Last Name</Form.Label>\n            <Form.Control type=\"last-name\" ref={lastNameRef} required></Form.Control>\n          </Form.Group>\n          <Button disabled={loading} className=\"w-100\" type=\"submit\">\n            Sign Up\n          </Button>\n        </Form>\n```\n\nAgain, very similar to the Login Form, we will have a submit button to handle the **submit event** of the form. Here is when it gets a bit **different**. \n\nWe will first check if the **password** is equal to the **confirmpassword**. I think Bootstrap Forms requires 6 characters at the minimum but you can freely add more conditions. If they are equal, we would perform the try catch function just as in the Login Form:\n\n```javascript\n    try{\n      setError(\"\")\n      setLoading(true)\n      let result = await signup(emailRef.current.value, passwordRef.current.value)\n      await result.user.updateProfile({\n        displayName: firstNameRef.current.value + \" \" + lastNameRef.current.value\n      })\n      await db.collection(\"users\").add({\n        email: emailRef.current.value,\n        firstName: firstNameRef.current.value,\n        lastName: lastNameRef.current.value,\n        uid: result.user.uid,\n        createdAt: new Date(),\n        isOnline: true,\n        profileImage: \"https://i.pinimg.com/originals/e0/7a/22/e07a22eafdb803f1f26bf60de2143f7b.png\",\n        friendList: [],\n        pendingFriends: [],\n      })\n      const loggedInUser = {\n        firstName: firstNameRef.current.value,\n        lastName: lastNameRef.current.value,\n        uid: result.user.uid,\n        email: result.user.email\n      }\n      await localStorage.setItem(\"user\", JSON.stringify(loggedInUser))\n      history.push(\"/\")\n    }\n    catch{\n      setError(\"Failed to create an account. Password must be at least 6 characters or username already existed\")\n    }\n```\n\nWe set the **result** variable to be the result of the successful call to the signup function of Firebase Authentication. Again, the **signup** function will be **imported** from the **useContext** that we will mention in section 1.3. Then I will update the **displayName** of the currentUser that is successfully signed up to Firebase (note that the displayName is a provided feature). However, as I have mentioned in my **Important Notes** I will uploaded the users' information to Firestore even if we already have the currentUser from Authentication. This will allows us to freely manage the encripted information and apply it to later stage of the project.\n\n```javascript\n      await db.collection(\"users\").add({\n        email: emailRef.current.value,\n        firstName: firstNameRef.current.value,\n        lastName: lastNameRef.current.value,\n        uid: result.user.uid,\n        createdAt: new Date(),\n        isOnline: true,\n        profileImage: \"https://i.pinimg.com/originals/e0/7a/22/e07a22eafdb803f1f26bf60de2143f7b.png\",\n        friendList: [],\n        pendingFriends: [],\n      })\n```\n\nHere is the function I called to add to my Firestore database. It includes some fields such as **uid** (id given to us from Firebase Authentication), **createdAt** (exact time that the user signed up), isOnline (manage if the user is currently online or not), **profileImage** (to store profile image), **friendList** (to store our current friendlist), and **pendingFriends** (to store the users sent us a request but we have not respond). After pushing the data to Firestore, we are basically done for signup. Now we should switch to Login page and start building our **Dashboard**. Note that in my website I also built a **Update Profile** and a **Forgot Password** page but that is for later and not the main function of the project  \n\n\n### 2. Friends relationship management (add, remove friends like on Facebook)\n\nThis will be our Dashboard page. It will help you show the personal information, manage your friends, and the list of all users currently using the app so that people can **add friend** and connect to each other. So the core function of this page is to handle **adding and removing** friends. Like I mentioned in the Signup section (1.2), we will use 2 arrays to handle friends **pendingFriends** (users sent us a request but we have not respond) and **friendList** (the people are in our friends' list) \n\nThis is my dashboard page:\n\n{% asset_img dashboard.png %}\n\nIt has a really simple design with a navigating bar (drawer) to the left side. Now, I will show you how to create the **relationship** between the users. \n\nFirst, I will use a useEffect to call to the Firestore database and list out all the users that are using the app. In order to do this, we create a **User** component that has 3 props:\n**id** (the document id of the friend that I sent a friend request to in Firestore), **docId** (the document id of the current user in Firestore), and **user** (the data of the current usere in Firestore).\n\nEverytime we want to pull real-time information from the database to reflect the changes, we will write a useEffect hook. Here I have **pendingFriends** (users sent us a request but we have not respond) and **sentFriendRequests** (users that we sent a friend request to). Remember this data is taken from the **user** collection in the database\n\n```javascript\n  useEffect(() => {\n    db.collection(\"users\").doc(docId).onSnapshot((doc) => {\n      if (doc.data().pendingFriends) {\n        setPendingFriends(doc.data().pendingFriends)\n      }\n    })\n  }, []);\n\n  useEffect(() => {\n    db.collection(\"users\").doc(docId).onSnapshot((doc) => {\n      if (doc.data().sentFriendRequests) {\n        setSentFriendRequests(doc.data().sentFriendRequests)\n      }\n    })\n  }, []);\n```\n\nSecond, we will have 4 operations that we want to execute: **sent** a friend request to someone, **accept** a friend request, **decline** a friend request, and **remove** someone from our friend list. The way you handle these actions is up to you but here is how I handle it \n\n#### 1. Sent a friend request to someone \nWhen we sent a friend request to someone, we want to add the document id of that user to our sentFriendRequest list and add the current user's document id to the pendingList of that user.\nFor example, A sent to B a request -> add B to **sentFriendRequest** list of A and add A to **pendingList** of B. Here is how to execute it. In Firebase, whenever we want to change a array type data, we can use the **FieldValue.arrayUnion** provided by Firebase\n\n```javascript\n    const handleAddFriend = async (id) => {\n    setPending(true)\n    await db.collection(\"users\").doc(id).update({\n      pendingFriends: firebase.firestore.FieldValue.arrayUnion(docId)\n    })\n    await db.collection(\"users\").doc(docId).update({\n      sentFriendRequests: firebase.firestore.FieldValue.arrayUnion(id)\n    })\n  }\n```\n\n\n#### 2. Accept a friend request from someone\n\nWhen A accepts B friend request, we want to add A to B's **friendList**, add B to A's friendList, remove B from **pendingList** of A and remove A from **sendFriendRequest** list of B. Here is the code to perform this action\n\n```javascript\n    const handleAcceptFriend = async (id) => {\n    await db.collection(\"users\").doc(docId).update({\n      friendList: firebase.firestore.FieldValue.arrayUnion(id)\n    })\n\n    await db.collection(\"users\").doc(id).update({\n      friendList: firebase.firestore.FieldValue.arrayUnion(docId)\n    })\n\n    await db.collection(\"users\").doc(docId).update({\n      pendingFriends: pendingFriends.filter((friendId) => friendId != id && friendId != docId)\n    })\n\n    await db.collection(\"users\").doc(id).update({\n      sentFriendRequests: sentFriendRequests.filter((friendId) => friendId != docId)\n    })\n```\n\n#### 3. Decline a friend request of someone\n\nWhen A declines the friend request from B, we basically just remove B from the pendingList of A and remove A from the sentFriendRequest of B\n\n```javascript\n  const handleDeclineFriend = async (id) => {\n    await db.collection(\"users\").doc(id).update({\n      pendingFriends: pendingFriends.filter((friendId) => friendId != id && friendId != docId)\n    })\n\n    await db.collection(\"users\").doc(docId).update({\n      pendingFriends: pendingFriends.filter((friendId) => friendId != id && friendId != docId)\n    })\n\n    await db.collection(\"users\").doc(id).update({\n      sentFriendRequests: sentFriendRequests.filter((friendId) => friendId != id && friendId != docId)\n    })\n\n```\n\n#### 4. Remove someone from our friendlist\n\nWhen A removes B from A's friendlist, we want to remove A from B's friendList and remove B from A's friendList. \n\n\n```javascript\n  const handleRemoveFriend = (e) => {\n    e.preventDefault()\n    // console.log(friendList)\n    db.collection(\"users\").doc(docId).update({\n      friendList: friendList.filter((friend) => friend != friendId && friend != docId)\n    })\n\n    db.collection(\"users\").doc(friendId).update({\n      friendList: friendList.filter((friend) => friend != docId && friend != friendId)\n    })\n```\n\nRight now, we are done with the friends' relationship operations. Now we will try to display the operations to the screen in the way we want. For example, our current user is **A**. Note that the *logic* will flow like this. First, next to every user (that is not our friend yet) in the List of Users will have a \"**add friend**\" button. After sending **B** a friend request, we will change that button to **Pending** and disable it. Then in B's screen, the buttons next to A will be **yes/no** (represent if B want to add friend A or not). If B choose yes, they will both be added to each other's **friendList** and remove from the each other list of users. If B choose no, then A will be removed from B's users list. Here is the ternary expression I used to display this logic in the Dashboard\n\n```javascript\n{\n            sentFriendRequests && sentFriendRequests.includes(id) ?\n              (\n                <Button onClick={() => handleAddFriend(id)} disabled={true}>Pending</Button>\n              )\n              :\n              (\n                <div>\n                  {pendingFriends && pendingFriends.includes(id) ?\n                    (\n                      <div style={{display: \"flex\", flexDirection:\"row\"}}>\n                        <Button style={{marginRight: 20}} onClick={() => handleAcceptFriend(id)}>\n                          <FontAwesomeIcon style={{fontSize: 16}} icon={faCheck}/>\n                        </Button>\n                        <Button onClick={() => handleDeclineFriend(id)}>\n                          <FontAwesomeIcon style={{fontSize: 20}} icon={faTimes}/>\n                        </Button>\n                      </div>\n                    )\n                    :\n                    (\n                      <>\n                        <Button onClick={() => handleAddFriend(id)} disabled={pending}>{pending ? \"Pending\" : (\n                          <FontAwesomeIcon icon={faUserPlus}/>\n                        )}</Button>\n                      </>\n                    )\n                  }\n                </div>\n              )\n          }\n```\n\nThe rest of the dashboard is pretty simple. Here is where I list of the current users that are not my friend.\n\n```javascript\n    userList && userList.map((user) => {\n            if (!friendList.includes(user.id)) {\n              return (\n                <User id={user.id} docId={docId} user={user.user} />\n              )\n            }\n          })\n```\n\n{% asset_img allusers.png %}\n\nAnd here is where I list my friends in the left side of the dashboard. \n\n```javascript\n    {friendList && friendList.map((friendId) => {\n      return (\n        <Friend sentFriendRequests={sentFriendRequests} friendList={friendList} docId={docId} friendId={friendId} />\n      )\n    })}\n```\n\n### 3. Firebase storage to store and upload images\n\nOne of the most important features in the app is to handle **profile images**: upload or change them. Here we will use Firebase **Storage** to upload the image and then extract the **link** from Storage to store it to corresponding users' database\n\n```javascript\n  <input type=\"file\" onChange={handleImageAsFile} />\n  <button onClick={handleFirebaseUpload}>Upload</button>\n```\n\nWe will display these 2 basic HTML on the screen. 1 is an input where we set the type to files. We will only accept image format here. I will capture the event **handleImageAsFile**\n\n```javascript\n  const handleImageAsFile = (e) => {\n    const image = e.target.files[0]\n    setImageAsFile(imageAsFile => image)\n  }\n```\n\nHere is an example of the files in storage. Remember the path that leads to the images is:\n\"/images/{name of image}\"\n\n{% asset_img storage.png %}\n\nWe save our image to a state **imageAsFile**. This will be a **Image File** so we cannot access this yet. From here we have to extract the link to this file from Storage. We will first **upload** the image we selected to Firebase Storage and **access** the **path** that leads to the image using reference and the method **getDownloadURL** of Firebase.\n\n```javascript\n  const handleFirebaseUpload = (e) => {\n    e.preventDefault()\n    if (imageAsFile === '') {\n      console.log(`not an image`)\n    }\n    const uploadTask = storage.ref(`/images/${imageAsFile.name}`).put(imageAsFile)\n    uploadTask.on(\"state_changed\", (snapShot) => {\n    }, (err) => {\n      console.log(err)\n    }, () => {\n      storage.ref('images').child(imageAsFile.name).getDownloadURL()\n        .then(fireBaseUrl => {\n          setImageAsUrl(prevObject => ({ ...prevObject, imgUrl: fireBaseUrl }))\n          db.collection(\"users\").doc(docId).update({\n            profileImage: fireBaseUrl\n          })\n        })\n    })\n    setOpen(false)\n  }\n```\n\nHere we will get our downloadURL of the image to be **firebaseURL**. After receiving this, we will save this to the **corresponding** user database of that user. Now all we have to do is take the URL and display it on the screen \n\n### 4. Real-time messaging of individuals using Firestore and Redux \n\nIt has been quite a long set up right ... We are finally here, the most important and also the core feature of my project the real-time chat between individuals and groups. In this section 4, I will show you how to use Redux to do real-time messaging.\n\nFirst we need to set up **Redux and Redux Thunk** (this is critical in order to perform asynchronous actions in Redux)\n\nFirst in the main index.js outside, we must set up as the following:\n\n```javascript\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n```\n\nBasically, the **store** variable will be from Redux and it will contain all of our states. We just need to **wrap** our App with the **Provider** and we are good to go.\n\nNow we will set up the reducer where will we perform the messaging logic. Below is my reducer folder structure. We will not need the authReducer but just an index.js file and the userReducer\n\n{% asset_img reduxstructure %}\n\nThe user.reducer.js will contain all the definitions for the actions (name, type and corresponding payload) that we will perform\n\n```javascript\nimport { userConstants } from \"../actions/constants\"\n\nconst initState = {\n  users: []\n}\n\nexport default (state = initState, action) => {\n  switch (action.type) {\n    case `${userConstants.GET_REALTIME_USERS}_REQUEST`:\n      break;\n    case `${userConstants.GET_REALTIME_USERS}_SUCCESS`:\n      state = {\n        ...state,\n        users: action.payload.users\n      }\n      break;\n\n    case userConstants.GET_REALTIME_MESSAGES:\n      state = {\n        ...state,\n        conversations: action.payload.conversations\n      }\n      break;\n    case `${userConstants.GET_REALTIME_MESSAGES}_FAILURE`:\n      state = {\n        ...state,\n        conversations: []\n      }\n      break;\n    case userConstants.GET_REALTIME_MESSAGES_GROUP:\n      // console.log(\"have sent message group\")\n      state = {\n        ...state,\n        conversationsGroup: action.payload.conversationsGroup\n      }\n      break;\n    case `${userConstants.GET_REALTIME_MESSAGES_GROUP}_FAILURE`:\n      state = {\n        ...state,\n        conversationsGroup: []\n      }\n      break;\n  }\n  return state;\n} \n```\n\nThe most important actions here are GET_REALTIME_MESSAGES and GET_REALTIME_MESSAGES_GROUP. In these actions, we will update the **state** conversations (for individuals chat) and conversationsGroup (for group chat) with the **corresponding** newState we got after the user texts something. \n\nNext we will set up the most **important** file of the webchat, **user.action.js**. This is where all the magic happens ! \n\nThe first **asynchronous** action we will perform is **createMessage**. This is fired when the user sends something to another person.\n\n```javascript\nexport const createMessage = (messageObject) =>{\n  return async (dispatch) => {\n    db.collection(\"conversations\").add({\n      ...messageObject,\n      isView: false,\n      createdAt: new Date()\n    })\n    .then((data) => {\n      // console.log(data)\n      //success\n    })\n    .catch((err) => {\n      console.log(err)\n    })\n  }\n}\n```\n\nRemember using **Redux Thunk** will help us perform async functions like above. We have a parameter **messageObject**. This parameter will be taken from the client side after the user sent something. REMEMBER THIS PARAMETER.\n\nAfter firing createMessage, we will instantly fire the next function below:\n\n```javascript\nexport const getRealTimeConversations = (user) =>{\n  return async (dispatch) => {\n    db.collection(\"conversations\")\n    .where('user_uid_2', 'in', [user.uid_1, user.uid_2])\n    // .where('user_uid_2', 'in', [user.uid_2, user.uid_1])\n    .orderBy(\"createdAt\", \"asc\")\n    .onSnapshot((snapShot) => {\n      const conversations = []\n      //doc.data() -> vao 1 document\n      snapShot.forEach((doc) => {\n        //nếu như conversation của 2 người match, 1 người là ng gửi và ng kia nhận được \n        // thì mới push vào conversation\n        if((doc.data().user_uid_1 === user.uid_1 && doc.data().user_uid_2 === user.uid_2)\n        ||\n        (doc.data().user_uid_1 === user.uid_2 && doc.data().user_uid_2 === user.uid_1)){\n          conversations.push({id: doc.id, conver: doc.data()})\n        }\n        // console.log(conversations)\n      })\n      dispatch({\n        type: userConstants.GET_REALTIME_MESSAGES,\n        payload: { conversations }\n      })\n    })\n  }\n}\n```\n\nAll the encrypted messages will be stored in the conversations collection in Firestore. Here everytime a person sends a message to another person, **we will retake all the data from that conversation in Firestore and add the new message**. This might seem to be time consuming but the next filtering step will improve our **performance** by a lot.\n\nTo query and filter in the Firebase, I use the **where** method. The user.uid_1 and user.uid_2 are the ids (generated by the Firebase Authentication) of the current user and the person you are messaging to. Whenever the **current user** sends a message, it will **reload** the *conversation* in the database and it will look for all conversation with the user_uid_2 that is contained in the array [user.uid_1 and user.uid_2]. This will ensure that if A sends a message to B, the first **filter** will get all the **conversations** that B is either the sender or the receiver. \n\nThen we sort the order by ascending because we want the lastest messages to be seen last. Finally, this condition will check if the conversation we are taking from the database is exactly the conversation between A and B \n\n```javascript\n  if((doc.data().user_uid_1 === user.uid_1 && doc.data().user_uid_2 === user.uid_2)\n    ||\n    (doc.data().user_uid_1 === user.uid_2 && doc.data().user_uid_2 === user.uid_1)){\n      conversations.push({id: doc.id, conver: doc.data()})\n    }\n```\n\nAfter that we will **dispatch** the action with the payload of conversations so that our reducer file will receive the action. So we are finished with the user.action.js. We have finished setting up for the real-time chat. Now let's move to the HomePage Screen (which is the Chat screen)\n\n  const initChat = (user) => {\n    setCurrentChatId(user.id)\n    setChatStarted(true)\n    setChatGroup(false)\n    setChatUser(`${user.data.firstName} ${user.data.lastName}`)\n    dispatch(getRealTimeConversations({ uid_1: docId, uid_2: user.id }))\n    // setUserUid(user.data.uid)\n    // console.log(user)\n  }\n\nFirst, we have to set up the conversations column, which lists all of our friends and groups (just like in Messenger). Here is the set up for the column \n\n```javascript\n    <div>\n      {\n        newCurrentFriendList && newCurrentFriendList.map((user) => {\n          if(user.id != docId){\n            return (\n              <User chatGroup={chatGroup} currentChatId={currentChatId} id={user.id} key={user.data.uid} user={user} onClick={initChat} />\n            )\n          }\n        })\n      }\n    </div>\n```\n\nWe will map out all of the current user's friends, each in a component called **User**. \n\n{% asset_img sideconver.png %}\n\nWhen we **click** into each user, we will have to initiate the conversations between 2 people (which means we need to use the **actions** we just wrote in Redux). \n\n```javascript\n  const initChat = (user) => {\n    setCurrentChatId(user.id)\n    setChatStarted(true)\n    setChatGroup(false)\n    setChatUser(`${user.data.firstName} ${user.data.lastName}`)\n    dispatch(getRealTimeConversations({ uid_1: docId, uid_2: user.id }))\n  }\n```\n\nWe get the **id** of the user that we just clicked into as **id**. Then we set the ChatUser as the name of the user we are chatting with. Finally, we dispatch the action **getRealTimeConversations** to load all the conversations with that person. \n\nNext, when we send a message to a user, we need to initiate the the **sendMessage** function to execute the action we did in user.action.js \n\n```javascript\n  const sendMessage = async (e) => {\n    e.preventDefault()\n    const messageObject = {\n      user_uid_1: docId,\n      user_uid_2: currentChatId,\n      message: message,\n      haveReply: replyMessage ? true : false,\n      replyMessage: replyMessage\n    }\n    console.log(messageObject)\n    if (message) {\n      dispatch(createMessage(messageObject))\n      .then(() => {\n        setMessage('')\n      })\n    }\n    setReplyMessage(\"\")\n  }\n```\n\nRemember the **messageObject** that I told you to remember. Inside the messageObject will be all the information about the 2 users and that message: **message** (the text that the user sent), **haveReply** (Is the message replied or not), **replyMessage** (the replyMessage if this message has 1). Finally, we will dispatch the **createMessage** action from the user.action.js\n\nHere is the most sophisticated part of the project, where I set up and display all the messages: \n\n```javascript\n(chatStarted && !chatGroup) ?\nuser.conversations && user.conversations.map((conver) => {\n  return (\n    <div style={{ textAlign: conver.conver.user_uid_1 == docId ? 'right' : \"left\" }}>\n      {\n        conver.conver.user_uid_1 == docId ?\n          (<div className=\"maindiv\" style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"flex-end\", zIndex: 9999 }}>\n            {(open6 && (currentMessageEmoji && currentMessageEmoji == conver.id)) ? (\n              <div className=\"emojiContainer\">\n                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(\"heart\")}</div>\n                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[11])}</div>\n                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[70])}</div>\n                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[73])}</div>\n                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[55])}</div>\n                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[116])}</div>\n                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[117])}</div>\n              </div>\n            ) : null}\n            <div>\n              <div className=\"maindiv\" key={conver.id} className=\"messageContainerCurrent\">\n                <div className=\"hide\" id={conver.id} onClick={(e) => handleShowEmojis(e, conver.id)}>{emoji.getUnicode(\"grinning\")}</div>\n                <FontAwesomeIcon className=\"hide\" onClick={(e) => handleReplyMess(e, conver.id)} icon={faReply} />\n                <div className={conver.conver.user_uid_1 == docId ? \"messageStyle\" : \"messageStyleWhite\"} >\n                  {conver.conver.haveReply ? (\n                    <div className=\"chatReplyMessage\">\n                      {conver.conver.replyMessage}\n                    </div>\n                  ) : null}\n                  {conver.conver.message}\n                </div>\n              </div>\n              <div className=\"emojiMessage\" style={{ position: \"absolute\", right: \"1%\", marginTop: -16 }}>{conver.conver.emojiSingle}</div>\n            </div>\n          </div>\n          )\n          :\n\n```\n\nThe above code is the display of the message from the sender. The message from the receiver will be the same but just  A **message** can be splited into **4 parts**:\n1. Checking what user this is the sender or the receiver\n\n```javascript\nconver.conver.user_uid_1 == docId ?\n```\nThis line of code helps us know that this is the sender of the message. \n\n2. Emoji container\n\nDo you know the emojis we typically use in Messenger. Here we use a emoji unicode library to display the emojis\n\n3. Showing the Reacted Emoji\n\nHere is where we handle the event of a user reacts to a message. We need a container to display the emoji. For individuals chatting, we only need to add an **emojiSelected** field in each message document.\n\n```javascript\n  const handleReaction = async (e, id) => {\n    e.preventDefault()\n    setSelectedEmoji(e.currentTarget.textContent)\n    const emojiSelected = e.currentTarget.textContent\n    await db.collection(\"conversations\").doc(id).update({\n      emojiSingle: emojiSelected == selectedEmojiOnDatabase ? \"\" : emojiSelected\n    })\n    await db.collection(\"conversations\").doc(id).onSnapshot((doc) => {\n      if (doc) {\n        setSelectedEmojiOnDatabase(doc.data().emojiSingle)\n      }\n    })\n    setOpen6(false)\n  }\n```\n\n4. Displaying the Reply portion\n\nOf course, we need a reply function for each message. Here we basically add another field **replyMessage** to each message document in the database. \n\n```javascript\n  const handleReplyMess = (e, id) => {\n    // console.log(\"reply\")\n    e.preventDefault()\n    db.collection(\"conversations\").doc(id).get().then((doc) => {\n      setReplyMessage(doc.data().message)\n    })\n  }\n```\n\nAnd thats it, we can now chat individually to each other. For the groups's function is really similar to the individual chat so I will let the [Github Link to Project](https://github.com/MRSNOO/Messenger-Clone-New) so that you can understand it better. Here is the link to the Website [MessengerClone](https://todoapp-aaff8.web.app/). I hope you can experience the website and give me some feedback.\n\n### I hope you like this post. It is really long but it contains a lot of useful information about web technologies. I will see you guys in my next post.\n\n\n\n","slug":"MessengerClone","published":1,"updated":"2021-06-15T18:07:50.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq5zemt7000bc6sb7rvj55vw","content":"<h2><span id=\"welcome-back-to-my-tech-blog-this-time-i-will-show-you-my-work-during-the-winter-break-messenger-clone\">Welcome back to my tech blog. This time I will show you my work during the winter break: Messenger Clone</span></h2>\n<p>During the winter break, as everybody knows, there were many crashes to big platforms such as Facebook and Messenger. Noticing this, I decided to create a <strong>real-time messaging</strong> platform for me and my friends (potentially become bigger in the future). I hope you will find this post interesting because it has a lot of cool techniques that I have just learned.</p>\n<h3><span id=\"list-of-important-parts-in-the-project\">List of important parts in the project:</span></h3>\n<ol>\n<li>Firebase Authentication system</li>\n<li>Friends relationship management (add, remove friends like on Facebook)</li>\n<li>Firebase storage to store and upload images</li>\n<li>Real-time messaging of individuals using Firestore and Redux</li>\n<li>Real-time messaging of groups using Firestore and Redux</li>\n</ol>\n<h3><span id=\"important-note\">Important Note:</span></h3>\n<p>One important thing to note here is that I am <strong>always</strong> using the information and the ids from Firestore not from the auto generated user of Firebase Authentication. This means that anytime the user logs in and inputs any information, it will be uploaded encriptedly to the Firestore and we will draw the information from the database down to our client.</p>\n<h3><span id=\"setting-up-firebase-in-a-react-project\">Setting Up Firebase in a React Project</span></h3>\n<p>I have written a blog about how to set up firebase from start to finish <a href=\"https://decodecraft.com/TodoApp/\">Here</a>. It is vital that you set up everything correctly in order for Firebase to work. In this project, I will use 3 services Firebase Firestore, Firebase Authentication, and Firebase Storage</p>\n<h3><span id=\"1-authentication\">1. Authentication</span></h3>\n<h4><span id=\"11-login-form\">1.1 Login Form</span></h4>\n<p>Definitely one of the core parts of any project. In this project, I created a Private Router for authentication which will only allow authenticated users to enter the platform.</p>\n<p>We start by creating 2 pages with 2 forms: Login and Signup. We will use useRef to handle the value that the users input in both forms.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;Form onSubmit=&#123;handleSubmit&#125;&gt;</span><br><span class=\"line\">  &lt;Form.Group id=<span class=\"string\">\"email\"</span>&gt;</span><br><span class=\"line\">    &lt;Form.Label&gt;Email&lt;<span class=\"regexp\">/Form.Label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Form.Control type=\"email\" ref=&#123;emailRef&#125; required&gt;&lt;/</span>Form.Control&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Form.Group&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Form.Group id=\"password\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Form.Label&gt;Password&lt;/</span>Form.Label&gt;</span><br><span class=\"line\">    &lt;Form.Control type=<span class=\"string\">\"password\"</span> ref=&#123;passwordRef&#125; required&gt;&lt;<span class=\"regexp\">/Form.Control&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Form.Group&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;Button disabled=&#123;loading&#125; className=<span class=\"string\">\"w-100\"</span> type=<span class=\"string\">\"submit\"</span>&gt;</span><br><span class=\"line\">    Log <span class=\"keyword\">in</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Form&gt;</span><br></pre></td></tr></table></figure>\n<p>The form is structure quite standardly. I am using all the components in <strong>react-bootstrap</strong> (Form, Button, Modal). We have 2 form groups correspond to the email and the password. We then save the reference using <strong>useRef</strong> to store the input from user. Finally, there is a button to handle the submit event of the form.</p>\n<p>In the <strong>submit</strong> event, we will execute the following actions. First we will run the login function with email and password. This action is loaded from a <strong>useContext</strong> which I will mention later. Then we will store the result of the successful <strong>Authentication</strong> call and save it to the Database and <strong>LocalStorage</strong> (this is used to remember the user if you want to have that feature). I am also using <strong>useHistory</strong> to navigate between the webpages</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      setError(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">      setLoading(<span class=\"literal\">true</span>)</span><br><span class=\"line\">      <span class=\"keyword\">await</span> login(emailRef.current.value, passwordRef.current.value)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> name = data.user.displayName.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> firstName = name[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> lastName = name[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> loggedInUser = &#123;</span><br><span class=\"line\">            firstName,</span><br><span class=\"line\">            lastName,</span><br><span class=\"line\">            uid: data.user.uid,</span><br><span class=\"line\">            email: data.user.email</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        localStorage.setItem(<span class=\"string\">'user'</span>, <span class=\"built_in\">JSON</span>.stringify(loggedInUser));</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      history.push(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      setError(<span class=\"string\">\"Failed to login. Please check your password or username and try again\"</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>This is an application of try catch function. Note that here the <strong>login</strong> will be imported from our useContext (an Authentication context) and will be described later in section 1.3</p>\n<h4><span id=\"12-signup-form\">1.2 Signup Form</span></h4>\n<p>This is very similar to the Login Form. It has 5 form groups firstname, lastname, <strong>email, password and confirmpassword</strong> (you can add more but the last 3 is a must).</p>\n<p>Here we will also use <strong>useRef</strong> to handle the input value from the users. The Signup Form is below:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Form onSubmit=&#123;handleSubmit&#125;&gt;</span><br><span class=\"line\">          &lt;Form.Group id=<span class=\"string\">\"email\"</span>&gt;</span><br><span class=\"line\">            &lt;Form.Label&gt;Email&lt;<span class=\"regexp\">/Form.Label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Form.Control type=\"email\" ref=&#123;emailRef&#125; required&gt;&lt;/</span>Form.Control&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Form.Group&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Form.Group id=\"password\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Form.Label&gt;Password&lt;/</span>Form.Label&gt;</span><br><span class=\"line\">            &lt;Form.Control type=<span class=\"string\">\"password\"</span> ref=&#123;passwordRef&#125; required&gt;&lt;<span class=\"regexp\">/Form.Control&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>Form.Group&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;Form.Group id=<span class=\"string\">\"password-confirm\"</span>&gt;</span><br><span class=\"line\">            &lt;Form.Label&gt;Password Confirmation&lt;<span class=\"regexp\">/Form.Label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Form.Control type=\"password\" ref=&#123;passwordConfirmRef&#125; required&gt;&lt;/</span>Form.Control&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Form.Group&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Form.Group id=\"first-name\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Form.Label&gt;First Name&lt;/</span>Form.Label&gt;</span><br><span class=\"line\">            &lt;Form.Control type=<span class=\"string\">\"first-name\"</span> ref=&#123;firstNameRef&#125; required&gt;&lt;<span class=\"regexp\">/Form.Control&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>Form.Group&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;Form.Group id=<span class=\"string\">\"last-name\"</span>&gt;</span><br><span class=\"line\">            &lt;Form.Label&gt;Last Name&lt;<span class=\"regexp\">/Form.Label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Form.Control type=\"last-name\" ref=&#123;lastNameRef&#125; required&gt;&lt;/</span>Form.Control&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Form.Group&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Button disabled=&#123;loading&#125; className=\"w-100\" type=\"submit\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            Sign Up</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>Button&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Form&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Again, very similar to the Login Form, we will have a submit button to handle the <strong>submit event</strong> of the form. Here is when it gets a bit <strong>different</strong>.</p>\n<p>We will first check if the <strong>password</strong> is equal to the <strong>confirmpassword</strong>. I think Bootstrap Forms requires 6 characters at the minimum but you can freely add more conditions. If they are equal, we would perform the try catch function just as in the Login Form:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">  setError(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  setLoading(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> signup(emailRef.current.value, passwordRef.current.value)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> result.user.updateProfile(&#123;</span><br><span class=\"line\">    displayName: firstNameRef.current.value + <span class=\"string\">\" \"</span> + lastNameRef.current.value</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).add(&#123;</span><br><span class=\"line\">    email: emailRef.current.value,</span><br><span class=\"line\">    firstName: firstNameRef.current.value,</span><br><span class=\"line\">    lastName: lastNameRef.current.value,</span><br><span class=\"line\">    uid: result.user.uid,</span><br><span class=\"line\">    createdAt: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">    isOnline: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    profileImage: <span class=\"string\">\"https://i.pinimg.com/originals/e0/7a/22/e07a22eafdb803f1f26bf60de2143f7b.png\"</span>,</span><br><span class=\"line\">    friendList: [],</span><br><span class=\"line\">    pendingFriends: [],</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> loggedInUser = &#123;</span><br><span class=\"line\">    firstName: firstNameRef.current.value,</span><br><span class=\"line\">    lastName: lastNameRef.current.value,</span><br><span class=\"line\">    uid: result.user.uid,</span><br><span class=\"line\">    email: result.user.email</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> localStorage.setItem(<span class=\"string\">\"user\"</span>, <span class=\"built_in\">JSON</span>.stringify(loggedInUser))</span><br><span class=\"line\">  history.push(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">  setError(<span class=\"string\">\"Failed to create an account. Password must be at least 6 characters or username already existed\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We set the <strong>result</strong> variable to be the result of the successful call to the signup function of Firebase Authentication. Again, the <strong>signup</strong> function will be <strong>imported</strong> from the <strong>useContext</strong> that we will mention in section 1.3. Then I will update the <strong>displayName</strong> of the currentUser that is successfully signed up to Firebase (note that the displayName is a provided feature). However, as I have mentioned in my <strong>Important Notes</strong> I will uploaded the users’ information to Firestore even if we already have the currentUser from Authentication. This will allows us to freely manage the encripted information and apply it to later stage of the project.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).add(&#123;</span><br><span class=\"line\">  email: emailRef.current.value,</span><br><span class=\"line\">  firstName: firstNameRef.current.value,</span><br><span class=\"line\">  lastName: lastNameRef.current.value,</span><br><span class=\"line\">  uid: result.user.uid,</span><br><span class=\"line\">  createdAt: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">  isOnline: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  profileImage: <span class=\"string\">\"https://i.pinimg.com/originals/e0/7a/22/e07a22eafdb803f1f26bf60de2143f7b.png\"</span>,</span><br><span class=\"line\">  friendList: [],</span><br><span class=\"line\">  pendingFriends: [],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Here is the function I called to add to my Firestore database. It includes some fields such as <strong>uid</strong> (id given to us from Firebase Authentication), <strong>createdAt</strong> (exact time that the user signed up), isOnline (manage if the user is currently online or not), <strong>profileImage</strong> (to store profile image), <strong>friendList</strong> (to store our current friendlist), and <strong>pendingFriends</strong> (to store the users sent us a request but we have not respond). After pushing the data to Firestore, we are basically done for signup. Now we should switch to Login page and start building our <strong>Dashboard</strong>. Note that in my website I also built a <strong>Update Profile</strong> and a <strong>Forgot Password</strong> page but that is for later and not the main function of the project</p>\n<h3><span id=\"2-friends-relationship-management-add-remove-friends-like-on-facebook\">2. Friends relationship management (add, remove friends like on Facebook)</span></h3>\n<p>This will be our Dashboard page. It will help you show the personal information, manage your friends, and the list of all users currently using the app so that people can <strong>add friend</strong> and connect to each other. So the core function of this page is to handle <strong>adding and removing</strong> friends. Like I mentioned in the Signup section (1.2), we will use 2 arrays to handle friends <strong>pendingFriends</strong> (users sent us a request but we have not respond) and <strong>friendList</strong> (the people are in our friends’ list)</p>\n<p>This is my dashboard page:</p>\n<img src=\"/MessengerClone/dashboard.png\">\n<p>It has a really simple design with a navigating bar (drawer) to the left side. Now, I will show you how to create the <strong>relationship</strong> between the users.</p>\n<p>First, I will use a useEffect to call to the Firestore database and list out all the users that are using the app. In order to do this, we create a <strong>User</strong> component that has 3 props:<br>\n<strong>id</strong> (the document id of the friend that I sent a friend request to in Firestore), <strong>docId</strong> (the document id of the current user in Firestore), and <strong>user</strong> (the data of the current usere in Firestore).</p>\n<p>Everytime we want to pull real-time information from the database to reflect the changes, we will write a useEffect hook. Here I have <strong>pendingFriends</strong> (users sent us a request but we have not respond) and <strong>sentFriendRequests</strong> (users that we sent a friend request to). Remember this data is taken from the <strong>user</strong> collection in the database</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  db.collection(<span class=\"string\">\"users\"</span>).doc(docId).onSnapshot(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (doc.data().pendingFriends) &#123;</span><br><span class=\"line\">      setPendingFriends(doc.data().pendingFriends)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  db.collection(<span class=\"string\">\"users\"</span>).doc(docId).onSnapshot(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (doc.data().sentFriendRequests) &#123;</span><br><span class=\"line\">      setSentFriendRequests(doc.data().sentFriendRequests)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n<p>Second, we will have 4 operations that we want to execute: <strong>sent</strong> a friend request to someone, <strong>accept</strong> a friend request, <strong>decline</strong> a friend request, and <strong>remove</strong> someone from our friend list. The way you handle these actions is up to you but here is how I handle it</p>\n<h4><span id=\"1-sent-a-friend-request-to-someone\">1. Sent a friend request to someone</span></h4>\n<p>When we sent a friend request to someone, we want to add the document id of that user to our sentFriendRequest list and add the current user’s document id to the pendingList of that user.<br>\nFor example, A sent to B a request -&gt; add B to <strong>sentFriendRequest</strong> list of A and add A to <strong>pendingList</strong> of B. Here is how to execute it. In Firebase, whenever we want to change a array type data, we can use the <strong>FieldValue.arrayUnion</strong> provided by Firebase</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> handleAddFriend = <span class=\"keyword\">async</span> (id) =&gt; &#123;</span><br><span class=\"line\">  setPending(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(id).update(&#123;</span><br><span class=\"line\">    pendingFriends: firebase.firestore.FieldValue.arrayUnion(docId)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(docId).update(&#123;</span><br><span class=\"line\">    sentFriendRequests: firebase.firestore.FieldValue.arrayUnion(id)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"2-accept-a-friend-request-from-someone\">2. Accept a friend request from someone</span></h4>\n<p>When A accepts B friend request, we want to add A to B’s <strong>friendList</strong>, add B to A’s friendList, remove B from <strong>pendingList</strong> of A and remove A from <strong>sendFriendRequest</strong> list of B. Here is the code to perform this action</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleAcceptFriend = <span class=\"keyword\">async</span> (id) =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(docId).update(&#123;</span><br><span class=\"line\">  friendList: firebase.firestore.FieldValue.arrayUnion(id)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(id).update(&#123;</span><br><span class=\"line\">  friendList: firebase.firestore.FieldValue.arrayUnion(docId)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(docId).update(&#123;</span><br><span class=\"line\">  pendingFriends: pendingFriends.filter(<span class=\"function\">(<span class=\"params\">friendId</span>) =&gt;</span> friendId != id &amp;&amp; friendId != docId)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(id).update(&#123;</span><br><span class=\"line\">  sentFriendRequests: sentFriendRequests.filter(<span class=\"function\">(<span class=\"params\">friendId</span>) =&gt;</span> friendId != docId)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4><span id=\"3-decline-a-friend-request-of-someone\">3. Decline a friend request of someone</span></h4>\n<p>When A declines the friend request from B, we basically just remove B from the pendingList of A and remove A from the sentFriendRequest of B</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleDeclineFriend = <span class=\"keyword\">async</span> (id) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(id).update(&#123;</span><br><span class=\"line\">    pendingFriends: pendingFriends.filter(<span class=\"function\">(<span class=\"params\">friendId</span>) =&gt;</span> friendId != id &amp;&amp; friendId != docId)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(docId).update(&#123;</span><br><span class=\"line\">    pendingFriends: pendingFriends.filter(<span class=\"function\">(<span class=\"params\">friendId</span>) =&gt;</span> friendId != id &amp;&amp; friendId != docId)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(id).update(&#123;</span><br><span class=\"line\">    sentFriendRequests: sentFriendRequests.filter(<span class=\"function\">(<span class=\"params\">friendId</span>) =&gt;</span> friendId != id &amp;&amp; friendId != docId)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<h4><span id=\"4-remove-someone-from-our-friendlist\">4. Remove someone from our friendlist</span></h4>\n<p>When A removes B from A’s friendlist, we want to remove A from B’s friendList and remove B from A’s friendList.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleRemoveFriend = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  <span class=\"comment\">// console.log(friendList)</span></span><br><span class=\"line\">  db.collection(<span class=\"string\">\"users\"</span>).doc(docId).update(&#123;</span><br><span class=\"line\">    friendList: friendList.filter(<span class=\"function\">(<span class=\"params\">friend</span>) =&gt;</span> friend != friendId &amp;&amp; friend != docId)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  db.collection(<span class=\"string\">\"users\"</span>).doc(friendId).update(&#123;</span><br><span class=\"line\">    friendList: friendList.filter(<span class=\"function\">(<span class=\"params\">friend</span>) =&gt;</span> friend != docId &amp;&amp; friend != friendId)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<p>Right now, we are done with the friends’ relationship operations. Now we will try to display the operations to the screen in the way we want. For example, our current user is <strong>A</strong>. Note that the <em>logic</em> will flow like this. First, next to every user (that is not our friend yet) in the List of Users will have a “<strong>add friend</strong>” button. After sending <strong>B</strong> a friend request, we will change that button to <strong>Pending</strong> and disable it. Then in B’s screen, the buttons next to A will be <strong>yes/no</strong> (represent if B want to add friend A or not). If B choose yes, they will both be added to each other’s <strong>friendList</strong> and remove from the each other list of users. If B choose no, then A will be removed from B’s users list. Here is the ternary expression I used to display this logic in the Dashboard</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">            sentFriendRequests &amp;&amp; sentFriendRequests.includes(id) ?</span><br><span class=\"line\">              (</span><br><span class=\"line\">                &lt;Button onClick=&#123;() =&gt; handleAddFriend(id)&#125; disabled=&#123;<span class=\"literal\">true</span>&#125;&gt;Pending&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">              )</span></span><br><span class=\"line\"><span class=\"regexp\">              :</span></span><br><span class=\"line\"><span class=\"regexp\">              (</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                  &#123;pendingFriends &amp;&amp; pendingFriends.includes(id) ?</span></span><br><span class=\"line\"><span class=\"regexp\">                    (</span></span><br><span class=\"line\"><span class=\"regexp\">                      &lt;div style=&#123;&#123;display: \"flex\", flexDirection:\"row\"&#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                        &lt;Button style=&#123;&#123;marginRight: 20&#125;&#125; onClick=&#123;() =&gt; handleAcceptFriend(id)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                          &lt;FontAwesomeIcon style=&#123;&#123;fontSize: 16&#125;&#125; icon=&#123;faCheck&#125;/</span>&gt;</span><br><span class=\"line\">                        &lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                        &lt;Button onClick=&#123;() =&gt; handleDeclineFriend(id)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                          &lt;FontAwesomeIcon style=&#123;&#123;fontSize: 20&#125;&#125; icon=&#123;faTimes&#125;/</span>&gt;</span><br><span class=\"line\">                        &lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                      &lt;/</span>div&gt;</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                    :</span><br><span class=\"line\">                    (</span><br><span class=\"line\">                      &lt;&gt;</span><br><span class=\"line\">                        &lt;Button onClick=&#123;() =&gt; handleAddFriend(id)&#125; disabled=&#123;pending&#125;&gt;&#123;pending ? <span class=\"string\">\"Pending\"</span> : (</span><br><span class=\"line\">                          &lt;FontAwesomeIcon icon=&#123;faUserPlus&#125;/&gt;</span><br><span class=\"line\">                        )&#125;&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                      &lt;/</span>&gt;</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">              )</span></span><br><span class=\"line\"><span class=\"regexp\">          &#125;</span></span><br></pre></td></tr></table></figure>\n<p>The rest of the dashboard is pretty simple. Here is where I list of the current users that are not my friend.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userList &amp;&amp; userList.map(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!friendList.includes(user.id)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;User id=&#123;user.id&#125; docId=&#123;docId&#125; user=&#123;user.user&#125; /&gt;</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>\n<img src=\"/MessengerClone/allusers.png\">\n<p>And here is where I list my friends in the left side of the dashboard.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;friendList &amp;&amp; friendList.map(<span class=\"function\">(<span class=\"params\">friendId</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Friend sentFriendRequests=&#123;sentFriendRequests&#125; friendList=&#123;friendList&#125; docId=&#123;docId&#125; friendId=&#123;friendId&#125; /&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"3-firebase-storage-to-store-and-upload-images\">3. Firebase storage to store and upload images</span></h3>\n<p>One of the most important features in the app is to handle <strong>profile images</strong>: upload or change them. Here we will use Firebase <strong>Storage</strong> to upload the image and then extract the <strong>link</strong> from Storage to store it to corresponding users’ database</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"file\"</span> onChange=&#123;handleImageAsFile&#125; /&gt;</span><br><span class=\"line\">&lt;button onClick=&#123;handleFirebaseUpload&#125;&gt;Upload&lt;<span class=\"regexp\">/button&gt;</span></span><br></pre></td></tr></table></figure>\n<p>We will display these 2 basic HTML on the screen. 1 is an input where we set the type to files. We will only accept image format here. I will capture the event <strong>handleImageAsFile</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleImageAsFile = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> image = e.target.files[<span class=\"number\">0</span>]</span><br><span class=\"line\">  setImageAsFile(<span class=\"function\"><span class=\"params\">imageAsFile</span> =&gt;</span> image)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Here is an example of the files in storage. Remember the path that leads to the images is:<br>\n&quot;/images/{name of image}&quot;</p>\n<img src=\"/MessengerClone/storage.png\">\n<p>We save our image to a state <strong>imageAsFile</strong>. This will be a <strong>Image File</strong> so we cannot access this yet. From here we have to extract the link to this file from Storage. We will first <strong>upload</strong> the image we selected to Firebase Storage and <strong>access</strong> the <strong>path</strong> that leads to the image using reference and the method <strong>getDownloadURL</strong> of Firebase.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleFirebaseUpload = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (imageAsFile === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`not an image`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> uploadTask = storage.ref(<span class=\"string\">`/images/<span class=\"subst\">$&#123;imageAsFile.name&#125;</span>`</span>).put(imageAsFile)</span><br><span class=\"line\">  uploadTask.on(<span class=\"string\">\"state_changed\"</span>, (snapShot) =&gt; &#123;</span><br><span class=\"line\">  &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;, () =&gt; &#123;</span><br><span class=\"line\">    storage.ref(<span class=\"string\">'images'</span>).child(imageAsFile.name).getDownloadURL()</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">fireBaseUrl</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setImageAsUrl(<span class=\"function\"><span class=\"params\">prevObject</span> =&gt;</span> (&#123; ...prevObject, <span class=\"attr\">imgUrl</span>: fireBaseUrl &#125;))</span><br><span class=\"line\">        db.collection(<span class=\"string\">\"users\"</span>).doc(docId).update(&#123;</span><br><span class=\"line\">          profileImage: fireBaseUrl</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  setOpen(<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Here we will get our downloadURL of the image to be <strong>firebaseURL</strong>. After receiving this, we will save this to the <strong>corresponding</strong> user database of that user. Now all we have to do is take the URL and display it on the screen</p>\n<h3><span id=\"4-real-time-messaging-of-individuals-using-firestore-and-redux\">4. Real-time messaging of individuals using Firestore and Redux</span></h3>\n<p>It has been quite a long set up right … We are finally here, the most important and also the core feature of my project the real-time chat between individuals and groups. In this section 4, I will show you how to use Redux to do real-time messaging.</p>\n<p>First we need to set up <strong>Redux and Redux Thunk</strong> (this is critical in order to perform asynchronous actions in Redux)</p>\n<p>First in the main index.js outside, we must set up as the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">    &lt;BrowserRouter&gt;</span><br><span class=\"line\">        &lt;App /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/BrowserRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Provider&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Basically, the <strong>store</strong> variable will be from Redux and it will contain all of our states. We just need to <strong>wrap</strong> our App with the <strong>Provider</strong> and we are good to go.</p>\n<p>Now we will set up the reducer where will we perform the messaging logic. Below is my reducer folder structure. We will not need the authReducer but just an index.js file and the userReducer</p>\n\n<p>The user.reducer.js will contain all the definitions for the actions (name, type and corresponding payload) that we will perform</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; userConstants &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../actions/constants\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> initState = &#123;</span><br><span class=\"line\">  users: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (state = initState, action) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">`<span class=\"subst\">$&#123;userConstants.GET_REALTIME_USERS&#125;</span>_REQUEST`</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">`<span class=\"subst\">$&#123;userConstants.GET_REALTIME_USERS&#125;</span>_SUCCESS`</span>:</span><br><span class=\"line\">      state = &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        users: action.payload.users</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> userConstants.GET_REALTIME_MESSAGES:</span><br><span class=\"line\">      state = &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        conversations: action.payload.conversations</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">`<span class=\"subst\">$&#123;userConstants.GET_REALTIME_MESSAGES&#125;</span>_FAILURE`</span>:</span><br><span class=\"line\">      state = &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        conversations: []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> userConstants.GET_REALTIME_MESSAGES_GROUP:</span><br><span class=\"line\">      <span class=\"comment\">// console.log(\"have sent message group\")</span></span><br><span class=\"line\">      state = &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        conversationsGroup: action.payload.conversationsGroup</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">`<span class=\"subst\">$&#123;userConstants.GET_REALTIME_MESSAGES_GROUP&#125;</span>_FAILURE`</span>:</span><br><span class=\"line\">      state = &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        conversationsGroup: []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The most important actions here are GET_REALTIME_MESSAGES and GET_REALTIME_MESSAGES_GROUP. In these actions, we will update the <strong>state</strong> conversations (for individuals chat) and conversationsGroup (for group chat) with the <strong>corresponding</strong> newState we got after the user texts something.</p>\n<p>Next we will set up the most <strong>important</strong> file of the webchat, <strong>user.action.js</strong>. This is where all the magic happens !</p>\n<p>The first <strong>asynchronous</strong> action we will perform is <strong>createMessage</strong>. This is fired when the user sends something to another person.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> createMessage = <span class=\"function\">(<span class=\"params\">messageObject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">async</span> (dispatch) =&gt; &#123;</span><br><span class=\"line\">    db.collection(<span class=\"string\">\"conversations\"</span>).add(&#123;</span><br><span class=\"line\">      ...messageObject,</span><br><span class=\"line\">      isView: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      createdAt: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(data)</span></span><br><span class=\"line\">      <span class=\"comment\">//success</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Remember using <strong>Redux Thunk</strong> will help us perform async functions like above. We have a parameter <strong>messageObject</strong>. This parameter will be taken from the client side after the user sent something. REMEMBER THIS PARAMETER.</p>\n<p>After firing createMessage, we will instantly fire the next function below:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getRealTimeConversations = <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">async</span> (dispatch) =&gt; &#123;</span><br><span class=\"line\">    db.collection(<span class=\"string\">\"conversations\"</span>)</span><br><span class=\"line\">    .where(<span class=\"string\">'user_uid_2'</span>, <span class=\"string\">'in'</span>, [user.uid_1, user.uid_2])</span><br><span class=\"line\">    <span class=\"comment\">// .where('user_uid_2', 'in', [user.uid_2, user.uid_1])</span></span><br><span class=\"line\">    .orderBy(<span class=\"string\">\"createdAt\"</span>, <span class=\"string\">\"asc\"</span>)</span><br><span class=\"line\">    .onSnapshot(<span class=\"function\">(<span class=\"params\">snapShot</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> conversations = []</span><br><span class=\"line\">      <span class=\"comment\">//doc.data() -&gt; vao 1 document</span></span><br><span class=\"line\">      snapShot.forEach(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//nếu như conversation của 2 người match, 1 người là ng gửi và ng kia nhận được </span></span><br><span class=\"line\">        <span class=\"comment\">// thì mới push vào conversation</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((doc.data().user_uid_1 === user.uid_1 &amp;&amp; doc.data().user_uid_2 === user.uid_2)</span><br><span class=\"line\">        ||</span><br><span class=\"line\">        (doc.data().user_uid_1 === user.uid_2 &amp;&amp; doc.data().user_uid_2 === user.uid_1))&#123;</span><br><span class=\"line\">          conversations.push(&#123;<span class=\"attr\">id</span>: doc.id, <span class=\"attr\">conver</span>: doc.data()&#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(conversations)</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      dispatch(&#123;</span><br><span class=\"line\">        type: userConstants.GET_REALTIME_MESSAGES,</span><br><span class=\"line\">        payload: &#123; conversations &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>All the encrypted messages will be stored in the conversations collection in Firestore. Here everytime a person sends a message to another person, <strong>we will retake all the data from that conversation in Firestore and add the new message</strong>. This might seem to be time consuming but the next filtering step will improve our <strong>performance</strong> by a lot.</p>\n<p>To query and filter in the Firebase, I use the <strong>where</strong> method. The user.uid_1 and user.uid_2 are the ids (generated by the Firebase Authentication) of the current user and the person you are messaging to. Whenever the <strong>current user</strong> sends a message, it will <strong>reload</strong> the <em>conversation</em> in the database and it will look for all conversation with the user_uid_2 that is contained in the array [user.uid_1 and user.uid_2]. This will ensure that if A sends a message to B, the first <strong>filter</strong> will get all the <strong>conversations</strong> that B is either the sender or the receiver.</p>\n<p>Then we sort the order by ascending because we want the lastest messages to be seen last. Finally, this condition will check if the conversation we are taking from the database is exactly the conversation between A and B</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>((doc.data().user_uid_1 === user.uid_1 &amp;&amp; doc.data().user_uid_2 === user.uid_2)</span><br><span class=\"line\">  ||</span><br><span class=\"line\">  (doc.data().user_uid_1 === user.uid_2 &amp;&amp; doc.data().user_uid_2 === user.uid_1))&#123;</span><br><span class=\"line\">    conversations.push(&#123;<span class=\"attr\">id</span>: doc.id, <span class=\"attr\">conver</span>: doc.data()&#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>After that we will <strong>dispatch</strong> the action with the payload of conversations so that our reducer file will receive the action. So we are finished with the user.action.js. We have finished setting up for the real-time chat. Now let’s move to the HomePage Screen (which is the Chat screen)</p>\n<p>const initChat = (user) =&gt; {<br>\nsetCurrentChatId(<a href=\"http://user.id\" target=\"_blank\" rel=\"noopener\">user.id</a>)<br>\nsetChatStarted(true)<br>\nsetChatGroup(false)<br>\nsetChatUser(<code>${user.data.firstName} ${user.data.lastName}</code>)<br>\ndispatch(getRealTimeConversations({ uid_1: docId, uid_2: <a href=\"http://user.id\" target=\"_blank\" rel=\"noopener\">user.id</a> }))<br>\n// setUserUid(user.data.uid)<br>\n// console.log(user)<br>\n}</p>\n<p>First, we have to set up the conversations column, which lists all of our friends and groups (just like in Messenger). Here is the set up for the column</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    newCurrentFriendList &amp;&amp; newCurrentFriendList.map(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(user.id != docId)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          &lt;User chatGroup=&#123;chatGroup&#125; currentChatId=&#123;currentChatId&#125; id=&#123;user.id&#125; key=&#123;user.data.uid&#125; user=&#123;user&#125; onClick=&#123;initChat&#125; /&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>We will map out all of the current user’s friends, each in a component called <strong>User</strong>.</p>\n<img src=\"/MessengerClone/sideconver.png\">\n<p>When we <strong>click</strong> into each user, we will have to initiate the conversations between 2 people (which means we need to use the <strong>actions</strong> we just wrote in Redux).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initChat = <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setCurrentChatId(user.id)</span><br><span class=\"line\">  setChatStarted(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  setChatGroup(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  setChatUser(<span class=\"string\">`<span class=\"subst\">$&#123;user.data.firstName&#125;</span> <span class=\"subst\">$&#123;user.data.lastName&#125;</span>`</span>)</span><br><span class=\"line\">  dispatch(getRealTimeConversations(&#123; <span class=\"attr\">uid_1</span>: docId, <span class=\"attr\">uid_2</span>: user.id &#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We get the <strong>id</strong> of the user that we just clicked into as <strong>id</strong>. Then we set the ChatUser as the name of the user we are chatting with. Finally, we dispatch the action <strong>getRealTimeConversations</strong> to load all the conversations with that person.</p>\n<p>Next, when we send a message to a user, we need to initiate the the <strong>sendMessage</strong> function to execute the action we did in user.action.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sendMessage = <span class=\"keyword\">async</span> (e) =&gt; &#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> messageObject = &#123;</span><br><span class=\"line\">    user_uid_1: docId,</span><br><span class=\"line\">    user_uid_2: currentChatId,</span><br><span class=\"line\">    message: message,</span><br><span class=\"line\">    haveReply: replyMessage ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">    replyMessage: replyMessage</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(messageObject)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (message) &#123;</span><br><span class=\"line\">    dispatch(createMessage(messageObject))</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      setMessage(<span class=\"string\">''</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setReplyMessage(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Remember the <strong>messageObject</strong> that I told you to remember. Inside the messageObject will be all the information about the 2 users and that message: <strong>message</strong> (the text that the user sent), <strong>haveReply</strong> (Is the message replied or not), <strong>replyMessage</strong> (the replyMessage if this message has 1). Finally, we will dispatch the <strong>createMessage</strong> action from the user.action.js</p>\n<p>Here is the most sophisticated part of the project, where I set up and display all the messages:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(chatStarted &amp;&amp; !chatGroup) ?</span><br><span class=\"line\">user.conversations &amp;&amp; user.conversations.map(<span class=\"function\">(<span class=\"params\">conver</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div style=&#123;&#123; <span class=\"attr\">textAlign</span>: conver.conver.user_uid_1 == docId ? <span class=\"string\">'right'</span> : <span class=\"string\">\"left\"</span> &#125;&#125;&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        conver.conver.user_uid_1 == docId ?</span><br><span class=\"line\">          (&lt;div className=\"maindiv\" style=&#123;&#123; display: \"flex\", flexDirection: \"column\", alignItems: \"flex-end\", zIndex: 9999 &#125;&#125;&gt;</span><br><span class=\"line\">            &#123;(open6 &amp;&amp; (currentMessageEmoji &amp;&amp; currentMessageEmoji == conver.id)) ? (</span><br><span class=\"line\">              &lt;div className=\"emojiContainer\"&gt;</span><br><span class=\"line\">                &lt;div onClick=&#123;(e) =&gt; handleReaction(e, conver.id)&#125; className=\"emoji-li\"&gt;&#123;emoji.getUnicode(\"heart\")&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div onClick=&#123;(e) =&gt; handleReaction(e, conver.id)&#125; className=\"emoji-li\"&gt;&#123;emoji.getUnicode(emoji.names[11])&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div onClick=&#123;(e) =&gt; handleReaction(e, conver.id)&#125; className=\"emoji-li\"&gt;&#123;emoji.getUnicode(emoji.names[70])&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div onClick=&#123;(e) =&gt; handleReaction(e, conver.id)&#125; className=\"emoji-li\"&gt;&#123;emoji.getUnicode(emoji.names[73])&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div onClick=&#123;(e) =&gt; handleReaction(e, conver.id)&#125; className=\"emoji-li\"&gt;&#123;emoji.getUnicode(emoji.names[55])&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div onClick=&#123;(e) =&gt; handleReaction(e, conver.id)&#125; className=\"emoji-li\"&gt;&#123;emoji.getUnicode(emoji.names[116])&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div onClick=&#123;(e) =&gt; handleReaction(e, conver.id)&#125; className=\"emoji-li\"&gt;&#123;emoji.getUnicode(emoji.names[117])&#125;&lt;/div&gt;</span><br><span class=\"line\">              &lt;/div&gt;</span><br><span class=\"line\">            ) : null&#125;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">              &lt;div className=\"maindiv\" key=&#123;conver.id&#125; className=\"messageContainerCurrent\"&gt;</span><br><span class=\"line\">                &lt;div className=\"hide\" id=&#123;conver.id&#125; onClick=&#123;(e) =&gt; handleShowEmojis(e, conver.id)&#125;&gt;&#123;emoji.getUnicode(\"grinning\")&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;FontAwesomeIcon className=\"hide\" onClick=&#123;(e) =&gt; handleReplyMess(e, conver.id)&#125; icon=&#123;faReply&#125; /&gt;</span><br><span class=\"line\">                &lt;div className=&#123;conver.conver.user_uid_1 == docId ? \"messageStyle\" : \"messageStyleWhite\"&#125; &gt;</span><br><span class=\"line\">                  &#123;conver.conver.haveReply ? (</span><br><span class=\"line\">                    &lt;div className=\"chatReplyMessage\"&gt;</span><br><span class=\"line\">                      &#123;conver.conver.replyMessage&#125;</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                  ) : null&#125;</span><br><span class=\"line\">                  &#123;conver.conver.message&#125;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">              &lt;/div&gt;</span><br><span class=\"line\">              &lt;div className=\"emojiMessage\" style=&#123;&#123; position: \"absolute\", right: \"1%\", marginTop: -16 &#125;&#125;&gt;&#123;conver.conver.emojiSingle&#125;&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">          )</span><br><span class=\"line\">          :</span><br></pre></td></tr></table></figure>\n<p>The above code is the display of the message from the sender. The message from the receiver will be the same but just  A <strong>message</strong> can be splited into <strong>4 parts</strong>:</p>\n<ol>\n<li>Checking what user this is the sender or the receiver</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conver.conver.user_uid_1 == docId ?</span><br></pre></td></tr></table></figure>\n<p>This line of code helps us know that this is the sender of the message.</p>\n<ol start=\"2\">\n<li>Emoji container</li>\n</ol>\n<p>Do you know the emojis we typically use in Messenger. Here we use a emoji unicode library to display the emojis</p>\n<ol start=\"3\">\n<li>Showing the Reacted Emoji</li>\n</ol>\n<p>Here is where we handle the event of a user reacts to a message. We need a container to display the emoji. For individuals chatting, we only need to add an <strong>emojiSelected</strong> field in each message document.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleReaction = <span class=\"keyword\">async</span> (e, id) =&gt; &#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  setSelectedEmoji(e.currentTarget.textContent)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> emojiSelected = e.currentTarget.textContent</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"conversations\"</span>).doc(id).update(&#123;</span><br><span class=\"line\">    emojiSingle: emojiSelected == selectedEmojiOnDatabase ? <span class=\"string\">\"\"</span> : emojiSelected</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"conversations\"</span>).doc(id).onSnapshot(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (doc) &#123;</span><br><span class=\"line\">      setSelectedEmojiOnDatabase(doc.data().emojiSingle)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  setOpen6(<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>Displaying the Reply portion</li>\n</ol>\n<p>Of course, we need a reply function for each message. Here we basically add another field <strong>replyMessage</strong> to each message document in the database.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleReplyMess = <span class=\"function\">(<span class=\"params\">e, id</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(\"reply\")</span></span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  db.collection(<span class=\"string\">\"conversations\"</span>).doc(id).get().then(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setReplyMessage(doc.data().message)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And thats it, we can now chat individually to each other. For the groups’s function is really similar to the individual chat so I will let the <a href=\"https://github.com/MRSNOO/Messenger-Clone-New\" target=\"_blank\" rel=\"noopener\">Github Link to Project</a> so that you can understand it better. Here is the link to the Website <a href=\"https://todoapp-aaff8.web.app/\" target=\"_blank\" rel=\"noopener\">MessengerClone</a>. I hope you can experience the website and give me some feedback.</p>\n<h3><span id=\"i-hope-you-like-this-post-it-is-really-long-but-it-contains-a-lot-of-useful-information-about-web-technologies-i-will-see-you-guys-in-my-next-post\">I hope you like this post. It is really long but it contains a lot of useful information about web technologies. I will see you guys in my next post.</span></h3>\n","site":{"data":{}},"excerpt":"","more":"<h2>Welcome back to my tech blog. This time I will show you my work during the winter break: Messenger Clone</h2>\n<p>During the winter break, as everybody knows, there were many crashes to big platforms such as Facebook and Messenger. Noticing this, I decided to create a <strong>real-time messaging</strong> platform for me and my friends (potentially become bigger in the future). I hope you will find this post interesting because it has a lot of cool techniques that I have just learned.</p>\n<h3>List of important parts in the project:</h3>\n<ol>\n<li>Firebase Authentication system</li>\n<li>Friends relationship management (add, remove friends like on Facebook)</li>\n<li>Firebase storage to store and upload images</li>\n<li>Real-time messaging of individuals using Firestore and Redux</li>\n<li>Real-time messaging of groups using Firestore and Redux</li>\n</ol>\n<h3>Important Note:</h3>\n<p>One important thing to note here is that I am <strong>always</strong> using the information and the ids from Firestore not from the auto generated user of Firebase Authentication. This means that anytime the user logs in and inputs any information, it will be uploaded encriptedly to the Firestore and we will draw the information from the database down to our client.</p>\n<h3>Setting Up Firebase in a React Project</h3>\n<p>I have written a blog about how to set up firebase from start to finish <a href=\"https://decodecraft.com/TodoApp/\">Here</a>. It is vital that you set up everything correctly in order for Firebase to work. In this project, I will use 3 services Firebase Firestore, Firebase Authentication, and Firebase Storage</p>\n<h3>1. Authentication</h3>\n<h4>1.1 Login Form</h4>\n<p>Definitely one of the core parts of any project. In this project, I created a Private Router for authentication which will only allow authenticated users to enter the platform.</p>\n<p>We start by creating 2 pages with 2 forms: Login and Signup. We will use useRef to handle the value that the users input in both forms.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;Form onSubmit=&#123;handleSubmit&#125;&gt;</span><br><span class=\"line\">  &lt;Form.Group id=<span class=\"string\">\"email\"</span>&gt;</span><br><span class=\"line\">    &lt;Form.Label&gt;Email&lt;<span class=\"regexp\">/Form.Label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Form.Control type=\"email\" ref=&#123;emailRef&#125; required&gt;&lt;/</span>Form.Control&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Form.Group&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Form.Group id=\"password\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Form.Label&gt;Password&lt;/</span>Form.Label&gt;</span><br><span class=\"line\">    &lt;Form.Control type=<span class=\"string\">\"password\"</span> ref=&#123;passwordRef&#125; required&gt;&lt;<span class=\"regexp\">/Form.Control&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Form.Group&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;Button disabled=&#123;loading&#125; className=<span class=\"string\">\"w-100\"</span> type=<span class=\"string\">\"submit\"</span>&gt;</span><br><span class=\"line\">    Log <span class=\"keyword\">in</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Form&gt;</span><br></pre></td></tr></table></figure>\n<p>The form is structure quite standardly. I am using all the components in <strong>react-bootstrap</strong> (Form, Button, Modal). We have 2 form groups correspond to the email and the password. We then save the reference using <strong>useRef</strong> to store the input from user. Finally, there is a button to handle the submit event of the form.</p>\n<p>In the <strong>submit</strong> event, we will execute the following actions. First we will run the login function with email and password. This action is loaded from a <strong>useContext</strong> which I will mention later. Then we will store the result of the successful <strong>Authentication</strong> call and save it to the Database and <strong>LocalStorage</strong> (this is used to remember the user if you want to have that feature). I am also using <strong>useHistory</strong> to navigate between the webpages</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      setError(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">      setLoading(<span class=\"literal\">true</span>)</span><br><span class=\"line\">      <span class=\"keyword\">await</span> login(emailRef.current.value, passwordRef.current.value)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> name = data.user.displayName.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> firstName = name[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> lastName = name[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> loggedInUser = &#123;</span><br><span class=\"line\">            firstName,</span><br><span class=\"line\">            lastName,</span><br><span class=\"line\">            uid: data.user.uid,</span><br><span class=\"line\">            email: data.user.email</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        localStorage.setItem(<span class=\"string\">'user'</span>, <span class=\"built_in\">JSON</span>.stringify(loggedInUser));</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      history.push(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      setError(<span class=\"string\">\"Failed to login. Please check your password or username and try again\"</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>This is an application of try catch function. Note that here the <strong>login</strong> will be imported from our useContext (an Authentication context) and will be described later in section 1.3</p>\n<h4>1.2 Signup Form</h4>\n<p>This is very similar to the Login Form. It has 5 form groups firstname, lastname, <strong>email, password and confirmpassword</strong> (you can add more but the last 3 is a must).</p>\n<p>Here we will also use <strong>useRef</strong> to handle the input value from the users. The Signup Form is below:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Form onSubmit=&#123;handleSubmit&#125;&gt;</span><br><span class=\"line\">          &lt;Form.Group id=<span class=\"string\">\"email\"</span>&gt;</span><br><span class=\"line\">            &lt;Form.Label&gt;Email&lt;<span class=\"regexp\">/Form.Label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Form.Control type=\"email\" ref=&#123;emailRef&#125; required&gt;&lt;/</span>Form.Control&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Form.Group&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Form.Group id=\"password\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Form.Label&gt;Password&lt;/</span>Form.Label&gt;</span><br><span class=\"line\">            &lt;Form.Control type=<span class=\"string\">\"password\"</span> ref=&#123;passwordRef&#125; required&gt;&lt;<span class=\"regexp\">/Form.Control&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>Form.Group&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;Form.Group id=<span class=\"string\">\"password-confirm\"</span>&gt;</span><br><span class=\"line\">            &lt;Form.Label&gt;Password Confirmation&lt;<span class=\"regexp\">/Form.Label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Form.Control type=\"password\" ref=&#123;passwordConfirmRef&#125; required&gt;&lt;/</span>Form.Control&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Form.Group&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Form.Group id=\"first-name\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Form.Label&gt;First Name&lt;/</span>Form.Label&gt;</span><br><span class=\"line\">            &lt;Form.Control type=<span class=\"string\">\"first-name\"</span> ref=&#123;firstNameRef&#125; required&gt;&lt;<span class=\"regexp\">/Form.Control&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>Form.Group&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;Form.Group id=<span class=\"string\">\"last-name\"</span>&gt;</span><br><span class=\"line\">            &lt;Form.Label&gt;Last Name&lt;<span class=\"regexp\">/Form.Label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Form.Control type=\"last-name\" ref=&#123;lastNameRef&#125; required&gt;&lt;/</span>Form.Control&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Form.Group&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Button disabled=&#123;loading&#125; className=\"w-100\" type=\"submit\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            Sign Up</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>Button&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Form&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Again, very similar to the Login Form, we will have a submit button to handle the <strong>submit event</strong> of the form. Here is when it gets a bit <strong>different</strong>.</p>\n<p>We will first check if the <strong>password</strong> is equal to the <strong>confirmpassword</strong>. I think Bootstrap Forms requires 6 characters at the minimum but you can freely add more conditions. If they are equal, we would perform the try catch function just as in the Login Form:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">  setError(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  setLoading(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> signup(emailRef.current.value, passwordRef.current.value)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> result.user.updateProfile(&#123;</span><br><span class=\"line\">    displayName: firstNameRef.current.value + <span class=\"string\">\" \"</span> + lastNameRef.current.value</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).add(&#123;</span><br><span class=\"line\">    email: emailRef.current.value,</span><br><span class=\"line\">    firstName: firstNameRef.current.value,</span><br><span class=\"line\">    lastName: lastNameRef.current.value,</span><br><span class=\"line\">    uid: result.user.uid,</span><br><span class=\"line\">    createdAt: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">    isOnline: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    profileImage: <span class=\"string\">\"https://i.pinimg.com/originals/e0/7a/22/e07a22eafdb803f1f26bf60de2143f7b.png\"</span>,</span><br><span class=\"line\">    friendList: [],</span><br><span class=\"line\">    pendingFriends: [],</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> loggedInUser = &#123;</span><br><span class=\"line\">    firstName: firstNameRef.current.value,</span><br><span class=\"line\">    lastName: lastNameRef.current.value,</span><br><span class=\"line\">    uid: result.user.uid,</span><br><span class=\"line\">    email: result.user.email</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> localStorage.setItem(<span class=\"string\">\"user\"</span>, <span class=\"built_in\">JSON</span>.stringify(loggedInUser))</span><br><span class=\"line\">  history.push(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>&#123;</span><br><span class=\"line\">  setError(<span class=\"string\">\"Failed to create an account. Password must be at least 6 characters or username already existed\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We set the <strong>result</strong> variable to be the result of the successful call to the signup function of Firebase Authentication. Again, the <strong>signup</strong> function will be <strong>imported</strong> from the <strong>useContext</strong> that we will mention in section 1.3. Then I will update the <strong>displayName</strong> of the currentUser that is successfully signed up to Firebase (note that the displayName is a provided feature). However, as I have mentioned in my <strong>Important Notes</strong> I will uploaded the users’ information to Firestore even if we already have the currentUser from Authentication. This will allows us to freely manage the encripted information and apply it to later stage of the project.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).add(&#123;</span><br><span class=\"line\">  email: emailRef.current.value,</span><br><span class=\"line\">  firstName: firstNameRef.current.value,</span><br><span class=\"line\">  lastName: lastNameRef.current.value,</span><br><span class=\"line\">  uid: result.user.uid,</span><br><span class=\"line\">  createdAt: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">  isOnline: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  profileImage: <span class=\"string\">\"https://i.pinimg.com/originals/e0/7a/22/e07a22eafdb803f1f26bf60de2143f7b.png\"</span>,</span><br><span class=\"line\">  friendList: [],</span><br><span class=\"line\">  pendingFriends: [],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Here is the function I called to add to my Firestore database. It includes some fields such as <strong>uid</strong> (id given to us from Firebase Authentication), <strong>createdAt</strong> (exact time that the user signed up), isOnline (manage if the user is currently online or not), <strong>profileImage</strong> (to store profile image), <strong>friendList</strong> (to store our current friendlist), and <strong>pendingFriends</strong> (to store the users sent us a request but we have not respond). After pushing the data to Firestore, we are basically done for signup. Now we should switch to Login page and start building our <strong>Dashboard</strong>. Note that in my website I also built a <strong>Update Profile</strong> and a <strong>Forgot Password</strong> page but that is for later and not the main function of the project</p>\n<h3>2. Friends relationship management (add, remove friends like on Facebook)</h3>\n<p>This will be our Dashboard page. It will help you show the personal information, manage your friends, and the list of all users currently using the app so that people can <strong>add friend</strong> and connect to each other. So the core function of this page is to handle <strong>adding and removing</strong> friends. Like I mentioned in the Signup section (1.2), we will use 2 arrays to handle friends <strong>pendingFriends</strong> (users sent us a request but we have not respond) and <strong>friendList</strong> (the people are in our friends’ list)</p>\n<p>This is my dashboard page:</p>\n<img src=\"/MessengerClone/dashboard.png\">\n<p>It has a really simple design with a navigating bar (drawer) to the left side. Now, I will show you how to create the <strong>relationship</strong> between the users.</p>\n<p>First, I will use a useEffect to call to the Firestore database and list out all the users that are using the app. In order to do this, we create a <strong>User</strong> component that has 3 props:<br>\n<strong>id</strong> (the document id of the friend that I sent a friend request to in Firestore), <strong>docId</strong> (the document id of the current user in Firestore), and <strong>user</strong> (the data of the current usere in Firestore).</p>\n<p>Everytime we want to pull real-time information from the database to reflect the changes, we will write a useEffect hook. Here I have <strong>pendingFriends</strong> (users sent us a request but we have not respond) and <strong>sentFriendRequests</strong> (users that we sent a friend request to). Remember this data is taken from the <strong>user</strong> collection in the database</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  db.collection(<span class=\"string\">\"users\"</span>).doc(docId).onSnapshot(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (doc.data().pendingFriends) &#123;</span><br><span class=\"line\">      setPendingFriends(doc.data().pendingFriends)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  db.collection(<span class=\"string\">\"users\"</span>).doc(docId).onSnapshot(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (doc.data().sentFriendRequests) &#123;</span><br><span class=\"line\">      setSentFriendRequests(doc.data().sentFriendRequests)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n<p>Second, we will have 4 operations that we want to execute: <strong>sent</strong> a friend request to someone, <strong>accept</strong> a friend request, <strong>decline</strong> a friend request, and <strong>remove</strong> someone from our friend list. The way you handle these actions is up to you but here is how I handle it</p>\n<h4>1. Sent a friend request to someone</h4>\n<p>When we sent a friend request to someone, we want to add the document id of that user to our sentFriendRequest list and add the current user’s document id to the pendingList of that user.<br>\nFor example, A sent to B a request -&gt; add B to <strong>sentFriendRequest</strong> list of A and add A to <strong>pendingList</strong> of B. Here is how to execute it. In Firebase, whenever we want to change a array type data, we can use the <strong>FieldValue.arrayUnion</strong> provided by Firebase</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> handleAddFriend = <span class=\"keyword\">async</span> (id) =&gt; &#123;</span><br><span class=\"line\">  setPending(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(id).update(&#123;</span><br><span class=\"line\">    pendingFriends: firebase.firestore.FieldValue.arrayUnion(docId)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(docId).update(&#123;</span><br><span class=\"line\">    sentFriendRequests: firebase.firestore.FieldValue.arrayUnion(id)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4>2. Accept a friend request from someone</h4>\n<p>When A accepts B friend request, we want to add A to B’s <strong>friendList</strong>, add B to A’s friendList, remove B from <strong>pendingList</strong> of A and remove A from <strong>sendFriendRequest</strong> list of B. Here is the code to perform this action</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleAcceptFriend = <span class=\"keyword\">async</span> (id) =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(docId).update(&#123;</span><br><span class=\"line\">  friendList: firebase.firestore.FieldValue.arrayUnion(id)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(id).update(&#123;</span><br><span class=\"line\">  friendList: firebase.firestore.FieldValue.arrayUnion(docId)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(docId).update(&#123;</span><br><span class=\"line\">  pendingFriends: pendingFriends.filter(<span class=\"function\">(<span class=\"params\">friendId</span>) =&gt;</span> friendId != id &amp;&amp; friendId != docId)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(id).update(&#123;</span><br><span class=\"line\">  sentFriendRequests: sentFriendRequests.filter(<span class=\"function\">(<span class=\"params\">friendId</span>) =&gt;</span> friendId != docId)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4>3. Decline a friend request of someone</h4>\n<p>When A declines the friend request from B, we basically just remove B from the pendingList of A and remove A from the sentFriendRequest of B</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleDeclineFriend = <span class=\"keyword\">async</span> (id) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(id).update(&#123;</span><br><span class=\"line\">    pendingFriends: pendingFriends.filter(<span class=\"function\">(<span class=\"params\">friendId</span>) =&gt;</span> friendId != id &amp;&amp; friendId != docId)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(docId).update(&#123;</span><br><span class=\"line\">    pendingFriends: pendingFriends.filter(<span class=\"function\">(<span class=\"params\">friendId</span>) =&gt;</span> friendId != id &amp;&amp; friendId != docId)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"users\"</span>).doc(id).update(&#123;</span><br><span class=\"line\">    sentFriendRequests: sentFriendRequests.filter(<span class=\"function\">(<span class=\"params\">friendId</span>) =&gt;</span> friendId != id &amp;&amp; friendId != docId)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<h4>4. Remove someone from our friendlist</h4>\n<p>When A removes B from A’s friendlist, we want to remove A from B’s friendList and remove B from A’s friendList.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleRemoveFriend = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  <span class=\"comment\">// console.log(friendList)</span></span><br><span class=\"line\">  db.collection(<span class=\"string\">\"users\"</span>).doc(docId).update(&#123;</span><br><span class=\"line\">    friendList: friendList.filter(<span class=\"function\">(<span class=\"params\">friend</span>) =&gt;</span> friend != friendId &amp;&amp; friend != docId)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  db.collection(<span class=\"string\">\"users\"</span>).doc(friendId).update(&#123;</span><br><span class=\"line\">    friendList: friendList.filter(<span class=\"function\">(<span class=\"params\">friend</span>) =&gt;</span> friend != docId &amp;&amp; friend != friendId)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<p>Right now, we are done with the friends’ relationship operations. Now we will try to display the operations to the screen in the way we want. For example, our current user is <strong>A</strong>. Note that the <em>logic</em> will flow like this. First, next to every user (that is not our friend yet) in the List of Users will have a “<strong>add friend</strong>” button. After sending <strong>B</strong> a friend request, we will change that button to <strong>Pending</strong> and disable it. Then in B’s screen, the buttons next to A will be <strong>yes/no</strong> (represent if B want to add friend A or not). If B choose yes, they will both be added to each other’s <strong>friendList</strong> and remove from the each other list of users. If B choose no, then A will be removed from B’s users list. Here is the ternary expression I used to display this logic in the Dashboard</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">            sentFriendRequests &amp;&amp; sentFriendRequests.includes(id) ?</span><br><span class=\"line\">              (</span><br><span class=\"line\">                &lt;Button onClick=&#123;() =&gt; handleAddFriend(id)&#125; disabled=&#123;<span class=\"literal\">true</span>&#125;&gt;Pending&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">              )</span></span><br><span class=\"line\"><span class=\"regexp\">              :</span></span><br><span class=\"line\"><span class=\"regexp\">              (</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                  &#123;pendingFriends &amp;&amp; pendingFriends.includes(id) ?</span></span><br><span class=\"line\"><span class=\"regexp\">                    (</span></span><br><span class=\"line\"><span class=\"regexp\">                      &lt;div style=&#123;&#123;display: \"flex\", flexDirection:\"row\"&#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                        &lt;Button style=&#123;&#123;marginRight: 20&#125;&#125; onClick=&#123;() =&gt; handleAcceptFriend(id)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                          &lt;FontAwesomeIcon style=&#123;&#123;fontSize: 16&#125;&#125; icon=&#123;faCheck&#125;/</span>&gt;</span><br><span class=\"line\">                        &lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                        &lt;Button onClick=&#123;() =&gt; handleDeclineFriend(id)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                          &lt;FontAwesomeIcon style=&#123;&#123;fontSize: 20&#125;&#125; icon=&#123;faTimes&#125;/</span>&gt;</span><br><span class=\"line\">                        &lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                      &lt;/</span>div&gt;</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                    :</span><br><span class=\"line\">                    (</span><br><span class=\"line\">                      &lt;&gt;</span><br><span class=\"line\">                        &lt;Button onClick=&#123;() =&gt; handleAddFriend(id)&#125; disabled=&#123;pending&#125;&gt;&#123;pending ? <span class=\"string\">\"Pending\"</span> : (</span><br><span class=\"line\">                          &lt;FontAwesomeIcon icon=&#123;faUserPlus&#125;/&gt;</span><br><span class=\"line\">                        )&#125;&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                      &lt;/</span>&gt;</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">              )</span></span><br><span class=\"line\"><span class=\"regexp\">          &#125;</span></span><br></pre></td></tr></table></figure>\n<p>The rest of the dashboard is pretty simple. Here is where I list of the current users that are not my friend.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userList &amp;&amp; userList.map(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!friendList.includes(user.id)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;User id=&#123;user.id&#125; docId=&#123;docId&#125; user=&#123;user.user&#125; /&gt;</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>\n<img src=\"/MessengerClone/allusers.png\">\n<p>And here is where I list my friends in the left side of the dashboard.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;friendList &amp;&amp; friendList.map(<span class=\"function\">(<span class=\"params\">friendId</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Friend sentFriendRequests=&#123;sentFriendRequests&#125; friendList=&#123;friendList&#125; docId=&#123;docId&#125; friendId=&#123;friendId&#125; /&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)&#125;</span><br></pre></td></tr></table></figure>\n<h3>3. Firebase storage to store and upload images</h3>\n<p>One of the most important features in the app is to handle <strong>profile images</strong>: upload or change them. Here we will use Firebase <strong>Storage</strong> to upload the image and then extract the <strong>link</strong> from Storage to store it to corresponding users’ database</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"file\"</span> onChange=&#123;handleImageAsFile&#125; /&gt;</span><br><span class=\"line\">&lt;button onClick=&#123;handleFirebaseUpload&#125;&gt;Upload&lt;<span class=\"regexp\">/button&gt;</span></span><br></pre></td></tr></table></figure>\n<p>We will display these 2 basic HTML on the screen. 1 is an input where we set the type to files. We will only accept image format here. I will capture the event <strong>handleImageAsFile</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleImageAsFile = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> image = e.target.files[<span class=\"number\">0</span>]</span><br><span class=\"line\">  setImageAsFile(<span class=\"function\"><span class=\"params\">imageAsFile</span> =&gt;</span> image)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Here is an example of the files in storage. Remember the path that leads to the images is:<br>\n&quot;/images/{name of image}&quot;</p>\n<img src=\"/MessengerClone/storage.png\">\n<p>We save our image to a state <strong>imageAsFile</strong>. This will be a <strong>Image File</strong> so we cannot access this yet. From here we have to extract the link to this file from Storage. We will first <strong>upload</strong> the image we selected to Firebase Storage and <strong>access</strong> the <strong>path</strong> that leads to the image using reference and the method <strong>getDownloadURL</strong> of Firebase.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleFirebaseUpload = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (imageAsFile === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`not an image`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> uploadTask = storage.ref(<span class=\"string\">`/images/<span class=\"subst\">$&#123;imageAsFile.name&#125;</span>`</span>).put(imageAsFile)</span><br><span class=\"line\">  uploadTask.on(<span class=\"string\">\"state_changed\"</span>, (snapShot) =&gt; &#123;</span><br><span class=\"line\">  &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;, () =&gt; &#123;</span><br><span class=\"line\">    storage.ref(<span class=\"string\">'images'</span>).child(imageAsFile.name).getDownloadURL()</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">fireBaseUrl</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setImageAsUrl(<span class=\"function\"><span class=\"params\">prevObject</span> =&gt;</span> (&#123; ...prevObject, <span class=\"attr\">imgUrl</span>: fireBaseUrl &#125;))</span><br><span class=\"line\">        db.collection(<span class=\"string\">\"users\"</span>).doc(docId).update(&#123;</span><br><span class=\"line\">          profileImage: fireBaseUrl</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  setOpen(<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Here we will get our downloadURL of the image to be <strong>firebaseURL</strong>. After receiving this, we will save this to the <strong>corresponding</strong> user database of that user. Now all we have to do is take the URL and display it on the screen</p>\n<h3>4. Real-time messaging of individuals using Firestore and Redux</h3>\n<p>It has been quite a long set up right … We are finally here, the most important and also the core feature of my project the real-time chat between individuals and groups. In this section 4, I will show you how to use Redux to do real-time messaging.</p>\n<p>First we need to set up <strong>Redux and Redux Thunk</strong> (this is critical in order to perform asynchronous actions in Redux)</p>\n<p>First in the main index.js outside, we must set up as the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">    &lt;BrowserRouter&gt;</span><br><span class=\"line\">        &lt;App /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/BrowserRouter&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Provider&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Basically, the <strong>store</strong> variable will be from Redux and it will contain all of our states. We just need to <strong>wrap</strong> our App with the <strong>Provider</strong> and we are good to go.</p>\n<p>Now we will set up the reducer where will we perform the messaging logic. Below is my reducer folder structure. We will not need the authReducer but just an index.js file and the userReducer</p>\n\n<p>The user.reducer.js will contain all the definitions for the actions (name, type and corresponding payload) that we will perform</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; userConstants &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../actions/constants\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> initState = &#123;</span><br><span class=\"line\">  users: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (state = initState, action) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">`<span class=\"subst\">$&#123;userConstants.GET_REALTIME_USERS&#125;</span>_REQUEST`</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">`<span class=\"subst\">$&#123;userConstants.GET_REALTIME_USERS&#125;</span>_SUCCESS`</span>:</span><br><span class=\"line\">      state = &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        users: action.payload.users</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> userConstants.GET_REALTIME_MESSAGES:</span><br><span class=\"line\">      state = &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        conversations: action.payload.conversations</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">`<span class=\"subst\">$&#123;userConstants.GET_REALTIME_MESSAGES&#125;</span>_FAILURE`</span>:</span><br><span class=\"line\">      state = &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        conversations: []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> userConstants.GET_REALTIME_MESSAGES_GROUP:</span><br><span class=\"line\">      <span class=\"comment\">// console.log(\"have sent message group\")</span></span><br><span class=\"line\">      state = &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        conversationsGroup: action.payload.conversationsGroup</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">`<span class=\"subst\">$&#123;userConstants.GET_REALTIME_MESSAGES_GROUP&#125;</span>_FAILURE`</span>:</span><br><span class=\"line\">      state = &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        conversationsGroup: []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The most important actions here are GET_REALTIME_MESSAGES and GET_REALTIME_MESSAGES_GROUP. In these actions, we will update the <strong>state</strong> conversations (for individuals chat) and conversationsGroup (for group chat) with the <strong>corresponding</strong> newState we got after the user texts something.</p>\n<p>Next we will set up the most <strong>important</strong> file of the webchat, <strong>user.action.js</strong>. This is where all the magic happens !</p>\n<p>The first <strong>asynchronous</strong> action we will perform is <strong>createMessage</strong>. This is fired when the user sends something to another person.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> createMessage = <span class=\"function\">(<span class=\"params\">messageObject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">async</span> (dispatch) =&gt; &#123;</span><br><span class=\"line\">    db.collection(<span class=\"string\">\"conversations\"</span>).add(&#123;</span><br><span class=\"line\">      ...messageObject,</span><br><span class=\"line\">      isView: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      createdAt: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(data)</span></span><br><span class=\"line\">      <span class=\"comment\">//success</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Remember using <strong>Redux Thunk</strong> will help us perform async functions like above. We have a parameter <strong>messageObject</strong>. This parameter will be taken from the client side after the user sent something. REMEMBER THIS PARAMETER.</p>\n<p>After firing createMessage, we will instantly fire the next function below:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getRealTimeConversations = <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">async</span> (dispatch) =&gt; &#123;</span><br><span class=\"line\">    db.collection(<span class=\"string\">\"conversations\"</span>)</span><br><span class=\"line\">    .where(<span class=\"string\">'user_uid_2'</span>, <span class=\"string\">'in'</span>, [user.uid_1, user.uid_2])</span><br><span class=\"line\">    <span class=\"comment\">// .where('user_uid_2', 'in', [user.uid_2, user.uid_1])</span></span><br><span class=\"line\">    .orderBy(<span class=\"string\">\"createdAt\"</span>, <span class=\"string\">\"asc\"</span>)</span><br><span class=\"line\">    .onSnapshot(<span class=\"function\">(<span class=\"params\">snapShot</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> conversations = []</span><br><span class=\"line\">      <span class=\"comment\">//doc.data() -&gt; vao 1 document</span></span><br><span class=\"line\">      snapShot.forEach(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//nếu như conversation của 2 người match, 1 người là ng gửi và ng kia nhận được </span></span><br><span class=\"line\">        <span class=\"comment\">// thì mới push vào conversation</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((doc.data().user_uid_1 === user.uid_1 &amp;&amp; doc.data().user_uid_2 === user.uid_2)</span><br><span class=\"line\">        ||</span><br><span class=\"line\">        (doc.data().user_uid_1 === user.uid_2 &amp;&amp; doc.data().user_uid_2 === user.uid_1))&#123;</span><br><span class=\"line\">          conversations.push(&#123;<span class=\"attr\">id</span>: doc.id, <span class=\"attr\">conver</span>: doc.data()&#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(conversations)</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      dispatch(&#123;</span><br><span class=\"line\">        type: userConstants.GET_REALTIME_MESSAGES,</span><br><span class=\"line\">        payload: &#123; conversations &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>All the encrypted messages will be stored in the conversations collection in Firestore. Here everytime a person sends a message to another person, <strong>we will retake all the data from that conversation in Firestore and add the new message</strong>. This might seem to be time consuming but the next filtering step will improve our <strong>performance</strong> by a lot.</p>\n<p>To query and filter in the Firebase, I use the <strong>where</strong> method. The user.uid_1 and user.uid_2 are the ids (generated by the Firebase Authentication) of the current user and the person you are messaging to. Whenever the <strong>current user</strong> sends a message, it will <strong>reload</strong> the <em>conversation</em> in the database and it will look for all conversation with the user_uid_2 that is contained in the array [user.uid_1 and user.uid_2]. This will ensure that if A sends a message to B, the first <strong>filter</strong> will get all the <strong>conversations</strong> that B is either the sender or the receiver.</p>\n<p>Then we sort the order by ascending because we want the lastest messages to be seen last. Finally, this condition will check if the conversation we are taking from the database is exactly the conversation between A and B</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>((doc.data().user_uid_1 === user.uid_1 &amp;&amp; doc.data().user_uid_2 === user.uid_2)</span><br><span class=\"line\">  ||</span><br><span class=\"line\">  (doc.data().user_uid_1 === user.uid_2 &amp;&amp; doc.data().user_uid_2 === user.uid_1))&#123;</span><br><span class=\"line\">    conversations.push(&#123;<span class=\"attr\">id</span>: doc.id, <span class=\"attr\">conver</span>: doc.data()&#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>After that we will <strong>dispatch</strong> the action with the payload of conversations so that our reducer file will receive the action. So we are finished with the user.action.js. We have finished setting up for the real-time chat. Now let’s move to the HomePage Screen (which is the Chat screen)</p>\n<p>const initChat = (user) =&gt; {<br>\nsetCurrentChatId(<a href=\"http://user.id\" target=\"_blank\" rel=\"noopener\">user.id</a>)<br>\nsetChatStarted(true)<br>\nsetChatGroup(false)<br>\nsetChatUser(<code>${user.data.firstName} ${user.data.lastName}</code>)<br>\ndispatch(getRealTimeConversations({ uid_1: docId, uid_2: <a href=\"http://user.id\" target=\"_blank\" rel=\"noopener\">user.id</a> }))<br>\n// setUserUid(user.data.uid)<br>\n// console.log(user)<br>\n}</p>\n<p>First, we have to set up the conversations column, which lists all of our friends and groups (just like in Messenger). Here is the set up for the column</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    newCurrentFriendList &amp;&amp; newCurrentFriendList.map(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(user.id != docId)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          &lt;User chatGroup=&#123;chatGroup&#125; currentChatId=&#123;currentChatId&#125; id=&#123;user.id&#125; key=&#123;user.data.uid&#125; user=&#123;user&#125; onClick=&#123;initChat&#125; /&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>We will map out all of the current user’s friends, each in a component called <strong>User</strong>.</p>\n<img src=\"/MessengerClone/sideconver.png\">\n<p>When we <strong>click</strong> into each user, we will have to initiate the conversations between 2 people (which means we need to use the <strong>actions</strong> we just wrote in Redux).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initChat = <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setCurrentChatId(user.id)</span><br><span class=\"line\">  setChatStarted(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  setChatGroup(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  setChatUser(<span class=\"string\">`<span class=\"subst\">$&#123;user.data.firstName&#125;</span> <span class=\"subst\">$&#123;user.data.lastName&#125;</span>`</span>)</span><br><span class=\"line\">  dispatch(getRealTimeConversations(&#123; <span class=\"attr\">uid_1</span>: docId, <span class=\"attr\">uid_2</span>: user.id &#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We get the <strong>id</strong> of the user that we just clicked into as <strong>id</strong>. Then we set the ChatUser as the name of the user we are chatting with. Finally, we dispatch the action <strong>getRealTimeConversations</strong> to load all the conversations with that person.</p>\n<p>Next, when we send a message to a user, we need to initiate the the <strong>sendMessage</strong> function to execute the action we did in user.action.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sendMessage = <span class=\"keyword\">async</span> (e) =&gt; &#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> messageObject = &#123;</span><br><span class=\"line\">    user_uid_1: docId,</span><br><span class=\"line\">    user_uid_2: currentChatId,</span><br><span class=\"line\">    message: message,</span><br><span class=\"line\">    haveReply: replyMessage ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">    replyMessage: replyMessage</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(messageObject)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (message) &#123;</span><br><span class=\"line\">    dispatch(createMessage(messageObject))</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      setMessage(<span class=\"string\">''</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setReplyMessage(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Remember the <strong>messageObject</strong> that I told you to remember. Inside the messageObject will be all the information about the 2 users and that message: <strong>message</strong> (the text that the user sent), <strong>haveReply</strong> (Is the message replied or not), <strong>replyMessage</strong> (the replyMessage if this message has 1). Finally, we will dispatch the <strong>createMessage</strong> action from the user.action.js</p>\n<p>Here is the most sophisticated part of the project, where I set up and display all the messages:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(chatStarted &amp;&amp; !chatGroup) ?</span><br><span class=\"line\">user.conversations &amp;&amp; user.conversations.map(<span class=\"function\">(<span class=\"params\">conver</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div style=&#123;&#123; <span class=\"attr\">textAlign</span>: conver.conver.user_uid_1 == docId ? <span class=\"string\">'right'</span> : <span class=\"string\">\"left\"</span> &#125;&#125;&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        conver.conver.user_uid_1 == docId ?</span><br><span class=\"line\">          (&lt;div className=\"maindiv\" style=&#123;&#123; display: \"flex\", flexDirection: \"column\", alignItems: \"flex-end\", zIndex: 9999 &#125;&#125;&gt;</span><br><span class=\"line\">            &#123;(open6 &amp;&amp; (currentMessageEmoji &amp;&amp; currentMessageEmoji == conver.id)) ? (</span><br><span class=\"line\">              &lt;div className=\"emojiContainer\"&gt;</span><br><span class=\"line\">                &lt;div onClick=&#123;(e) =&gt; handleReaction(e, conver.id)&#125; className=\"emoji-li\"&gt;&#123;emoji.getUnicode(\"heart\")&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div onClick=&#123;(e) =&gt; handleReaction(e, conver.id)&#125; className=\"emoji-li\"&gt;&#123;emoji.getUnicode(emoji.names[11])&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div onClick=&#123;(e) =&gt; handleReaction(e, conver.id)&#125; className=\"emoji-li\"&gt;&#123;emoji.getUnicode(emoji.names[70])&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div onClick=&#123;(e) =&gt; handleReaction(e, conver.id)&#125; className=\"emoji-li\"&gt;&#123;emoji.getUnicode(emoji.names[73])&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div onClick=&#123;(e) =&gt; handleReaction(e, conver.id)&#125; className=\"emoji-li\"&gt;&#123;emoji.getUnicode(emoji.names[55])&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div onClick=&#123;(e) =&gt; handleReaction(e, conver.id)&#125; className=\"emoji-li\"&gt;&#123;emoji.getUnicode(emoji.names[116])&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;div onClick=&#123;(e) =&gt; handleReaction(e, conver.id)&#125; className=\"emoji-li\"&gt;&#123;emoji.getUnicode(emoji.names[117])&#125;&lt;/div&gt;</span><br><span class=\"line\">              &lt;/div&gt;</span><br><span class=\"line\">            ) : null&#125;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">              &lt;div className=\"maindiv\" key=&#123;conver.id&#125; className=\"messageContainerCurrent\"&gt;</span><br><span class=\"line\">                &lt;div className=\"hide\" id=&#123;conver.id&#125; onClick=&#123;(e) =&gt; handleShowEmojis(e, conver.id)&#125;&gt;&#123;emoji.getUnicode(\"grinning\")&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;FontAwesomeIcon className=\"hide\" onClick=&#123;(e) =&gt; handleReplyMess(e, conver.id)&#125; icon=&#123;faReply&#125; /&gt;</span><br><span class=\"line\">                &lt;div className=&#123;conver.conver.user_uid_1 == docId ? \"messageStyle\" : \"messageStyleWhite\"&#125; &gt;</span><br><span class=\"line\">                  &#123;conver.conver.haveReply ? (</span><br><span class=\"line\">                    &lt;div className=\"chatReplyMessage\"&gt;</span><br><span class=\"line\">                      &#123;conver.conver.replyMessage&#125;</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                  ) : null&#125;</span><br><span class=\"line\">                  &#123;conver.conver.message&#125;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">              &lt;/div&gt;</span><br><span class=\"line\">              &lt;div className=\"emojiMessage\" style=&#123;&#123; position: \"absolute\", right: \"1%\", marginTop: -16 &#125;&#125;&gt;&#123;conver.conver.emojiSingle&#125;&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">          )</span><br><span class=\"line\">          :</span><br></pre></td></tr></table></figure>\n<p>The above code is the display of the message from the sender. The message from the receiver will be the same but just  A <strong>message</strong> can be splited into <strong>4 parts</strong>:</p>\n<ol>\n<li>Checking what user this is the sender or the receiver</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conver.conver.user_uid_1 == docId ?</span><br></pre></td></tr></table></figure>\n<p>This line of code helps us know that this is the sender of the message.</p>\n<ol start=\"2\">\n<li>Emoji container</li>\n</ol>\n<p>Do you know the emojis we typically use in Messenger. Here we use a emoji unicode library to display the emojis</p>\n<ol start=\"3\">\n<li>Showing the Reacted Emoji</li>\n</ol>\n<p>Here is where we handle the event of a user reacts to a message. We need a container to display the emoji. For individuals chatting, we only need to add an <strong>emojiSelected</strong> field in each message document.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleReaction = <span class=\"keyword\">async</span> (e, id) =&gt; &#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  setSelectedEmoji(e.currentTarget.textContent)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> emojiSelected = e.currentTarget.textContent</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"conversations\"</span>).doc(id).update(&#123;</span><br><span class=\"line\">    emojiSingle: emojiSelected == selectedEmojiOnDatabase ? <span class=\"string\">\"\"</span> : emojiSelected</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">\"conversations\"</span>).doc(id).onSnapshot(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (doc) &#123;</span><br><span class=\"line\">      setSelectedEmojiOnDatabase(doc.data().emojiSingle)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  setOpen6(<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>Displaying the Reply portion</li>\n</ol>\n<p>Of course, we need a reply function for each message. Here we basically add another field <strong>replyMessage</strong> to each message document in the database.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleReplyMess = <span class=\"function\">(<span class=\"params\">e, id</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(\"reply\")</span></span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  db.collection(<span class=\"string\">\"conversations\"</span>).doc(id).get().then(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setReplyMessage(doc.data().message)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And thats it, we can now chat individually to each other. For the groups’s function is really similar to the individual chat so I will let the <a href=\"https://github.com/MRSNOO/Messenger-Clone-New\" target=\"_blank\" rel=\"noopener\">Github Link to Project</a> so that you can understand it better. Here is the link to the Website <a href=\"https://todoapp-aaff8.web.app/\" target=\"_blank\" rel=\"noopener\">MessengerClone</a>. I hope you can experience the website and give me some feedback.</p>\n<h3>I hope you like this post. It is really long but it contains a lot of useful information about web technologies. I will see you guys in my next post.</h3>\n"},{"title":"Post#6 CRUD Todo App with Firebase","catalog":true,"date":"2020-11-30T17:42:49.000Z","subtitle":null,"header-img":"firebase.png","readtime":null,"_content":"\n## Welcome to my next blog !! Everyone must know about Todo App right? Here in this blog, I will show you how to create a Todo with Firebase Firestore and Reactjs and use Firebase Hosting to deploy it. \n\n### 1. Why do we use Firebase? \nFirebase is a extremely powerful platform that helps you perform realtime updates to database, along with many other cool features. It also acts as a database and storage for you to handle. The set up is really easy.\n\n### 2. Setting up Firebase in Reactjs\n\n#### 2.1 Create a Project on Firebase\nIf you dont have an account, register one on firebase (you can use your Google account). \n\nOnce you have an account, go to [Console](https://console.firebase.google.com) and add a new project like the figure below.\n\n{% asset_img addproject.png %}\n\nWe dont need Google Analytics so remember to turn that off -> Choose Web Application when asked adding Firebase to your app. \n\n{% asset_img web.png %}\nHere we get to the add Firebase SDK step. We need to set up this value in our project so remember to save it. \n\nFinish the set up, and now go to Cloud Firestore tab and create a new database. Here, your set up on the Firebase Console should be completed\n#### 2.2 Set up Firebase and Firestore in React App \n\nCreate a simple Reactjs App by running the following code\n```javascript\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\nInstall firebase dependencies \n```javascript\nnpm i firebase\n```\n\nAfter deleting all the unnecessary rendered files, we should have a simple React app set up. Now in the /src folder, create a service folder and inside it create a firebase.js file. This will be the file that contains all of our Firebase SDK set up that we just save\n\nInside the this firebase.js folder, we will set the variables up like this\n```javascript\nimport firebase from \"firebase/app\"\nimport \"firebase/auth\"\nimport 'firebase/firestore';\n\nconst app = firebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n})\n\nexport const auth = app.auth()\nexport const db = app.firestore()\nexport default app\n```\n\nThis might seem a bit weird right. This is because we will save all of our variables such as apiKey, authDomain, ... appId in a .env file. In this way, when we want to switch to another service or change any account variables we will just need to change it in the .env file. This is the .env file, it should be outside in the main folder. \n\n{% asset_img env.png %}\n\nSo inside this firebase.js file, we want to export the variable db as \n```javascript\nexport const db = app.firestore()\n```\nso that we can use db as direct access to our database later. Now we have finished our set up of Firebase. Lets get into the code and create a simple Todo App. \n\n### 3. Create Todo App\n\n#### 3.1 The structure of the a TodoApp\n\nHere, I will briefly talk about how to structure a todoapp. Your main file should be App.js, you can create a smaller component and render it in App.js as well but here we will use App.js as a main file. \n\n1. First, we will have a simple form and a submit button that we will use to add new todos\n2. We will have a component call TodoList which will render out each small component Todo. In each small component Todo will be a current todo(the task that we have to do), an edit button (to perform update function), and a delete button(to perform delete function)\n\n#### 3.2 Create form to add new Todo\n\nHere I just use a simple Form structure from [Bootstrap](https://react-bootstrap.github.io/components/forms/). \n\n```javascript\n    <Form className={classes.form} onSubmit={addTodo}>\n      <Form.Group style={{marginBot: 10}} id=\"email\">\n        <Form.Control type=\"newitem\" required ref={itemRef}/>\n      </Form.Group>\n      <Button className={classes.button} type=\"submit\">Add Item</Button>\n    </Form>\n```\n\nIn the Form.Control (this is where we will input our new todos), we will have a ref. This ref will keep track of the current value in a variable \n```javascript\n  const itemRef = useRef()\n```\n\nAlright, now we will add the addTodo function that actually connects to the Firebase database. First, everytime we click the submit button, we need to avoid refreshing the browser so we need preventDefault method. Then we just call **db.collection(collectionName).add()** to add a new document to the database. Here we add a document that has a field \"todo\" and a value is **itemRef.current.value** (the current value of our form)\n\n```javascript\n  const addTodo = (e) =>{\n    e.preventDefault()\n    db.collection(\"todos\").add({\n      todo: itemRef.current.value,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    itemRef.current.value = \"\"\n  }\n```\n\n#### 3.3 Get all the todos in the database and render them\n\nWe want to automatically render all the todos that are currently in the database and render them out in the client. Here we will use useEffect hook to do this. This means that we will run useEffect whenever there is a change in the database, and it will automatically getback the data in the database.\n\n```javascript\n  const [todolist, setTodoList] = useState([])\n  const [invalidate, setInvalidate] = useState(true)\n\n  useEffect(() => {\n    if(invalidate){\n      db.collection(\"todos\").orderBy(\"timestamp\", \"desc\").onSnapshot((snapshot)=>{\n          setTodoList(snapshot.docs.map((doc) => ({id: doc.id, todo: doc.data().todo})))\n          setInvalidate(false)\n        })\n    }\n\n  }, [invalidate]);\n```\n\nWe keep track of 2 states, 1 is the invalidate(this is the cleanup method we will use for your useEffect, it just means that the useEffect wont be looping over and over again) and 2 is todolist(here we will store all the data we get from the server to an array)\n\nWe use **db.collection(\"todos\").orderBy(\"timestamp\", \"desc\").onSnapshot**, this will order the documents in the database from newest to oldest based on the time they are created, which makes sense because we want the newest task to be on the top. **onSnapShot** will listen to any changes in the database and get us back our data. So after getting the data from the database, we can now store the data in the todoList state and render them out like in the below code\n\n```javascript\n    {todolist && todolist.map((todo)=>{\n      return <Todo id={todo.id} removeTodo={removeTodo} text={todo.todo}/>\n    })}\n```\n#### 3.3 Delete and Update function in each Todo Component\n\nIn the code above, if you notice, we have create a component for each todo items called Todo. In this components, we will pass down some props like **id**(to keep track of what todo items this is in the database), **removeTodo**(removeTodo function) and **text**(the actual task that we want to do)\n\nThe remove function is really simple because Firebase Firestore have provided a method to do that, all you need is the id of the document you are trying to delete.\nAnd since when we get the data from the database, we have store a value **id** = **doc.id** so this id value will be the unique id of each Todo item. And we can just do this.\n\n```javascript\n  const removeTodo = (id) =>{\n    db.collection(\"todos\").doc(id).delete()\n  }\n```\n\nLastly is the update function. We will write this function inside the Todo component. Here we will use an **input** state to keep track of the current text we are entering in. And then we just need to call the Firebase Firestore update method and update the new task for the field todo in the document with the **id**\n\n```javascript\n  const [input, setInput] = useState(\"\")\n\n  const updateTodo = () =>{\n    db.collection(\"todos\").doc(id).update({\n      todo: input\n    })\n  }\n```\n\nMake sure that because we pass the id down to this component Todo so we need to deconstruct the props to get the value\n\n```javascript\n  const {text, removeTodo, id} = props\n```\n\nHere, in the Todo Component, I use a Modal from the Material UI framework so if you want to use this you can install material UI but if you dont use it, it is fine. Basically, if you click on the Edit button on each Todo item, a modal will be opened and you can type in the new task you want to replace and once you click Update Todo in the modal, it will execute the **updateTodo** function and update the value\n\n```javascript\n    <>\n    <Modal\n      open={open}\n      onClose={() => setOpen(false)}\n    >\n      <div className={classes.paper}>\n        <input value={input} onChange={(e) => setInput(e.target.value)}/>\n        {/* <Button className={classes.button} onClick={() => setOpen(true)}>Update todo</Button> */}\n        <Button onClick={updateTodo}>Update Todo</Button>\n      </div>\n    </Modal>\n    <div style={{display:\"flex\", flexDirection:\"row\", width:\"75%\"}}>\n      <li style={{marginBottom: 20}}>{text}</li>\n      <Button className={classes.button} onClick={() => setOpen(true)}>Edit</Button>\n      <Button className={classes.button} onClick={() => removeTodo(id)}>Delete</Button>\n    </div>\n    </>\n```\n\nHere is the image of the complete product. It is really ugly but still functionality acceptable haha.\n\n{% asset_img todo.png %}\n\n\n### 4. Deploy using Firebase Hosting\nThis is really simple, here is the exact steps that you should follow. \n1. Open the command line in your project and run firebase init\n2. It will ask for certain questions.\n3. Choose use an existing project \n4. Choose convert all into a single html page\n5. Write everything in **build** folder (this is extremely important). When it asks for (project) make sure to write \"build\"\n6. You can choose whether to link to github or not. \n7. Run npm run build\n8. firebase deploy\n\nHere is the [Link](https://todoapp-aaff8.web.app/todolist) to the Todo Application. I hope you can take a look and learn some new things.\n\n### Thats is the end of the tutorial I hope you learn something new about using Firebase and React. Hope to see you in the next post\n\n","source":"_posts/TodoApp.md","raw":"---\ntitle: Post#6 CRUD Todo App with Firebase\ncatalog: true\ndate: 2020-12-01 00:42:49\nsubtitle:\nheader-img: \"firebase.png\"\ntags: [reactjs, firebase]\nreadtime:\n---\n\n## Welcome to my next blog !! Everyone must know about Todo App right? Here in this blog, I will show you how to create a Todo with Firebase Firestore and Reactjs and use Firebase Hosting to deploy it. \n\n### 1. Why do we use Firebase? \nFirebase is a extremely powerful platform that helps you perform realtime updates to database, along with many other cool features. It also acts as a database and storage for you to handle. The set up is really easy.\n\n### 2. Setting up Firebase in Reactjs\n\n#### 2.1 Create a Project on Firebase\nIf you dont have an account, register one on firebase (you can use your Google account). \n\nOnce you have an account, go to [Console](https://console.firebase.google.com) and add a new project like the figure below.\n\n{% asset_img addproject.png %}\n\nWe dont need Google Analytics so remember to turn that off -> Choose Web Application when asked adding Firebase to your app. \n\n{% asset_img web.png %}\nHere we get to the add Firebase SDK step. We need to set up this value in our project so remember to save it. \n\nFinish the set up, and now go to Cloud Firestore tab and create a new database. Here, your set up on the Firebase Console should be completed\n#### 2.2 Set up Firebase and Firestore in React App \n\nCreate a simple Reactjs App by running the following code\n```javascript\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\nInstall firebase dependencies \n```javascript\nnpm i firebase\n```\n\nAfter deleting all the unnecessary rendered files, we should have a simple React app set up. Now in the /src folder, create a service folder and inside it create a firebase.js file. This will be the file that contains all of our Firebase SDK set up that we just save\n\nInside the this firebase.js folder, we will set the variables up like this\n```javascript\nimport firebase from \"firebase/app\"\nimport \"firebase/auth\"\nimport 'firebase/firestore';\n\nconst app = firebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n})\n\nexport const auth = app.auth()\nexport const db = app.firestore()\nexport default app\n```\n\nThis might seem a bit weird right. This is because we will save all of our variables such as apiKey, authDomain, ... appId in a .env file. In this way, when we want to switch to another service or change any account variables we will just need to change it in the .env file. This is the .env file, it should be outside in the main folder. \n\n{% asset_img env.png %}\n\nSo inside this firebase.js file, we want to export the variable db as \n```javascript\nexport const db = app.firestore()\n```\nso that we can use db as direct access to our database later. Now we have finished our set up of Firebase. Lets get into the code and create a simple Todo App. \n\n### 3. Create Todo App\n\n#### 3.1 The structure of the a TodoApp\n\nHere, I will briefly talk about how to structure a todoapp. Your main file should be App.js, you can create a smaller component and render it in App.js as well but here we will use App.js as a main file. \n\n1. First, we will have a simple form and a submit button that we will use to add new todos\n2. We will have a component call TodoList which will render out each small component Todo. In each small component Todo will be a current todo(the task that we have to do), an edit button (to perform update function), and a delete button(to perform delete function)\n\n#### 3.2 Create form to add new Todo\n\nHere I just use a simple Form structure from [Bootstrap](https://react-bootstrap.github.io/components/forms/). \n\n```javascript\n    <Form className={classes.form} onSubmit={addTodo}>\n      <Form.Group style={{marginBot: 10}} id=\"email\">\n        <Form.Control type=\"newitem\" required ref={itemRef}/>\n      </Form.Group>\n      <Button className={classes.button} type=\"submit\">Add Item</Button>\n    </Form>\n```\n\nIn the Form.Control (this is where we will input our new todos), we will have a ref. This ref will keep track of the current value in a variable \n```javascript\n  const itemRef = useRef()\n```\n\nAlright, now we will add the addTodo function that actually connects to the Firebase database. First, everytime we click the submit button, we need to avoid refreshing the browser so we need preventDefault method. Then we just call **db.collection(collectionName).add()** to add a new document to the database. Here we add a document that has a field \"todo\" and a value is **itemRef.current.value** (the current value of our form)\n\n```javascript\n  const addTodo = (e) =>{\n    e.preventDefault()\n    db.collection(\"todos\").add({\n      todo: itemRef.current.value,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    itemRef.current.value = \"\"\n  }\n```\n\n#### 3.3 Get all the todos in the database and render them\n\nWe want to automatically render all the todos that are currently in the database and render them out in the client. Here we will use useEffect hook to do this. This means that we will run useEffect whenever there is a change in the database, and it will automatically getback the data in the database.\n\n```javascript\n  const [todolist, setTodoList] = useState([])\n  const [invalidate, setInvalidate] = useState(true)\n\n  useEffect(() => {\n    if(invalidate){\n      db.collection(\"todos\").orderBy(\"timestamp\", \"desc\").onSnapshot((snapshot)=>{\n          setTodoList(snapshot.docs.map((doc) => ({id: doc.id, todo: doc.data().todo})))\n          setInvalidate(false)\n        })\n    }\n\n  }, [invalidate]);\n```\n\nWe keep track of 2 states, 1 is the invalidate(this is the cleanup method we will use for your useEffect, it just means that the useEffect wont be looping over and over again) and 2 is todolist(here we will store all the data we get from the server to an array)\n\nWe use **db.collection(\"todos\").orderBy(\"timestamp\", \"desc\").onSnapshot**, this will order the documents in the database from newest to oldest based on the time they are created, which makes sense because we want the newest task to be on the top. **onSnapShot** will listen to any changes in the database and get us back our data. So after getting the data from the database, we can now store the data in the todoList state and render them out like in the below code\n\n```javascript\n    {todolist && todolist.map((todo)=>{\n      return <Todo id={todo.id} removeTodo={removeTodo} text={todo.todo}/>\n    })}\n```\n#### 3.3 Delete and Update function in each Todo Component\n\nIn the code above, if you notice, we have create a component for each todo items called Todo. In this components, we will pass down some props like **id**(to keep track of what todo items this is in the database), **removeTodo**(removeTodo function) and **text**(the actual task that we want to do)\n\nThe remove function is really simple because Firebase Firestore have provided a method to do that, all you need is the id of the document you are trying to delete.\nAnd since when we get the data from the database, we have store a value **id** = **doc.id** so this id value will be the unique id of each Todo item. And we can just do this.\n\n```javascript\n  const removeTodo = (id) =>{\n    db.collection(\"todos\").doc(id).delete()\n  }\n```\n\nLastly is the update function. We will write this function inside the Todo component. Here we will use an **input** state to keep track of the current text we are entering in. And then we just need to call the Firebase Firestore update method and update the new task for the field todo in the document with the **id**\n\n```javascript\n  const [input, setInput] = useState(\"\")\n\n  const updateTodo = () =>{\n    db.collection(\"todos\").doc(id).update({\n      todo: input\n    })\n  }\n```\n\nMake sure that because we pass the id down to this component Todo so we need to deconstruct the props to get the value\n\n```javascript\n  const {text, removeTodo, id} = props\n```\n\nHere, in the Todo Component, I use a Modal from the Material UI framework so if you want to use this you can install material UI but if you dont use it, it is fine. Basically, if you click on the Edit button on each Todo item, a modal will be opened and you can type in the new task you want to replace and once you click Update Todo in the modal, it will execute the **updateTodo** function and update the value\n\n```javascript\n    <>\n    <Modal\n      open={open}\n      onClose={() => setOpen(false)}\n    >\n      <div className={classes.paper}>\n        <input value={input} onChange={(e) => setInput(e.target.value)}/>\n        {/* <Button className={classes.button} onClick={() => setOpen(true)}>Update todo</Button> */}\n        <Button onClick={updateTodo}>Update Todo</Button>\n      </div>\n    </Modal>\n    <div style={{display:\"flex\", flexDirection:\"row\", width:\"75%\"}}>\n      <li style={{marginBottom: 20}}>{text}</li>\n      <Button className={classes.button} onClick={() => setOpen(true)}>Edit</Button>\n      <Button className={classes.button} onClick={() => removeTodo(id)}>Delete</Button>\n    </div>\n    </>\n```\n\nHere is the image of the complete product. It is really ugly but still functionality acceptable haha.\n\n{% asset_img todo.png %}\n\n\n### 4. Deploy using Firebase Hosting\nThis is really simple, here is the exact steps that you should follow. \n1. Open the command line in your project and run firebase init\n2. It will ask for certain questions.\n3. Choose use an existing project \n4. Choose convert all into a single html page\n5. Write everything in **build** folder (this is extremely important). When it asks for (project) make sure to write \"build\"\n6. You can choose whether to link to github or not. \n7. Run npm run build\n8. firebase deploy\n\nHere is the [Link](https://todoapp-aaff8.web.app/todolist) to the Todo Application. I hope you can take a look and learn some new things.\n\n### Thats is the end of the tutorial I hope you learn something new about using Firebase and React. Hope to see you in the next post\n\n","slug":"TodoApp","published":1,"updated":"2021-06-20T12:24:05.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq5zemt8000cc6sbpw5ws18g","content":"<h2><span id=\"welcome-to-my-next-blog-everyone-must-know-about-todo-app-right-here-in-this-blog-i-will-show-you-how-to-create-a-todo-with-firebase-firestore-and-reactjs-and-use-firebase-hosting-to-deploy-it\">Welcome to my next blog !! Everyone must know about Todo App right? Here in this blog, I will show you how to create a Todo with Firebase Firestore and Reactjs and use Firebase Hosting to deploy it.</span></h2>\n<h3><span id=\"1-why-do-we-use-firebase\">1. Why do we use Firebase?</span></h3>\n<p>Firebase is a extremely powerful platform that helps you perform realtime updates to database, along with many other cool features. It also acts as a database and storage for you to handle. The set up is really easy.</p>\n<h3><span id=\"2-setting-up-firebase-in-reactjs\">2. Setting up Firebase in Reactjs</span></h3>\n<h4><span id=\"21-create-a-project-on-firebase\">2.1 Create a Project on Firebase</span></h4>\n<p>If you dont have an account, register one on firebase (you can use your Google account).</p>\n<p>Once you have an account, go to <a href=\"https://console.firebase.google.com\" target=\"_blank\" rel=\"noopener\">Console</a> and add a new project like the figure below.</p>\n<img src=\"/TodoApp/addproject.png\">\n<p>We dont need Google Analytics so remember to turn that off -&gt; Choose Web Application when asked adding Firebase to your app.</p>\n<img src=\"/TodoApp/web.png\">\n<p>Here we get to the add Firebase SDK step. We need to set up this value in our project so remember to save it.</p>\n<p>Finish the set up, and now go to Cloud Firestore tab and create a new database. Here, your set up on the Firebase Console should be completed</p>\n<h4><span id=\"22-set-up-firebase-and-firestore-in-react-app\">2.2 Set up Firebase and Firestore in React App</span></h4>\n<p>Create a simple Reactjs App by running the following code</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app my-app</span><br><span class=\"line\">cd my-app</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<p>Install firebase dependencies</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i firebase</span><br></pre></td></tr></table></figure>\n<p>After deleting all the unnecessary rendered files, we should have a simple React app set up. Now in the /src folder, create a service folder and inside it create a firebase.js file. This will be the file that contains all of our Firebase SDK set up that we just save</p>\n<p>Inside the this firebase.js folder, we will set the variables up like this</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> firebase <span class=\"keyword\">from</span> <span class=\"string\">\"firebase/app\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"firebase/auth\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'firebase/firestore'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = firebase.initializeApp(&#123;</span><br><span class=\"line\">  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,</span><br><span class=\"line\">  authDomain: process.env.REACT_APP_AUTH_DOMAIN,</span><br><span class=\"line\">  databaseURL: process.env.REACT_APP_DATABASE_URL,</span><br><span class=\"line\">  projectId: process.env.REACT_APP_PROJECT_ID,</span><br><span class=\"line\">  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,</span><br><span class=\"line\">  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,</span><br><span class=\"line\">  appId: process.env.REACT_APP_APP_ID</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> auth = app.auth()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> db = app.firestore()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> app</span><br></pre></td></tr></table></figure>\n<p>This might seem a bit weird right. This is because we will save all of our variables such as apiKey, authDomain, … appId in a .env file. In this way, when we want to switch to another service or change any account variables we will just need to change it in the .env file. This is the .env file, it should be outside in the main folder.</p>\n<img src=\"/TodoApp/env.png\">\n<p>So inside this firebase.js file, we want to export the variable db as</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> db = app.firestore()</span><br></pre></td></tr></table></figure>\n<p>so that we can use db as direct access to our database later. Now we have finished our set up of Firebase. Lets get into the code and create a simple Todo App.</p>\n<h3><span id=\"3-create-todo-app\">3. Create Todo App</span></h3>\n<h4><span id=\"31-the-structure-of-the-a-todoapp\">3.1 The structure of the a TodoApp</span></h4>\n<p>Here, I will briefly talk about how to structure a todoapp. Your main file should be App.js, you can create a smaller component and render it in App.js as well but here we will use App.js as a main file.</p>\n<ol>\n<li>First, we will have a simple form and a submit button that we will use to add new todos</li>\n<li>We will have a component call TodoList which will render out each small component Todo. In each small component Todo will be a current todo(the task that we have to do), an edit button (to perform update function), and a delete button(to perform delete function)</li>\n</ol>\n<h4><span id=\"32-create-form-to-add-new-todo\">3.2 Create form to add new Todo</span></h4>\n<p>Here I just use a simple Form structure from <a href=\"https://react-bootstrap.github.io/components/forms/\" target=\"_blank\" rel=\"noopener\">Bootstrap</a>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Form className=&#123;classes.form&#125; onSubmit=&#123;addTodo&#125;&gt;</span><br><span class=\"line\">  &lt;Form.Group style=&#123;&#123;<span class=\"attr\">marginBot</span>: <span class=\"number\">10</span>&#125;&#125; id=<span class=\"string\">\"email\"</span>&gt;</span><br><span class=\"line\">    &lt;Form.Control type=<span class=\"string\">\"newitem\"</span> required ref=&#123;itemRef&#125;/&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Form.Group&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Button className=&#123;classes.button&#125; type=\"submit\"&gt;Add Item&lt;/</span>Button&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Form&gt;</span></span><br></pre></td></tr></table></figure>\n<p>In the Form.Control (this is where we will input our new todos), we will have a ref. This ref will keep track of the current value in a variable</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> itemRef = useRef()</span><br></pre></td></tr></table></figure>\n<p>Alright, now we will add the addTodo function that actually connects to the Firebase database. First, everytime we click the submit button, we need to avoid refreshing the browser so we need preventDefault method. Then we just call <strong>db.collection(collectionName).add()</strong> to add a new document to the database. Here we add a document that has a field “todo” and a value is <strong>itemRef.current.value</strong> (the current value of our form)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addTodo = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  db.collection(<span class=\"string\">\"todos\"</span>).add(&#123;</span><br><span class=\"line\">    todo: itemRef.current.value,</span><br><span class=\"line\">    timestamp: firebase.firestore.FieldValue.serverTimestamp()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  itemRef.current.value = <span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"33-get-all-the-todos-in-the-database-and-render-them\">3.3 Get all the todos in the database and render them</span></h4>\n<p>We want to automatically render all the todos that are currently in the database and render them out in the client. Here we will use useEffect hook to do this. This means that we will run useEffect whenever there is a change in the database, and it will automatically getback the data in the database.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [todolist, setTodoList] = useState([])</span><br><span class=\"line\"><span class=\"keyword\">const</span> [invalidate, setInvalidate] = useState(<span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(invalidate)&#123;</span><br><span class=\"line\">    db.collection(<span class=\"string\">\"todos\"</span>).orderBy(<span class=\"string\">\"timestamp\"</span>, <span class=\"string\">\"desc\"</span>).onSnapshot(<span class=\"function\">(<span class=\"params\">snapshot</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        setTodoList(snapshot.docs.map(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> (&#123;<span class=\"attr\">id</span>: doc.id, <span class=\"attr\">todo</span>: doc.data().todo&#125;)))</span><br><span class=\"line\">        setInvalidate(<span class=\"literal\">false</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;, [invalidate]);</span><br></pre></td></tr></table></figure>\n<p>We keep track of 2 states, 1 is the invalidate(this is the cleanup method we will use for your useEffect, it just means that the useEffect wont be looping over and over again) and 2 is todolist(here we will store all the data we get from the server to an array)</p>\n<p>We use <strong>db.collection(“todos”).orderBy(“timestamp”, “desc”).onSnapshot</strong>, this will order the documents in the database from newest to oldest based on the time they are created, which makes sense because we want the newest task to be on the top. <strong>onSnapShot</strong> will listen to any changes in the database and get us back our data. So after getting the data from the database, we can now store the data in the todoList state and render them out like in the below code</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;todolist &amp;&amp; todolist.map(<span class=\"function\">(<span class=\"params\">todo</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;Todo id=&#123;todo.id&#125; removeTodo=&#123;removeTodo&#125; text=&#123;todo.todo&#125;/&gt;</span><br><span class=\"line\">&#125;)&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"33-delete-and-update-function-in-each-todo-component\">3.3 Delete and Update function in each Todo Component</span></h4>\n<p>In the code above, if you notice, we have create a component for each todo items called Todo. In this components, we will pass down some props like <strong>id</strong>(to keep track of what todo items this is in the database), <strong>removeTodo</strong>(removeTodo function) and <strong>text</strong>(the actual task that we want to do)</p>\n<p>The remove function is really simple because Firebase Firestore have provided a method to do that, all you need is the id of the document you are trying to delete.<br>\nAnd since when we get the data from the database, we have store a value <strong>id</strong> = <strong><a href=\"http://doc.id\" target=\"_blank\" rel=\"noopener\">doc.id</a></strong> so this id value will be the unique id of each Todo item. And we can just do this.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> removeTodo = <span class=\"function\">(<span class=\"params\">id</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  db.collection(<span class=\"string\">\"todos\"</span>).doc(id).delete()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Lastly is the update function. We will write this function inside the Todo component. Here we will use an <strong>input</strong> state to keep track of the current text we are entering in. And then we just need to call the Firebase Firestore update method and update the new task for the field todo in the document with the <strong>id</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [input, setInput] = useState(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> updateTodo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span>&#123;</span><br><span class=\"line\">  db.collection(<span class=\"string\">\"todos\"</span>).doc(id).update(&#123;</span><br><span class=\"line\">    todo: input</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Make sure that because we pass the id down to this component Todo so we need to deconstruct the props to get the value</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;text, removeTodo, id&#125; = props</span><br></pre></td></tr></table></figure>\n<p>Here, in the Todo Component, I use a Modal from the Material UI framework so if you want to use this you can install material UI but if you dont use it, it is fine. Basically, if you click on the Edit button on each Todo item, a modal will be opened and you can type in the new task you want to replace and once you click Update Todo in the modal, it will execute the <strong>updateTodo</strong> function and update the value</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&gt;</span><br><span class=\"line\">&lt;Modal</span><br><span class=\"line\">  open=&#123;open&#125;</span><br><span class=\"line\">  onClose=&#123;() =&gt; setOpen(<span class=\"literal\">false</span>)&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;div className=&#123;classes.paper&#125;&gt;</span><br><span class=\"line\">    &lt;input value=&#123;input&#125; onChange=&#123;(e) =&gt; setInput(e.target.value)&#125;/&gt;</span><br><span class=\"line\">    &#123;<span class=\"comment\">/* &lt;Button className=&#123;classes.button&#125; onClick=&#123;() =&gt; setOpen(true)&#125;&gt;Update todo&lt;/Button&gt; */</span>&#125;</span><br><span class=\"line\">    &lt;Button onClick=&#123;updateTodo&#125;&gt;Update Todo&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Modal&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;div style=&#123;&#123;display:\"flex\", flexDirection:\"row\", width:\"75%\"&#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li style=&#123;&#123;marginBottom: 20&#125;&#125;&gt;&#123;text&#125;&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;Button className=&#123;classes.button&#125; onClick=&#123;() =&gt; setOpen(<span class=\"literal\">true</span>)&#125;&gt;Edit&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Button className=&#123;classes.button&#125; onClick=&#123;() =&gt; removeTodo(id)&#125;&gt;Delete&lt;/</span>Button&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>Here is the image of the complete product. It is really ugly but still functionality acceptable haha.</p>\n<img src=\"/TodoApp/todo.png\">\n<h3><span id=\"4-deploy-using-firebase-hosting\">4. Deploy using Firebase Hosting</span></h3>\n<p>This is really simple, here is the exact steps that you should follow.</p>\n<ol>\n<li>Open the command line in your project and run firebase init</li>\n<li>It will ask for certain questions.</li>\n<li>Choose use an existing project</li>\n<li>Choose convert all into a single html page</li>\n<li>Write everything in <strong>build</strong> folder (this is extremely important). When it asks for (project) make sure to write “build”</li>\n<li>You can choose whether to link to github or not.</li>\n<li>Run npm run build</li>\n<li>firebase deploy</li>\n</ol>\n<p>Here is the <a href=\"https://todoapp-aaff8.web.app/todolist\" target=\"_blank\" rel=\"noopener\">Link</a> to the Todo Application. I hope you can take a look and learn some new things.</p>\n<h3><span id=\"thats-is-the-end-of-the-tutorial-i-hope-you-learn-something-new-about-using-firebase-and-react-hope-to-see-you-in-the-next-post\">Thats is the end of the tutorial I hope you learn something new about using Firebase and React. Hope to see you in the next post</span></h3>\n","site":{"data":{}},"excerpt":"","more":"<h2>Welcome to my next blog !! Everyone must know about Todo App right? Here in this blog, I will show you how to create a Todo with Firebase Firestore and Reactjs and use Firebase Hosting to deploy it.</h2>\n<h3>1. Why do we use Firebase?</h3>\n<p>Firebase is a extremely powerful platform that helps you perform realtime updates to database, along with many other cool features. It also acts as a database and storage for you to handle. The set up is really easy.</p>\n<h3>2. Setting up Firebase in Reactjs</h3>\n<h4>2.1 Create a Project on Firebase</h4>\n<p>If you dont have an account, register one on firebase (you can use your Google account).</p>\n<p>Once you have an account, go to <a href=\"https://console.firebase.google.com\" target=\"_blank\" rel=\"noopener\">Console</a> and add a new project like the figure below.</p>\n<img src=\"/TodoApp/addproject.png\">\n<p>We dont need Google Analytics so remember to turn that off -&gt; Choose Web Application when asked adding Firebase to your app.</p>\n<img src=\"/TodoApp/web.png\">\n<p>Here we get to the add Firebase SDK step. We need to set up this value in our project so remember to save it.</p>\n<p>Finish the set up, and now go to Cloud Firestore tab and create a new database. Here, your set up on the Firebase Console should be completed</p>\n<h4>2.2 Set up Firebase and Firestore in React App</h4>\n<p>Create a simple Reactjs App by running the following code</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app my-app</span><br><span class=\"line\">cd my-app</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<p>Install firebase dependencies</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i firebase</span><br></pre></td></tr></table></figure>\n<p>After deleting all the unnecessary rendered files, we should have a simple React app set up. Now in the /src folder, create a service folder and inside it create a firebase.js file. This will be the file that contains all of our Firebase SDK set up that we just save</p>\n<p>Inside the this firebase.js folder, we will set the variables up like this</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> firebase <span class=\"keyword\">from</span> <span class=\"string\">\"firebase/app\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"firebase/auth\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'firebase/firestore'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = firebase.initializeApp(&#123;</span><br><span class=\"line\">  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,</span><br><span class=\"line\">  authDomain: process.env.REACT_APP_AUTH_DOMAIN,</span><br><span class=\"line\">  databaseURL: process.env.REACT_APP_DATABASE_URL,</span><br><span class=\"line\">  projectId: process.env.REACT_APP_PROJECT_ID,</span><br><span class=\"line\">  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,</span><br><span class=\"line\">  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,</span><br><span class=\"line\">  appId: process.env.REACT_APP_APP_ID</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> auth = app.auth()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> db = app.firestore()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> app</span><br></pre></td></tr></table></figure>\n<p>This might seem a bit weird right. This is because we will save all of our variables such as apiKey, authDomain, … appId in a .env file. In this way, when we want to switch to another service or change any account variables we will just need to change it in the .env file. This is the .env file, it should be outside in the main folder.</p>\n<img src=\"/TodoApp/env.png\">\n<p>So inside this firebase.js file, we want to export the variable db as</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> db = app.firestore()</span><br></pre></td></tr></table></figure>\n<p>so that we can use db as direct access to our database later. Now we have finished our set up of Firebase. Lets get into the code and create a simple Todo App.</p>\n<h3>3. Create Todo App</h3>\n<h4>3.1 The structure of the a TodoApp</h4>\n<p>Here, I will briefly talk about how to structure a todoapp. Your main file should be App.js, you can create a smaller component and render it in App.js as well but here we will use App.js as a main file.</p>\n<ol>\n<li>First, we will have a simple form and a submit button that we will use to add new todos</li>\n<li>We will have a component call TodoList which will render out each small component Todo. In each small component Todo will be a current todo(the task that we have to do), an edit button (to perform update function), and a delete button(to perform delete function)</li>\n</ol>\n<h4>3.2 Create form to add new Todo</h4>\n<p>Here I just use a simple Form structure from <a href=\"https://react-bootstrap.github.io/components/forms/\" target=\"_blank\" rel=\"noopener\">Bootstrap</a>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Form className=&#123;classes.form&#125; onSubmit=&#123;addTodo&#125;&gt;</span><br><span class=\"line\">  &lt;Form.Group style=&#123;&#123;<span class=\"attr\">marginBot</span>: <span class=\"number\">10</span>&#125;&#125; id=<span class=\"string\">\"email\"</span>&gt;</span><br><span class=\"line\">    &lt;Form.Control type=<span class=\"string\">\"newitem\"</span> required ref=&#123;itemRef&#125;/&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Form.Group&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Button className=&#123;classes.button&#125; type=\"submit\"&gt;Add Item&lt;/</span>Button&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Form&gt;</span></span><br></pre></td></tr></table></figure>\n<p>In the Form.Control (this is where we will input our new todos), we will have a ref. This ref will keep track of the current value in a variable</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> itemRef = useRef()</span><br></pre></td></tr></table></figure>\n<p>Alright, now we will add the addTodo function that actually connects to the Firebase database. First, everytime we click the submit button, we need to avoid refreshing the browser so we need preventDefault method. Then we just call <strong>db.collection(collectionName).add()</strong> to add a new document to the database. Here we add a document that has a field “todo” and a value is <strong>itemRef.current.value</strong> (the current value of our form)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addTodo = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  db.collection(<span class=\"string\">\"todos\"</span>).add(&#123;</span><br><span class=\"line\">    todo: itemRef.current.value,</span><br><span class=\"line\">    timestamp: firebase.firestore.FieldValue.serverTimestamp()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  itemRef.current.value = <span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4>3.3 Get all the todos in the database and render them</h4>\n<p>We want to automatically render all the todos that are currently in the database and render them out in the client. Here we will use useEffect hook to do this. This means that we will run useEffect whenever there is a change in the database, and it will automatically getback the data in the database.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [todolist, setTodoList] = useState([])</span><br><span class=\"line\"><span class=\"keyword\">const</span> [invalidate, setInvalidate] = useState(<span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(invalidate)&#123;</span><br><span class=\"line\">    db.collection(<span class=\"string\">\"todos\"</span>).orderBy(<span class=\"string\">\"timestamp\"</span>, <span class=\"string\">\"desc\"</span>).onSnapshot(<span class=\"function\">(<span class=\"params\">snapshot</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        setTodoList(snapshot.docs.map(<span class=\"function\">(<span class=\"params\">doc</span>) =&gt;</span> (&#123;<span class=\"attr\">id</span>: doc.id, <span class=\"attr\">todo</span>: doc.data().todo&#125;)))</span><br><span class=\"line\">        setInvalidate(<span class=\"literal\">false</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;, [invalidate]);</span><br></pre></td></tr></table></figure>\n<p>We keep track of 2 states, 1 is the invalidate(this is the cleanup method we will use for your useEffect, it just means that the useEffect wont be looping over and over again) and 2 is todolist(here we will store all the data we get from the server to an array)</p>\n<p>We use <strong>db.collection(“todos”).orderBy(“timestamp”, “desc”).onSnapshot</strong>, this will order the documents in the database from newest to oldest based on the time they are created, which makes sense because we want the newest task to be on the top. <strong>onSnapShot</strong> will listen to any changes in the database and get us back our data. So after getting the data from the database, we can now store the data in the todoList state and render them out like in the below code</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;todolist &amp;&amp; todolist.map(<span class=\"function\">(<span class=\"params\">todo</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;Todo id=&#123;todo.id&#125; removeTodo=&#123;removeTodo&#125; text=&#123;todo.todo&#125;/&gt;</span><br><span class=\"line\">&#125;)&#125;</span><br></pre></td></tr></table></figure>\n<h4>3.3 Delete and Update function in each Todo Component</h4>\n<p>In the code above, if you notice, we have create a component for each todo items called Todo. In this components, we will pass down some props like <strong>id</strong>(to keep track of what todo items this is in the database), <strong>removeTodo</strong>(removeTodo function) and <strong>text</strong>(the actual task that we want to do)</p>\n<p>The remove function is really simple because Firebase Firestore have provided a method to do that, all you need is the id of the document you are trying to delete.<br>\nAnd since when we get the data from the database, we have store a value <strong>id</strong> = <strong><a href=\"http://doc.id\" target=\"_blank\" rel=\"noopener\">doc.id</a></strong> so this id value will be the unique id of each Todo item. And we can just do this.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> removeTodo = <span class=\"function\">(<span class=\"params\">id</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  db.collection(<span class=\"string\">\"todos\"</span>).doc(id).delete()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Lastly is the update function. We will write this function inside the Todo component. Here we will use an <strong>input</strong> state to keep track of the current text we are entering in. And then we just need to call the Firebase Firestore update method and update the new task for the field todo in the document with the <strong>id</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [input, setInput] = useState(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> updateTodo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span>&#123;</span><br><span class=\"line\">  db.collection(<span class=\"string\">\"todos\"</span>).doc(id).update(&#123;</span><br><span class=\"line\">    todo: input</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Make sure that because we pass the id down to this component Todo so we need to deconstruct the props to get the value</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;text, removeTodo, id&#125; = props</span><br></pre></td></tr></table></figure>\n<p>Here, in the Todo Component, I use a Modal from the Material UI framework so if you want to use this you can install material UI but if you dont use it, it is fine. Basically, if you click on the Edit button on each Todo item, a modal will be opened and you can type in the new task you want to replace and once you click Update Todo in the modal, it will execute the <strong>updateTodo</strong> function and update the value</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&gt;</span><br><span class=\"line\">&lt;Modal</span><br><span class=\"line\">  open=&#123;open&#125;</span><br><span class=\"line\">  onClose=&#123;() =&gt; setOpen(<span class=\"literal\">false</span>)&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;div className=&#123;classes.paper&#125;&gt;</span><br><span class=\"line\">    &lt;input value=&#123;input&#125; onChange=&#123;(e) =&gt; setInput(e.target.value)&#125;/&gt;</span><br><span class=\"line\">    &#123;<span class=\"comment\">/* &lt;Button className=&#123;classes.button&#125; onClick=&#123;() =&gt; setOpen(true)&#125;&gt;Update todo&lt;/Button&gt; */</span>&#125;</span><br><span class=\"line\">    &lt;Button onClick=&#123;updateTodo&#125;&gt;Update Todo&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Modal&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;div style=&#123;&#123;display:\"flex\", flexDirection:\"row\", width:\"75%\"&#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li style=&#123;&#123;marginBottom: 20&#125;&#125;&gt;&#123;text&#125;&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;Button className=&#123;classes.button&#125; onClick=&#123;() =&gt; setOpen(<span class=\"literal\">true</span>)&#125;&gt;Edit&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Button className=&#123;classes.button&#125; onClick=&#123;() =&gt; removeTodo(id)&#125;&gt;Delete&lt;/</span>Button&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>Here is the image of the complete product. It is really ugly but still functionality acceptable haha.</p>\n<img src=\"/TodoApp/todo.png\">\n<h3>4. Deploy using Firebase Hosting</h3>\n<p>This is really simple, here is the exact steps that you should follow.</p>\n<ol>\n<li>Open the command line in your project and run firebase init</li>\n<li>It will ask for certain questions.</li>\n<li>Choose use an existing project</li>\n<li>Choose convert all into a single html page</li>\n<li>Write everything in <strong>build</strong> folder (this is extremely important). When it asks for (project) make sure to write “build”</li>\n<li>You can choose whether to link to github or not.</li>\n<li>Run npm run build</li>\n<li>firebase deploy</li>\n</ol>\n<p>Here is the <a href=\"https://todoapp-aaff8.web.app/todolist\" target=\"_blank\" rel=\"noopener\">Link</a> to the Todo Application. I hope you can take a look and learn some new things.</p>\n<h3>Thats is the end of the tutorial I hope you learn something new about using Firebase and React. Hope to see you in the next post</h3>\n"},{"title":"Post#3 How I got a full scholarship at Rice Engineering Computer Science","catalog":true,"date":"2020-04-08T17:57:37.000Z","subtitle":"20 min read","header-img":"test1.jpg","readtime":null,"_content":"\n## First few words\nSounds like a clickbait title but it is not. \n\nLet me repeat this ***important*** thing: There is no **magical** formulas or certain ways that can make you admitted to a university in US. I got the **scholarship** from Rice University doesn’t mean that I am better than anyone, just because I am slightly luckier. \n\n{% asset_img test6.PNG %}\n\nI have been writing a lot recently both technical (coding related) and critical thinking essays (felt like I was back to the application process days…). There are 3 ways that you would make it into a CS department in a school: applying to CS department after you got admitted, declare your CS major before applying and transferring to CS department. Therefore, I decided to write this post to share my **experiences** and some **advices** for applying **Computer Science** as your major for US Universities.\n\nThis post would be very helpful to students trying to apply for CS – aka one of the hottest major in Vietnam – or just apply for US universities in general. Since its popularity, most students would want to go to a top Computer Science school, making it increasingly **harder** to apply for CS as major. If you can see in the table below, the CS admission rates in some top CS schools are **critically low**.\n\n{% asset_img cspic.PNG %}\n\n(Extracted from junilearning.com) \nTherefore, in order to support students in need of help, I want to reveal some real **experiences** that I have gone through during my application process this year. I am also new to writing blog like this so please **excuse** my writing. \n\nLet’s get right into it!! First, you can have a look at my **“general”** path of the last application season.\n\n## My general path\n\n- Grade 10: study **SAT**, explore some clubs and **activities** at school -> finish SAT by May 2018 -> Summer of grade 10: Going to programs, coming with personal project **ideas**, study for National Math Team.\n\n- Grade 11: September 2018: got into the **National** Math Team, October 2018: finished TOEFL, **developing** personal project (CLEEN) -> January 2019: finish National Contest, starting my project Cleen and create the website -> March 2019 to May 2019: **recruit** members for CLEEN, study and finish SAT2.\n\n- Summer of 2019: going to programs, do the main events of CLEEN, forming **Personal** Statement ideas -> October and November 2019: **completing** both personal statement and supplement essays, collecting the necessary documents, filling Common App and Submit Application!! \n\n## Honors and Awards\n\nI am a math-oriented since secondary school and a math major in high school. This gives me a small **edge** since the number of mathematics contest (state, regional, national, international) available in Vietnam is **tremendous**. However, not all of these math contests should be that appealing in your resume. One post that I find really catagorized the Math contests could be found [here](https://vnexpress.net/nhan-dien-thuong-hieu-mot-so-cuoc-thi-toan-quoc-te-3500285.html)\n\nHowever, that being said, I always tried my best to be involved in any possible **competitions** that I was interested in, or which my friends were competing (sounds competitive huh), or the standard **contests** that math majors should be aware of already. Some of the competitions that I was involved in were (National Math, International Math Modelling, Hanoi Municipal Math, American Invitational Mathematics Examination, …). Remember that the most **significant** awards of yours should be from high school or at most **grade 9** since too many competitions from early secondary school should too long ago for the Adcom to process. \n\nSo, you should always on the lookout for the contests and competitions related to your **major subject** at school or your **intended major**. It does not matter whether they are the state contests or international, they will be valuable in your profile. One of my main interest was environment so besides mathematics competitions, I was looking for competition involving new environmental ideas or youth speaking forums.   \n\nAlso, there is a lot of things that can be included in your Honors and Awards section. If you are applying for a prestigious or **competitive program** and got selected, you should be listing it in your **profile** even if you can’t make it to the actual program since I know that many students in next year application season could be affected by the current pandemic Covid19 (many programs may get cancelled or postponed). Furthermore, if you are trying hard at school, you can receive some kind of **scholarships** (At my school Hanoi Amsterdam, there are school’s honor scholarships at the end of each semester) so you can remember this for your profile. \n\nYou might be wondering how I got into **CS department** of Rice University with few honors or awards related to CS. Well, we would discuss that later in the post so stay tuned!\n\n## Setting an early path for yourself\nThis doesn’t mean that if you start or change your mind **late** about studying in the US, you will fail or anything. However, if you have the chance, you should set an **early route** for yourself: When will you be studying for **standardized** tests, when will you be studying at *schools*, when will you spend time doing EXCAs (Extra curricular activities), when will you be doing the **competitions**, when will be the **essays**, when will be the time for resting (if there is such kind of thing …). Just kidding, all of these might not be as crystal-clear right at first but you should always envision a **path** in your mind. \n\nOne thing to note is that you should divide your path into different **sections** (an example is above), and once you finished a section, you can get rid of it from your head and **focus** on other stuffs. For example, you should try to finish your standard tests (SAT/ACT -> TOEFL/IELTS -> SAT2) as soon as possible so that you may concentrate on your EXCAs instead. \n\nI was lucky that I finished my SAT quite early (at the end of my 10th grade) since I was spending all my time in grade 10 to study (Not really a recommended thing since you should be **balancing** your time studying and **exploring** different clubs at school). I finished my TOEFL just about the time I got into the National Mathematics Team and after the National Math, I finished my SAT2 (at the end of my 11th grade) and spend my 11th grade summer for **extracurricular** activities so I think I did a good job on drawing a good path for myself. \n\n## Standardized Tests\nDespite the fact that these tests are not the **determining** factor in your application anymore, I think that this only applies to students getting a high score. These tests are a way to show the Adcom that you actually studied for them. \n\nFor the standardize test, I **recommend** learning by dividing into 2 phases. My first phase was when I was getting to know SAT, TOEFL. \n### SAT:\n- **Phase 1**: I would try to read literature and history passages (since they are my **biggest fear**) as much as I can. I went to some extra classes but not too intensive at this moment. And you SHOULD NOT do too much real tests since they would run out by the time you need to study **intensively**. Don’t worry if you don’t get a high score at this time because it is common for most people to struggle at this stage. And remember to write and learn by heart as many SAT words as possible. I have a strategy to write the **meaning** of a new word as another new word so that you can learn more words at a time (since many SAT words are kind of synonyms) \n\n- **Phase 2**: study intensively. I would read multiple critical passages and note down my **mistakes** after each mock test (take this as many as you can and reflect on your score progress). At this stage, I began to do more real tests from the College Board. And you should make sure that your **math score** is always high (since to get max score in Math you only need to be careful without knowing too much). \n\n### TOEFL: \n- I would do the same as above but remember that you should always **practice** toefl on your computer so that you can be familiar with taking the test online. And before taking the real test, you should have some days clearing your voice and practice **intensive** speaking (since this is the disadvantaged part of most Vietnamese student). \n- I used to learn 54 TPOs on these 3 websites but I don’t know if they are still available \n(Toefl.kmf, Top.zhan, langlib)\n\n\n## Extracurricular Activities and More about Computer Science\nOKAYYY!! It’s time for that part that you came here to **read**. One thing I like to mention is that I am writing this section not in the perspective of an Informatics major but of a **computer science** applicant. \n\nAccording to CS ranking (a page that ranks CS departments in universities), there is a number of explorable fields of CS in Vietnam. You can learn some of them and do related projects:\n\n- Software engineering \n- Programming languages\n- Algorithms and complexity\n- Economics and Computations\n- Human-Computer interaction \n- Robotics \n- Machine learning & data mining, Artificial intelligence\n\nDon’t be **overwhelmed**, I am just listing out. I will go into some details right now. \n\nOf course, learning about CS should start with **basic programming**. In the past, I participated in a summer programming course in Mr. Phuong's in HUS and was given books on basic programming materials to learn. The first languages I learnt were C and C ++.\nYou can choose one programming language that you feel most **familiar** with. It can be javascript, or java or python to start getting familiar with programming syntaxs. There are multiple of different sources you can learn online (tutorialspoint, we3school) and some cool websites for practicing **algorithms**: https://www.geeksforgeeks.org/, https://www.hackerrank.com/,  https://leetcode.com/\n\nOnce you have understood the basics, there are **4 directions** that I think can be applicable in Vietnam (you can choose more than 1):\n1. Continue to learn more advanced programming algorithms so that you can take the city or the national team. If you enter the team, you will learn a lot more advanced knowledge about algorithms.\n2. Can learn statistics and code about Python and R to learn machine learning or learn advanced math to learn about artificial intelligence.\n3. Can learn programming in robotics and participate in a number of contests such as WRO, First Robotics Competition (FRC of the GART team from Hanoi Amsterdam), First Lego League\n4. Can explore other industries in CS such as web-developer, app-developer\n\nSo, lets dive into these 4 directions and what you can do for your **extracurricular activities**:\n\n### Direction 1: Only follow this direction if you feel you can learn and enter the national team or the international team (these are experiences that I learnt from my best friend who is in the national team of informatics)\n- There are many self-help books such as **specialized** textbooks, programming algorithms (Le Minh Hoang) or Introduction to Algorithms.\n- After that you can go to the pages listed above, especially **codeforce** to practice and increase your level\n- Join forums like VNOI on facebook or practice in websites such as codeforce (this should be familiar to most students taking this direction) \n- In addition to the national or international examinations, you can take **examinations** such as ACM, ICPC or the Northern coastal examination, google codejam, top coder, AT coder or IOM exam of Russia\n- Learn **algorithm** courses on coursera (there is a course of princeton free which is quite complete https://www.coursera.org/learn/algorithms-part1, https://www.coursera.org/learn/algorithms-part2)\n\n### Direction 2: In this direction, it is currently very popular in Vietnam and there are many projects that can be implemented if followed.\n- A number of free Harvard courses you can find the link in [here](https://online-learning.harvard.edu/catalog?keywords&subject%5B0%5D=84&paid%5B1%5D=1&max_price&start_date_range%5Bmin%5D%5Bdate%5D&start_date_range%5Bmax%5D%5Bdate%5D)\n- An extremely popular Stanford course on **machine learning** and artificial intelligence by Andrew Nguyen, if you can you should take for $ 79 for a certificate [this course](https://www.coursera.org/learn/machine-learning)\n- Should learn and participate in 1 of 2 (or both) Massp AI summer camps or PiMA the Mathematics of **Machine Learning** (in terms of difficulty, I think PiMA is more difficult than Massp)\n- There is another summer camp but much harder is Southest Asia Machine Learning School (tps: //www.seamls.ai)\n- This is a Playlist of basic concepts in machine learning [Here](https://www.youtube.com/playlist?list=PLeFDKx7ZCnBZlZCiXnbs2vberhDgSUGge). You can read the [blog of PiMA summer camp](https://www.pimavn.com/blog/)\n- Since the nature of this field is really **difficult**, one good path to follow is to find a mentor that can help you go through all the knowledge and basics to build or rebuild a simple Machine Learning **product** (could be anything from voice recognition to image filtering). This mentor could be a person from the camps that I listed above or one of your teachers. I used to go to AI Academy Vietnam and they had great teachers there. \n\n### Direction 3: This direction will be mainly towards the famous competitions in Vietnam for robots for high school students such as World Robot Olympiad, First Robotics Competition, First Lego League or patent exams.\n- You can buy the **Lego Mindstorm** Education core set (about 15 million) and watch the tutorial online and explore this type of coding. \n- Normally, if you want to study robots, you should aim for some **specific exams**, for example, to study for the World Robot Olympiad, you can take a look at the courses of Mr. Nguyen Tien Phong Stem or TEKY (if in Hanoi) and in Ho Chi Minh City, Vietrobot. Education.\n- You can join the **robotics club** at school or even start one. It is up to you. \n- I learnt about Java Object Oriented (Programming with Mosh on Youtube and at the robotics club at my school) as well as Lego Mindstorm EV3. There are many other types of coding that can be included while handling robotics so I will not go into the details here.\n- Lastly, robotics designs are highly valued in **invention competitions** so what you can do is pay attention to some competitions at International Federation of Inventors' Associations (IFIA) and maybe form a team and compete in one of these competitions. \n\n### Direction 4: This is the main direction that I chose for myself and it has proven its efficiency at least during my application process. This direction is characterized by still learning average algorithms but focusing more about web app programming to create real products that can be associated with extra-curricular activities.\nThe thing that I was **confident** about my profile was that I was able to **connect** my interests and majors together. For example, I was the president of an environmental club so seeing that many clubs and organizations nowadays have super awesome **websites**, I tried to build my own website from front to backend. This not only enabled me to expand my organization and spread my **influences** to more people but also showed that I was able to use my coding knowledge to build a product. \n\nTherefore, you should try to learn how to create your **website** (if you don’t want to code everything like I did), you can always use famous tools like Wixsite, Wordpress or Squarespace and try to **integrate** this website in whatever extra curricular activities you are doing. Moreover, if you can’t create a product, you can help or support in developing a full product. Personally, I used to create my first website using **python flask**, javascript, html, css and tried to learn new ways to create website (you can check out the M.E.R.N stack in my [last post](https://decodecraft.com/2020/03/27/CreateBlog/)). \n\nLast but not least, software or applications products are highly valued in different **inventions** or sciences or entrepreneur activities or contests. Thus, you should always check out for entrepreneurial or inventions competition and kick up with your own idea for an application (things like Conrad Challenge, Google Science Fair, LaunchX). \n\nRegularly pay attention to some events that Big4 or big organizations such as Google Codein and participate in trying to get cert and experience. Or join programming events or clubs at your high schools (I can recommend Shecodes, Vietcode, Algoventure).\n\nIt's important to find yourself a mentor (if possible) and make your own personal code **projects** that can be anything that **applies** to what you've learned: blog, news web, weather app, film store, etc just be able to apply your hobby to reality.\n\nOne important thing you should have in your profile is **leadership**. The Adcom always seek to search for this characteristic since they always find potential future leaders and organizers, and if you possess that talent in high school, your profile would be more valuable. This is not to say that you should have dozens of leadership projects that go nowhere. You should focus on a few major personal projects, **commit** and develop the most out of them. \n\nOne last thing I want to include is that it is really advantageous for an engineering or heavily STEM student like me to have EXCAs related to **charity or social work**. Thus, if you are applying for CS, you should consider looking and participating in more social and volunteer work or find international programs that are related to these things. I used to apply to UWC (summer camp) and Asia Pacific Youth Week and were speaker in some activities. \n\n**WOW if you are still reading at this point, it means that this blog should be quite interesting to you right 😊.**\n\n## Essays (Personal Statement and Supplemental Essays) \n### Personal Statement\nI cannot stress the **importance** of these essays to your profile enough since they can add up to about 40% chance of success in your application. I am a moderate writer (not that good tbh as you can see in this post) but that doesn’t mean I cannot have good essays. There are a few good **points** that you should keep in mind. \n\nEssays about computer science itself are either not that **interesting** or repetitive (means that that topic was already written before). This is true because since many many students are trying to apply to CS departments, the Adcom should have already read most of the possible topics if you are just writing about computer science. Therefore, I recommend doing this only if you can either take another interest of yours and **combine** it with CS or have a super cool and unique way to approach computer science. \n\nOne thing I did is that I always brought a pen and a notebook (could be from your phone) and noted down my **experience** along the way of every programs and trips that I went to. I think this is a good practice to remember your ***feelings, observations and experiences*** to use later on. And since the main topic of your PS could be changed any second, reviewing these notes should be quite useful in choosing the best topic for your essay.\n\nYour essay should be something **unique** about you, your journey or your background. I know many people would want to read books such as 50 Successful Stanford/Harvard Application Essays and things like that, but it is not that beneficial. It’s true that you can have a glimpse of how a good essay might look like but what you should take away are how the **words** were chosen, how the **sentences** are organized in way that they can shine in 650 words, how the **stories** were told, … but not the main topic or content itself. Remember that the adcoms have been doing their jobs for years and detecting plagiarism in your essay shouldn’t be difficult. \n\nHence, all in all, what you should do is: \n- Try to collect ideas from your experiences, your past, your background or your field trips and programs \n- Write as many extensive drafts as possible for these ideas and choose the best one later \n- Try to redevelop and reorganize structures, sentences, words and try to add personal examples or anecdotes\n- Let somebody else read and review your essay (could be your counselor or your teachers or anyone) to ensure that you will have an objective view of your essay\n\n### Supplemental Essays\nRemember that I told you that you shouldn’t add CS to your PS, well this is the place that you should add it. These essays should be written even if they are optional or not.\n\nMany schools should have questions like\n> “Why do you want to go to this school?”, \n> “Why did you choose this as your major?”\n> \"What are your academic strengths?\" \"What is your extracurricular background?\", … \n> and paraphrased versions of these questions\nThis is a great place to go into **details** in your CS profiles. However, instead of focusing on your CS skills (which you should have already listed in your resume), you should be focusing on how you can **apply** those skills in that university. It can be **courses** that you want to enroll, EXCAs that you want to take part, **professors** you like to meet, programs that you are interested in or even things that you want to build for the community there. Sometimes you can go to discussions forums such as Quora, Reddit, College Confidential to find out more about the schools and read past students’ **comments and reviews.**\n\nAssuming that you are going to apply for a lot of schools, **recycling** your essays is inevitable. Recycling means that you take the structure of one of your written and edited essays and wrote another one with the similar question topic to another school and change the information respectively. Thus, you should prepare different **wording versions** of your essays (150, 200, 250, 350, …) based on the word limit of each school.\n\nLastly, don’t be lazy not applying to multiple schools. Each time you go online and collect information about a school that you are interested in is a time you **strengthen** your research skills. Furthermore, many schools have very intrigue supplemental questions so it’s a good chance to practice creating drafts of your ideas and sharpen your writing skills. \n\n## Choosing your school\nThis is a broad topic and it’s very hard to narrow it down but I will try to give you as much **insights** as possible. \nIn general, if you are picking a school to major Computer Science, you might want to take a look at this ranking list on [Usnews](https://www.usnews.com/best-graduate-schools/top-science-schools/computer-science-rankings). Even though this is for graduate school, the undergraduate CS department is still applicable. There are some other ranking lists that might be helpful on [Niche](https://www.niche.com/colleges/search/best-colleges-for-computer-science/) and [CollegeChoice](https://www.collegechoice.net/rankings/best-computer-science-degree/). However, these lists just merely give you a sense of what are good CS schools. This is because there are many schools that have great and rigid **CS curriculum** but have a low overall ranking – the ranking you see on usnews is based on many factors – and these schools are usually **ignored** by parents and students (don’t know why overall ranking is so highly valued). \n\nOnce you have added some schools to your lists, what you should do next is to **check** the cost, tuition and fees of that school. Many schools at the top of your list (which I know that some will be eager to pick) might be public schools and their **financial aid** is very **limited** to international students. Many schools will just pass your application, defer or waitlist it if you can pay less than what they require. From my experience, I would consider a 20k/year **contribution** is relatively low compared to the general amount Vietnamese students are willing to pay. So before locking in any schools, you need to discuss very carefully with your family about your family contributions per year and finally make a call. \n\nAnother good habit is that you should research the each of your chosen school **CS curriculum**. Most schools should have a BA or BS degree in Computer Science and the required **classes and credits** should be included in their websites. That’s where you should take a look at those courses path and see what you want to study the most. For example, in my school, Rice University, the BS course includes probability of data science, algorithms, programming languages, object-oriented programming, computer system, game design… Understanding what is in the courses of the school would help you determine your **wanted** school easier.  \n\nAnd the last thing I noticed is that the higher CS ranking the school is, the harder it is for you to get admitted majoring CS. This is obvious because these schools are either not want to take more CS international students or requiring a superb CS profile and character. So, you should choose your school carefully based on the mentioned aspects. \n\n## Preparing necessary documents\nWhen applying to US colleges, you will need to prepare a lot of documents. I will list some of the major down here but there could be more based on the school that you are applying to. You should all be preparing these **early** (2-3 months before submitting your application) to avoid unwanted situations such as not getting enough documents by the deadline. All of these documents should be **scanned** and upload wherever necessary.\n### Your high school grade (transcripts) \nThese are your GPAs at school from grade 9 to grade 11 (for ED applicants) and the first semester of grade 12 (for RD applicants) aggregated into 1 file. You should constantly check out for your grades at school and try to maintain an **increasing GPA** from grade 9 to 11. For example, in my school Hanoi Amsterdam, getting the transcript might take up to a week or more, so I would get them signed ahead to avoid rushing. Also, you should make sure that your transcripts are the **same forms** as the peers from your school.\n### Your certificates \nThis might seem weird since during the application process, you don’t really need to submit your **certificates** of competitions or EXCAs. However, when applying to CS, you will go through a lot of programs or online courses (such as on Coursera) and these courses will give you **certificates** up on completion and you can **attach** some of these to your resume. Therefore, it is not an unnecessary practice to scan your certificates every time you have them and store them in your phone or computer. \n### Your resume and portfolio\n#### Resume\nThis is optional still I recommend you having one. Your resume should be the place where you insert your most **standout** honors, awards, programs, activities, writings, researches, or self-development, skills, talents and hobbies. Seems a lot right! Well, you don’t need to include all of those as they are just my suggestions. When you are applying for CS, you might want to consider **linking** some of your products in the resume (maybe link to a website, or to a google file). Even though that you usually they would print the resume out and read them, it would be helpful if you can show some kind of **authority** over your products. And the resume is normally 2 pages long so you need to choose your activities to show that you are not only a heavily STEM-oriented student but a **well-rounded** student as well.\n#### Portfolio\nFor CS majors, this can be a thing that sums up your professional development in programming or coding. It can be anything from a video to a personal **website page** (this is the most common I think).This is a great method for you to show more about your specific skillset for the hobbies or majors that you intended.  \n### Common App and Coalition App\nThese are 2 platforms that allow you to submit your application to multiple US universities and colleges. Common App might be more popular and more university accepts this platform. \nIt is important that you **filled out** all the information in the Common App (there is a lot so it might take even a few days) and you should be constantly **checking and updating** information here too. Furthermore, adding your intended schools to the Dashboard would help you figure out the specific requirements and deadline of each school and help you keep track of them. There is a maximum of 20 schools in the Common App so if you cannot apply to all the schools you want you can add a Coalition App. \n### Financial Documents\nWhen I was applying to Rice, there are 5 main things I need to prepare. \n•\tParents' salary in the last year both before and after taxed.\n•\tFamily’s savings certification\n•\tIDOC income statement of me\n•\tIDOC income statement of my parents\n•\t[CSS](https://cssprofile.collegeboard.org/) profile \nThe first 2 things are quite obvious. In order to process your financial aid package, the school needs to know your family’s **annual income and savings** and decide whether it is suitable or not. The [IDOC](https://pages.collegeboard.org/idoc)(Institutional Documentation Service) provides more information on your non-taxed family income, which not all schools required. The last thing is that you need to fill out, if your school requires it, your CSS profile, which contains all kinds of sources of your income and the exact spending per year, …etc. \n### Letters of Recommendations\nThese also varies among the schools but usually (this is my case) when applying to CS or engineering, you should have at least 4 recommendations letters: one from your form teacher, 2 subject teachers at school (I would recommend having a least 1 **social** subject) and one from your advisor (could be any teacher, college access counselor, employer, research mentor, …) \nOne thing to notice is that these letters and the transcripts that I have mentioned above must be **submitted** directly from the teacher common app account.  \n\n## Internships\nThis is actually a very **impactful** part of an application for CS majors. When studying computer science, it is important that you work in groups and show out your collaborative skills to build a **complete product**. Therefore, internships at real technologies companies could really reveal that you not only a student but you have also worked in a **professional** environment and you can work as a team. It will also show that your skills are recognized and valued by some companies just by passing the internship tests.\nYou don’t need to find a top tech company and try to do internship there for 1 or 2 days and quit. It can be anywhere **authorized** in CS. What you need is the commitment to that internship maybe 1 to 6 months, showing that you have developed quality skills and helped created some cool products. \n\n## Interview\nThis is actually the part that I am most confident in my application profile. Some schools have optional interviews other have required ones. However, if you have the chance to be in an interview and you are **confident** with your speaking ability, you should definitely take it. It is really beneficial and **advantageous** for students interviewing since the adcom gets to see us both in words (your application profile) and in **real-life** (by talking to you). So here are a few tips for interviewing for universities (these are the things that I have applied to my interview): \n\n- You need to make and remember (if you can) a **list**of your main attributes, characteristics, activities, honors that you want them to know. They are not going to ask you all the questions you wanted so you need to **incorporate** these attributes while you are answer and you should miss none. \n-  Once you have received an **email** of your interview, you should already have the interviewer name, contacts, specialization, current jobs and interested areas. You can use this information to **search out** their profiles online on pages like LinkedIn, Facebook, Twitter, … and see what are they interested in. Note down a few key points and try to **connect** some of these things to your conversation\n- Sometimes, the interviewer might not have your resume so you can expect them to ask both **specialized** questions related to your profile and **general** questions. For example, since my interviewer was also major in computer science and she was also a science enthusiast, I got a lot of technical questions relating to some of the coding products that I created and detailed question concerning my research project.\n- Don’t put too much pressure on yourself and just **relax** and consider it as a **normal** conversation. Both you and the interviewer would be much more satisfied if 2 people are just like chatting.\n- You want to specifically and clearly mention your intended major and your **goals** in your years in college and after that if possible.\n- Prepare some questions to **ask** the interviewer at the end. This makes the interview 2-sided and more like a **normal** conversation (back and forth talking) Questions such as what is the life there, or what unique experiences I can have show that you actually care about the school and the surrounding environments. \n- Lastly, carefully setting up your backgrounds. Remember all those days that you were playing online games and got disconnected. Well make sure that doesn’t happen. Get yourself the top speed 3g, 4g or 5g, … or whatever internet you can find that is **stable**. And leave your phone out of your interviewing room since you don’t want any interruptions. \n\n## Maintain your spirit\nIn the stressful time, especially during the intensive time of an application season, everyone will at some time feel so tired, so taken down, so strained out. But it is important to **surround** yourself with the people that always support you and maintain a good poise and temper. Sometimes, you just gotta rest and spend some time **relaxing** yourself maybe going out, enjoying movies, … Don’t care too much about other people’s profiles but stay focused on **finishing yours**. \n\nI was so lucky that I was always accompanied and supported by my family, my mother, my father and my brother. Thanks to all people that have been with me during last intensive year. There are many good friends that I have in my group at my class that always support me and we usually hang out for lunch after school to relieve the tension. There is my squad that always give each other compliments even if we were competing against each other. There is my girlfriend and my “catalyst” who cheered me up and always assured me in the most intense time during the application season which is the October and November just before I submitted my documents. Without these people, I would have never achieved what I have done today.\n\n## ENDING\nSo as I have said in the beginning, there are no magical formulas that can assure you a spot in a US University but there are always quantitative things during the application process that might help you get an edge. One thing I believe in is that \n> Even though the application process somewhat depends on luck, you can dramatically increase your luck by constantly working harder. \n\nI hope that this post has given you some insight of the application process of US University in general and of CS students in specific. If you find this post helpful, please share it and follow [my blog](https://decodecraft.com/) (this website) for more cool and informative posts !!\n\n\n\n\n","source":"_posts/Scholarship.md","raw":"---\ntitle: Post#3 How I got a full scholarship at Rice Engineering Computer Science\ncatalog: true\ndate: 2020-04-09 00:57:37\nsubtitle: 20 min read\nheader-img: test1.jpg\ntags: [scholarships, CS]\nreadtime:\n---\n\n## First few words\nSounds like a clickbait title but it is not. \n\nLet me repeat this ***important*** thing: There is no **magical** formulas or certain ways that can make you admitted to a university in US. I got the **scholarship** from Rice University doesn’t mean that I am better than anyone, just because I am slightly luckier. \n\n{% asset_img test6.PNG %}\n\nI have been writing a lot recently both technical (coding related) and critical thinking essays (felt like I was back to the application process days…). There are 3 ways that you would make it into a CS department in a school: applying to CS department after you got admitted, declare your CS major before applying and transferring to CS department. Therefore, I decided to write this post to share my **experiences** and some **advices** for applying **Computer Science** as your major for US Universities.\n\nThis post would be very helpful to students trying to apply for CS – aka one of the hottest major in Vietnam – or just apply for US universities in general. Since its popularity, most students would want to go to a top Computer Science school, making it increasingly **harder** to apply for CS as major. If you can see in the table below, the CS admission rates in some top CS schools are **critically low**.\n\n{% asset_img cspic.PNG %}\n\n(Extracted from junilearning.com) \nTherefore, in order to support students in need of help, I want to reveal some real **experiences** that I have gone through during my application process this year. I am also new to writing blog like this so please **excuse** my writing. \n\nLet’s get right into it!! First, you can have a look at my **“general”** path of the last application season.\n\n## My general path\n\n- Grade 10: study **SAT**, explore some clubs and **activities** at school -> finish SAT by May 2018 -> Summer of grade 10: Going to programs, coming with personal project **ideas**, study for National Math Team.\n\n- Grade 11: September 2018: got into the **National** Math Team, October 2018: finished TOEFL, **developing** personal project (CLEEN) -> January 2019: finish National Contest, starting my project Cleen and create the website -> March 2019 to May 2019: **recruit** members for CLEEN, study and finish SAT2.\n\n- Summer of 2019: going to programs, do the main events of CLEEN, forming **Personal** Statement ideas -> October and November 2019: **completing** both personal statement and supplement essays, collecting the necessary documents, filling Common App and Submit Application!! \n\n## Honors and Awards\n\nI am a math-oriented since secondary school and a math major in high school. This gives me a small **edge** since the number of mathematics contest (state, regional, national, international) available in Vietnam is **tremendous**. However, not all of these math contests should be that appealing in your resume. One post that I find really catagorized the Math contests could be found [here](https://vnexpress.net/nhan-dien-thuong-hieu-mot-so-cuoc-thi-toan-quoc-te-3500285.html)\n\nHowever, that being said, I always tried my best to be involved in any possible **competitions** that I was interested in, or which my friends were competing (sounds competitive huh), or the standard **contests** that math majors should be aware of already. Some of the competitions that I was involved in were (National Math, International Math Modelling, Hanoi Municipal Math, American Invitational Mathematics Examination, …). Remember that the most **significant** awards of yours should be from high school or at most **grade 9** since too many competitions from early secondary school should too long ago for the Adcom to process. \n\nSo, you should always on the lookout for the contests and competitions related to your **major subject** at school or your **intended major**. It does not matter whether they are the state contests or international, they will be valuable in your profile. One of my main interest was environment so besides mathematics competitions, I was looking for competition involving new environmental ideas or youth speaking forums.   \n\nAlso, there is a lot of things that can be included in your Honors and Awards section. If you are applying for a prestigious or **competitive program** and got selected, you should be listing it in your **profile** even if you can’t make it to the actual program since I know that many students in next year application season could be affected by the current pandemic Covid19 (many programs may get cancelled or postponed). Furthermore, if you are trying hard at school, you can receive some kind of **scholarships** (At my school Hanoi Amsterdam, there are school’s honor scholarships at the end of each semester) so you can remember this for your profile. \n\nYou might be wondering how I got into **CS department** of Rice University with few honors or awards related to CS. Well, we would discuss that later in the post so stay tuned!\n\n## Setting an early path for yourself\nThis doesn’t mean that if you start or change your mind **late** about studying in the US, you will fail or anything. However, if you have the chance, you should set an **early route** for yourself: When will you be studying for **standardized** tests, when will you be studying at *schools*, when will you spend time doing EXCAs (Extra curricular activities), when will you be doing the **competitions**, when will be the **essays**, when will be the time for resting (if there is such kind of thing …). Just kidding, all of these might not be as crystal-clear right at first but you should always envision a **path** in your mind. \n\nOne thing to note is that you should divide your path into different **sections** (an example is above), and once you finished a section, you can get rid of it from your head and **focus** on other stuffs. For example, you should try to finish your standard tests (SAT/ACT -> TOEFL/IELTS -> SAT2) as soon as possible so that you may concentrate on your EXCAs instead. \n\nI was lucky that I finished my SAT quite early (at the end of my 10th grade) since I was spending all my time in grade 10 to study (Not really a recommended thing since you should be **balancing** your time studying and **exploring** different clubs at school). I finished my TOEFL just about the time I got into the National Mathematics Team and after the National Math, I finished my SAT2 (at the end of my 11th grade) and spend my 11th grade summer for **extracurricular** activities so I think I did a good job on drawing a good path for myself. \n\n## Standardized Tests\nDespite the fact that these tests are not the **determining** factor in your application anymore, I think that this only applies to students getting a high score. These tests are a way to show the Adcom that you actually studied for them. \n\nFor the standardize test, I **recommend** learning by dividing into 2 phases. My first phase was when I was getting to know SAT, TOEFL. \n### SAT:\n- **Phase 1**: I would try to read literature and history passages (since they are my **biggest fear**) as much as I can. I went to some extra classes but not too intensive at this moment. And you SHOULD NOT do too much real tests since they would run out by the time you need to study **intensively**. Don’t worry if you don’t get a high score at this time because it is common for most people to struggle at this stage. And remember to write and learn by heart as many SAT words as possible. I have a strategy to write the **meaning** of a new word as another new word so that you can learn more words at a time (since many SAT words are kind of synonyms) \n\n- **Phase 2**: study intensively. I would read multiple critical passages and note down my **mistakes** after each mock test (take this as many as you can and reflect on your score progress). At this stage, I began to do more real tests from the College Board. And you should make sure that your **math score** is always high (since to get max score in Math you only need to be careful without knowing too much). \n\n### TOEFL: \n- I would do the same as above but remember that you should always **practice** toefl on your computer so that you can be familiar with taking the test online. And before taking the real test, you should have some days clearing your voice and practice **intensive** speaking (since this is the disadvantaged part of most Vietnamese student). \n- I used to learn 54 TPOs on these 3 websites but I don’t know if they are still available \n(Toefl.kmf, Top.zhan, langlib)\n\n\n## Extracurricular Activities and More about Computer Science\nOKAYYY!! It’s time for that part that you came here to **read**. One thing I like to mention is that I am writing this section not in the perspective of an Informatics major but of a **computer science** applicant. \n\nAccording to CS ranking (a page that ranks CS departments in universities), there is a number of explorable fields of CS in Vietnam. You can learn some of them and do related projects:\n\n- Software engineering \n- Programming languages\n- Algorithms and complexity\n- Economics and Computations\n- Human-Computer interaction \n- Robotics \n- Machine learning & data mining, Artificial intelligence\n\nDon’t be **overwhelmed**, I am just listing out. I will go into some details right now. \n\nOf course, learning about CS should start with **basic programming**. In the past, I participated in a summer programming course in Mr. Phuong's in HUS and was given books on basic programming materials to learn. The first languages I learnt were C and C ++.\nYou can choose one programming language that you feel most **familiar** with. It can be javascript, or java or python to start getting familiar with programming syntaxs. There are multiple of different sources you can learn online (tutorialspoint, we3school) and some cool websites for practicing **algorithms**: https://www.geeksforgeeks.org/, https://www.hackerrank.com/,  https://leetcode.com/\n\nOnce you have understood the basics, there are **4 directions** that I think can be applicable in Vietnam (you can choose more than 1):\n1. Continue to learn more advanced programming algorithms so that you can take the city or the national team. If you enter the team, you will learn a lot more advanced knowledge about algorithms.\n2. Can learn statistics and code about Python and R to learn machine learning or learn advanced math to learn about artificial intelligence.\n3. Can learn programming in robotics and participate in a number of contests such as WRO, First Robotics Competition (FRC of the GART team from Hanoi Amsterdam), First Lego League\n4. Can explore other industries in CS such as web-developer, app-developer\n\nSo, lets dive into these 4 directions and what you can do for your **extracurricular activities**:\n\n### Direction 1: Only follow this direction if you feel you can learn and enter the national team or the international team (these are experiences that I learnt from my best friend who is in the national team of informatics)\n- There are many self-help books such as **specialized** textbooks, programming algorithms (Le Minh Hoang) or Introduction to Algorithms.\n- After that you can go to the pages listed above, especially **codeforce** to practice and increase your level\n- Join forums like VNOI on facebook or practice in websites such as codeforce (this should be familiar to most students taking this direction) \n- In addition to the national or international examinations, you can take **examinations** such as ACM, ICPC or the Northern coastal examination, google codejam, top coder, AT coder or IOM exam of Russia\n- Learn **algorithm** courses on coursera (there is a course of princeton free which is quite complete https://www.coursera.org/learn/algorithms-part1, https://www.coursera.org/learn/algorithms-part2)\n\n### Direction 2: In this direction, it is currently very popular in Vietnam and there are many projects that can be implemented if followed.\n- A number of free Harvard courses you can find the link in [here](https://online-learning.harvard.edu/catalog?keywords&subject%5B0%5D=84&paid%5B1%5D=1&max_price&start_date_range%5Bmin%5D%5Bdate%5D&start_date_range%5Bmax%5D%5Bdate%5D)\n- An extremely popular Stanford course on **machine learning** and artificial intelligence by Andrew Nguyen, if you can you should take for $ 79 for a certificate [this course](https://www.coursera.org/learn/machine-learning)\n- Should learn and participate in 1 of 2 (or both) Massp AI summer camps or PiMA the Mathematics of **Machine Learning** (in terms of difficulty, I think PiMA is more difficult than Massp)\n- There is another summer camp but much harder is Southest Asia Machine Learning School (tps: //www.seamls.ai)\n- This is a Playlist of basic concepts in machine learning [Here](https://www.youtube.com/playlist?list=PLeFDKx7ZCnBZlZCiXnbs2vberhDgSUGge). You can read the [blog of PiMA summer camp](https://www.pimavn.com/blog/)\n- Since the nature of this field is really **difficult**, one good path to follow is to find a mentor that can help you go through all the knowledge and basics to build or rebuild a simple Machine Learning **product** (could be anything from voice recognition to image filtering). This mentor could be a person from the camps that I listed above or one of your teachers. I used to go to AI Academy Vietnam and they had great teachers there. \n\n### Direction 3: This direction will be mainly towards the famous competitions in Vietnam for robots for high school students such as World Robot Olympiad, First Robotics Competition, First Lego League or patent exams.\n- You can buy the **Lego Mindstorm** Education core set (about 15 million) and watch the tutorial online and explore this type of coding. \n- Normally, if you want to study robots, you should aim for some **specific exams**, for example, to study for the World Robot Olympiad, you can take a look at the courses of Mr. Nguyen Tien Phong Stem or TEKY (if in Hanoi) and in Ho Chi Minh City, Vietrobot. Education.\n- You can join the **robotics club** at school or even start one. It is up to you. \n- I learnt about Java Object Oriented (Programming with Mosh on Youtube and at the robotics club at my school) as well as Lego Mindstorm EV3. There are many other types of coding that can be included while handling robotics so I will not go into the details here.\n- Lastly, robotics designs are highly valued in **invention competitions** so what you can do is pay attention to some competitions at International Federation of Inventors' Associations (IFIA) and maybe form a team and compete in one of these competitions. \n\n### Direction 4: This is the main direction that I chose for myself and it has proven its efficiency at least during my application process. This direction is characterized by still learning average algorithms but focusing more about web app programming to create real products that can be associated with extra-curricular activities.\nThe thing that I was **confident** about my profile was that I was able to **connect** my interests and majors together. For example, I was the president of an environmental club so seeing that many clubs and organizations nowadays have super awesome **websites**, I tried to build my own website from front to backend. This not only enabled me to expand my organization and spread my **influences** to more people but also showed that I was able to use my coding knowledge to build a product. \n\nTherefore, you should try to learn how to create your **website** (if you don’t want to code everything like I did), you can always use famous tools like Wixsite, Wordpress or Squarespace and try to **integrate** this website in whatever extra curricular activities you are doing. Moreover, if you can’t create a product, you can help or support in developing a full product. Personally, I used to create my first website using **python flask**, javascript, html, css and tried to learn new ways to create website (you can check out the M.E.R.N stack in my [last post](https://decodecraft.com/2020/03/27/CreateBlog/)). \n\nLast but not least, software or applications products are highly valued in different **inventions** or sciences or entrepreneur activities or contests. Thus, you should always check out for entrepreneurial or inventions competition and kick up with your own idea for an application (things like Conrad Challenge, Google Science Fair, LaunchX). \n\nRegularly pay attention to some events that Big4 or big organizations such as Google Codein and participate in trying to get cert and experience. Or join programming events or clubs at your high schools (I can recommend Shecodes, Vietcode, Algoventure).\n\nIt's important to find yourself a mentor (if possible) and make your own personal code **projects** that can be anything that **applies** to what you've learned: blog, news web, weather app, film store, etc just be able to apply your hobby to reality.\n\nOne important thing you should have in your profile is **leadership**. The Adcom always seek to search for this characteristic since they always find potential future leaders and organizers, and if you possess that talent in high school, your profile would be more valuable. This is not to say that you should have dozens of leadership projects that go nowhere. You should focus on a few major personal projects, **commit** and develop the most out of them. \n\nOne last thing I want to include is that it is really advantageous for an engineering or heavily STEM student like me to have EXCAs related to **charity or social work**. Thus, if you are applying for CS, you should consider looking and participating in more social and volunteer work or find international programs that are related to these things. I used to apply to UWC (summer camp) and Asia Pacific Youth Week and were speaker in some activities. \n\n**WOW if you are still reading at this point, it means that this blog should be quite interesting to you right 😊.**\n\n## Essays (Personal Statement and Supplemental Essays) \n### Personal Statement\nI cannot stress the **importance** of these essays to your profile enough since they can add up to about 40% chance of success in your application. I am a moderate writer (not that good tbh as you can see in this post) but that doesn’t mean I cannot have good essays. There are a few good **points** that you should keep in mind. \n\nEssays about computer science itself are either not that **interesting** or repetitive (means that that topic was already written before). This is true because since many many students are trying to apply to CS departments, the Adcom should have already read most of the possible topics if you are just writing about computer science. Therefore, I recommend doing this only if you can either take another interest of yours and **combine** it with CS or have a super cool and unique way to approach computer science. \n\nOne thing I did is that I always brought a pen and a notebook (could be from your phone) and noted down my **experience** along the way of every programs and trips that I went to. I think this is a good practice to remember your ***feelings, observations and experiences*** to use later on. And since the main topic of your PS could be changed any second, reviewing these notes should be quite useful in choosing the best topic for your essay.\n\nYour essay should be something **unique** about you, your journey or your background. I know many people would want to read books such as 50 Successful Stanford/Harvard Application Essays and things like that, but it is not that beneficial. It’s true that you can have a glimpse of how a good essay might look like but what you should take away are how the **words** were chosen, how the **sentences** are organized in way that they can shine in 650 words, how the **stories** were told, … but not the main topic or content itself. Remember that the adcoms have been doing their jobs for years and detecting plagiarism in your essay shouldn’t be difficult. \n\nHence, all in all, what you should do is: \n- Try to collect ideas from your experiences, your past, your background or your field trips and programs \n- Write as many extensive drafts as possible for these ideas and choose the best one later \n- Try to redevelop and reorganize structures, sentences, words and try to add personal examples or anecdotes\n- Let somebody else read and review your essay (could be your counselor or your teachers or anyone) to ensure that you will have an objective view of your essay\n\n### Supplemental Essays\nRemember that I told you that you shouldn’t add CS to your PS, well this is the place that you should add it. These essays should be written even if they are optional or not.\n\nMany schools should have questions like\n> “Why do you want to go to this school?”, \n> “Why did you choose this as your major?”\n> \"What are your academic strengths?\" \"What is your extracurricular background?\", … \n> and paraphrased versions of these questions\nThis is a great place to go into **details** in your CS profiles. However, instead of focusing on your CS skills (which you should have already listed in your resume), you should be focusing on how you can **apply** those skills in that university. It can be **courses** that you want to enroll, EXCAs that you want to take part, **professors** you like to meet, programs that you are interested in or even things that you want to build for the community there. Sometimes you can go to discussions forums such as Quora, Reddit, College Confidential to find out more about the schools and read past students’ **comments and reviews.**\n\nAssuming that you are going to apply for a lot of schools, **recycling** your essays is inevitable. Recycling means that you take the structure of one of your written and edited essays and wrote another one with the similar question topic to another school and change the information respectively. Thus, you should prepare different **wording versions** of your essays (150, 200, 250, 350, …) based on the word limit of each school.\n\nLastly, don’t be lazy not applying to multiple schools. Each time you go online and collect information about a school that you are interested in is a time you **strengthen** your research skills. Furthermore, many schools have very intrigue supplemental questions so it’s a good chance to practice creating drafts of your ideas and sharpen your writing skills. \n\n## Choosing your school\nThis is a broad topic and it’s very hard to narrow it down but I will try to give you as much **insights** as possible. \nIn general, if you are picking a school to major Computer Science, you might want to take a look at this ranking list on [Usnews](https://www.usnews.com/best-graduate-schools/top-science-schools/computer-science-rankings). Even though this is for graduate school, the undergraduate CS department is still applicable. There are some other ranking lists that might be helpful on [Niche](https://www.niche.com/colleges/search/best-colleges-for-computer-science/) and [CollegeChoice](https://www.collegechoice.net/rankings/best-computer-science-degree/). However, these lists just merely give you a sense of what are good CS schools. This is because there are many schools that have great and rigid **CS curriculum** but have a low overall ranking – the ranking you see on usnews is based on many factors – and these schools are usually **ignored** by parents and students (don’t know why overall ranking is so highly valued). \n\nOnce you have added some schools to your lists, what you should do next is to **check** the cost, tuition and fees of that school. Many schools at the top of your list (which I know that some will be eager to pick) might be public schools and their **financial aid** is very **limited** to international students. Many schools will just pass your application, defer or waitlist it if you can pay less than what they require. From my experience, I would consider a 20k/year **contribution** is relatively low compared to the general amount Vietnamese students are willing to pay. So before locking in any schools, you need to discuss very carefully with your family about your family contributions per year and finally make a call. \n\nAnother good habit is that you should research the each of your chosen school **CS curriculum**. Most schools should have a BA or BS degree in Computer Science and the required **classes and credits** should be included in their websites. That’s where you should take a look at those courses path and see what you want to study the most. For example, in my school, Rice University, the BS course includes probability of data science, algorithms, programming languages, object-oriented programming, computer system, game design… Understanding what is in the courses of the school would help you determine your **wanted** school easier.  \n\nAnd the last thing I noticed is that the higher CS ranking the school is, the harder it is for you to get admitted majoring CS. This is obvious because these schools are either not want to take more CS international students or requiring a superb CS profile and character. So, you should choose your school carefully based on the mentioned aspects. \n\n## Preparing necessary documents\nWhen applying to US colleges, you will need to prepare a lot of documents. I will list some of the major down here but there could be more based on the school that you are applying to. You should all be preparing these **early** (2-3 months before submitting your application) to avoid unwanted situations such as not getting enough documents by the deadline. All of these documents should be **scanned** and upload wherever necessary.\n### Your high school grade (transcripts) \nThese are your GPAs at school from grade 9 to grade 11 (for ED applicants) and the first semester of grade 12 (for RD applicants) aggregated into 1 file. You should constantly check out for your grades at school and try to maintain an **increasing GPA** from grade 9 to 11. For example, in my school Hanoi Amsterdam, getting the transcript might take up to a week or more, so I would get them signed ahead to avoid rushing. Also, you should make sure that your transcripts are the **same forms** as the peers from your school.\n### Your certificates \nThis might seem weird since during the application process, you don’t really need to submit your **certificates** of competitions or EXCAs. However, when applying to CS, you will go through a lot of programs or online courses (such as on Coursera) and these courses will give you **certificates** up on completion and you can **attach** some of these to your resume. Therefore, it is not an unnecessary practice to scan your certificates every time you have them and store them in your phone or computer. \n### Your resume and portfolio\n#### Resume\nThis is optional still I recommend you having one. Your resume should be the place where you insert your most **standout** honors, awards, programs, activities, writings, researches, or self-development, skills, talents and hobbies. Seems a lot right! Well, you don’t need to include all of those as they are just my suggestions. When you are applying for CS, you might want to consider **linking** some of your products in the resume (maybe link to a website, or to a google file). Even though that you usually they would print the resume out and read them, it would be helpful if you can show some kind of **authority** over your products. And the resume is normally 2 pages long so you need to choose your activities to show that you are not only a heavily STEM-oriented student but a **well-rounded** student as well.\n#### Portfolio\nFor CS majors, this can be a thing that sums up your professional development in programming or coding. It can be anything from a video to a personal **website page** (this is the most common I think).This is a great method for you to show more about your specific skillset for the hobbies or majors that you intended.  \n### Common App and Coalition App\nThese are 2 platforms that allow you to submit your application to multiple US universities and colleges. Common App might be more popular and more university accepts this platform. \nIt is important that you **filled out** all the information in the Common App (there is a lot so it might take even a few days) and you should be constantly **checking and updating** information here too. Furthermore, adding your intended schools to the Dashboard would help you figure out the specific requirements and deadline of each school and help you keep track of them. There is a maximum of 20 schools in the Common App so if you cannot apply to all the schools you want you can add a Coalition App. \n### Financial Documents\nWhen I was applying to Rice, there are 5 main things I need to prepare. \n•\tParents' salary in the last year both before and after taxed.\n•\tFamily’s savings certification\n•\tIDOC income statement of me\n•\tIDOC income statement of my parents\n•\t[CSS](https://cssprofile.collegeboard.org/) profile \nThe first 2 things are quite obvious. In order to process your financial aid package, the school needs to know your family’s **annual income and savings** and decide whether it is suitable or not. The [IDOC](https://pages.collegeboard.org/idoc)(Institutional Documentation Service) provides more information on your non-taxed family income, which not all schools required. The last thing is that you need to fill out, if your school requires it, your CSS profile, which contains all kinds of sources of your income and the exact spending per year, …etc. \n### Letters of Recommendations\nThese also varies among the schools but usually (this is my case) when applying to CS or engineering, you should have at least 4 recommendations letters: one from your form teacher, 2 subject teachers at school (I would recommend having a least 1 **social** subject) and one from your advisor (could be any teacher, college access counselor, employer, research mentor, …) \nOne thing to notice is that these letters and the transcripts that I have mentioned above must be **submitted** directly from the teacher common app account.  \n\n## Internships\nThis is actually a very **impactful** part of an application for CS majors. When studying computer science, it is important that you work in groups and show out your collaborative skills to build a **complete product**. Therefore, internships at real technologies companies could really reveal that you not only a student but you have also worked in a **professional** environment and you can work as a team. It will also show that your skills are recognized and valued by some companies just by passing the internship tests.\nYou don’t need to find a top tech company and try to do internship there for 1 or 2 days and quit. It can be anywhere **authorized** in CS. What you need is the commitment to that internship maybe 1 to 6 months, showing that you have developed quality skills and helped created some cool products. \n\n## Interview\nThis is actually the part that I am most confident in my application profile. Some schools have optional interviews other have required ones. However, if you have the chance to be in an interview and you are **confident** with your speaking ability, you should definitely take it. It is really beneficial and **advantageous** for students interviewing since the adcom gets to see us both in words (your application profile) and in **real-life** (by talking to you). So here are a few tips for interviewing for universities (these are the things that I have applied to my interview): \n\n- You need to make and remember (if you can) a **list**of your main attributes, characteristics, activities, honors that you want them to know. They are not going to ask you all the questions you wanted so you need to **incorporate** these attributes while you are answer and you should miss none. \n-  Once you have received an **email** of your interview, you should already have the interviewer name, contacts, specialization, current jobs and interested areas. You can use this information to **search out** their profiles online on pages like LinkedIn, Facebook, Twitter, … and see what are they interested in. Note down a few key points and try to **connect** some of these things to your conversation\n- Sometimes, the interviewer might not have your resume so you can expect them to ask both **specialized** questions related to your profile and **general** questions. For example, since my interviewer was also major in computer science and she was also a science enthusiast, I got a lot of technical questions relating to some of the coding products that I created and detailed question concerning my research project.\n- Don’t put too much pressure on yourself and just **relax** and consider it as a **normal** conversation. Both you and the interviewer would be much more satisfied if 2 people are just like chatting.\n- You want to specifically and clearly mention your intended major and your **goals** in your years in college and after that if possible.\n- Prepare some questions to **ask** the interviewer at the end. This makes the interview 2-sided and more like a **normal** conversation (back and forth talking) Questions such as what is the life there, or what unique experiences I can have show that you actually care about the school and the surrounding environments. \n- Lastly, carefully setting up your backgrounds. Remember all those days that you were playing online games and got disconnected. Well make sure that doesn’t happen. Get yourself the top speed 3g, 4g or 5g, … or whatever internet you can find that is **stable**. And leave your phone out of your interviewing room since you don’t want any interruptions. \n\n## Maintain your spirit\nIn the stressful time, especially during the intensive time of an application season, everyone will at some time feel so tired, so taken down, so strained out. But it is important to **surround** yourself with the people that always support you and maintain a good poise and temper. Sometimes, you just gotta rest and spend some time **relaxing** yourself maybe going out, enjoying movies, … Don’t care too much about other people’s profiles but stay focused on **finishing yours**. \n\nI was so lucky that I was always accompanied and supported by my family, my mother, my father and my brother. Thanks to all people that have been with me during last intensive year. There are many good friends that I have in my group at my class that always support me and we usually hang out for lunch after school to relieve the tension. There is my squad that always give each other compliments even if we were competing against each other. There is my girlfriend and my “catalyst” who cheered me up and always assured me in the most intense time during the application season which is the October and November just before I submitted my documents. Without these people, I would have never achieved what I have done today.\n\n## ENDING\nSo as I have said in the beginning, there are no magical formulas that can assure you a spot in a US University but there are always quantitative things during the application process that might help you get an edge. One thing I believe in is that \n> Even though the application process somewhat depends on luck, you can dramatically increase your luck by constantly working harder. \n\nI hope that this post has given you some insight of the application process of US University in general and of CS students in specific. If you find this post helpful, please share it and follow [my blog](https://decodecraft.com/) (this website) for more cool and informative posts !!\n\n\n\n\n","slug":"Scholarship","published":1,"updated":"2021-06-21T02:21:18.110Z","_id":"ckq5zemt9000ec6sbpptg10g6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2><span id=\"first-few-words\">First few words</span></h2>\n<p>Sounds like a clickbait title but it is not.</p>\n<p>Let me repeat this <strong><em>important</em></strong> thing: There is no <strong>magical</strong> formulas or certain ways that can make you admitted to a university in US. I got the <strong>scholarship</strong> from Rice University doesn’t mean that I am better than anyone, just because I am slightly luckier.</p>\n<img src=\"/Scholarship/test6.PNG\">\n<p>I have been writing a lot recently both technical (coding related) and critical thinking essays (felt like I was back to the application process days…). There are 3 ways that you would make it into a CS department in a school: applying to CS department after you got admitted, declare your CS major before applying and transferring to CS department. Therefore, I decided to write this post to share my <strong>experiences</strong> and some <strong>advices</strong> for applying <strong>Computer Science</strong> as your major for US Universities.</p>\n<p>This post would be very helpful to students trying to apply for CS – aka one of the hottest major in Vietnam – or just apply for US universities in general. Since its popularity, most students would want to go to a top Computer Science school, making it increasingly <strong>harder</strong> to apply for CS as major. If you can see in the table below, the CS admission rates in some top CS schools are <strong>critically low</strong>.</p>\n<img src=\"/Scholarship/cspic.PNG\">\n<p>(Extracted from <a href=\"http://junilearning.com\" target=\"_blank\" rel=\"noopener\">junilearning.com</a>)<br>\nTherefore, in order to support students in need of help, I want to reveal some real <strong>experiences</strong> that I have gone through during my application process this year. I am also new to writing blog like this so please <strong>excuse</strong> my writing.</p>\n<p>Let’s get right into it!! First, you can have a look at my <strong>“general”</strong> path of the last application season.</p>\n<h2><span id=\"my-general-path\">My general path</span></h2>\n<ul>\n<li>\n<p>Grade 10: study <strong>SAT</strong>, explore some clubs and <strong>activities</strong> at school -&gt; finish SAT by May 2018 -&gt; Summer of grade 10: Going to programs, coming with personal project <strong>ideas</strong>, study for National Math Team.</p>\n</li>\n<li>\n<p>Grade 11: September 2018: got into the <strong>National</strong> Math Team, October 2018: finished TOEFL, <strong>developing</strong> personal project (CLEEN) -&gt; January 2019: finish National Contest, starting my project Cleen and create the website -&gt; March 2019 to May 2019: <strong>recruit</strong> members for CLEEN, study and finish SAT2.</p>\n</li>\n<li>\n<p>Summer of 2019: going to programs, do the main events of CLEEN, forming <strong>Personal</strong> Statement ideas -&gt; October and November 2019: <strong>completing</strong> both personal statement and supplement essays, collecting the necessary documents, filling Common App and Submit Application!!</p>\n</li>\n</ul>\n<h2><span id=\"honors-and-awards\">Honors and Awards</span></h2>\n<p>I am a math-oriented since secondary school and a math major in high school. This gives me a small <strong>edge</strong> since the number of mathematics contest (state, regional, national, international) available in Vietnam is <strong>tremendous</strong>. However, not all of these math contests should be that appealing in your resume. One post that I find really catagorized the Math contests could be found <a href=\"https://vnexpress.net/nhan-dien-thuong-hieu-mot-so-cuoc-thi-toan-quoc-te-3500285.html\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<p>However, that being said, I always tried my best to be involved in any possible <strong>competitions</strong> that I was interested in, or which my friends were competing (sounds competitive huh), or the standard <strong>contests</strong> that math majors should be aware of already. Some of the competitions that I was involved in were (National Math, International Math Modelling, Hanoi Municipal Math, American Invitational Mathematics Examination, …). Remember that the most <strong>significant</strong> awards of yours should be from high school or at most <strong>grade 9</strong> since too many competitions from early secondary school should too long ago for the Adcom to process.</p>\n<p>So, you should always on the lookout for the contests and competitions related to your <strong>major subject</strong> at school or your <strong>intended major</strong>. It does not matter whether they are the state contests or international, they will be valuable in your profile. One of my main interest was environment so besides mathematics competitions, I was looking for competition involving new environmental ideas or youth speaking forums.</p>\n<p>Also, there is a lot of things that can be included in your Honors and Awards section. If you are applying for a prestigious or <strong>competitive program</strong> and got selected, you should be listing it in your <strong>profile</strong> even if you can’t make it to the actual program since I know that many students in next year application season could be affected by the current pandemic Covid19 (many programs may get cancelled or postponed). Furthermore, if you are trying hard at school, you can receive some kind of <strong>scholarships</strong> (At my school Hanoi Amsterdam, there are school’s honor scholarships at the end of each semester) so you can remember this for your profile.</p>\n<p>You might be wondering how I got into <strong>CS department</strong> of Rice University with few honors or awards related to CS. Well, we would discuss that later in the post so stay tuned!</p>\n<h2><span id=\"setting-an-early-path-for-yourself\">Setting an early path for yourself</span></h2>\n<p>This doesn’t mean that if you start or change your mind <strong>late</strong> about studying in the US, you will fail or anything. However, if you have the chance, you should set an <strong>early route</strong> for yourself: When will you be studying for <strong>standardized</strong> tests, when will you be studying at <em>schools</em>, when will you spend time doing EXCAs (Extra curricular activities), when will you be doing the <strong>competitions</strong>, when will be the <strong>essays</strong>, when will be the time for resting (if there is such kind of thing …). Just kidding, all of these might not be as crystal-clear right at first but you should always envision a <strong>path</strong> in your mind.</p>\n<p>One thing to note is that you should divide your path into different <strong>sections</strong> (an example is above), and once you finished a section, you can get rid of it from your head and <strong>focus</strong> on other stuffs. For example, you should try to finish your standard tests (SAT/ACT -&gt; TOEFL/IELTS -&gt; SAT2) as soon as possible so that you may concentrate on your EXCAs instead.</p>\n<p>I was lucky that I finished my SAT quite early (at the end of my 10th grade) since I was spending all my time in grade 10 to study (Not really a recommended thing since you should be <strong>balancing</strong> your time studying and <strong>exploring</strong> different clubs at school). I finished my TOEFL just about the time I got into the National Mathematics Team and after the National Math, I finished my SAT2 (at the end of my 11th grade) and spend my 11th grade summer for <strong>extracurricular</strong> activities so I think I did a good job on drawing a good path for myself.</p>\n<h2><span id=\"standardized-tests\">Standardized Tests</span></h2>\n<p>Despite the fact that these tests are not the <strong>determining</strong> factor in your application anymore, I think that this only applies to students getting a high score. These tests are a way to show the Adcom that you actually studied for them.</p>\n<p>For the standardize test, I <strong>recommend</strong> learning by dividing into 2 phases. My first phase was when I was getting to know SAT, TOEFL.</p>\n<h3><span id=\"sat\">SAT:</span></h3>\n<ul>\n<li>\n<p><strong>Phase 1</strong>: I would try to read literature and history passages (since they are my <strong>biggest fear</strong>) as much as I can. I went to some extra classes but not too intensive at this moment. And you SHOULD NOT do too much real tests since they would run out by the time you need to study <strong>intensively</strong>. Don’t worry if you don’t get a high score at this time because it is common for most people to struggle at this stage. And remember to write and learn by heart as many SAT words as possible. I have a strategy to write the <strong>meaning</strong> of a new word as another new word so that you can learn more words at a time (since many SAT words are kind of synonyms)</p>\n</li>\n<li>\n<p><strong>Phase 2</strong>: study intensively. I would read multiple critical passages and note down my <strong>mistakes</strong> after each mock test (take this as many as you can and reflect on your score progress). At this stage, I began to do more real tests from the College Board. And you should make sure that your <strong>math score</strong> is always high (since to get max score in Math you only need to be careful without knowing too much).</p>\n</li>\n</ul>\n<h3><span id=\"toefl\">TOEFL:</span></h3>\n<ul>\n<li>I would do the same as above but remember that you should always <strong>practice</strong> toefl on your computer so that you can be familiar with taking the test online. And before taking the real test, you should have some days clearing your voice and practice <strong>intensive</strong> speaking (since this is the disadvantaged part of most Vietnamese student).</li>\n<li>I used to learn 54 TPOs on these 3 websites but I don’t know if they are still available<br>\n(Toefl.kmf, Top.zhan, langlib)</li>\n</ul>\n<h2><span id=\"extracurricular-activities-and-more-about-computer-science\">Extracurricular Activities and More about Computer Science</span></h2>\n<p>OKAYYY!! It’s time for that part that you came here to <strong>read</strong>. One thing I like to mention is that I am writing this section not in the perspective of an Informatics major but of a <strong>computer science</strong> applicant.</p>\n<p>According to CS ranking (a page that ranks CS departments in universities), there is a number of explorable fields of CS in Vietnam. You can learn some of them and do related projects:</p>\n<ul>\n<li>Software engineering</li>\n<li>Programming languages</li>\n<li>Algorithms and complexity</li>\n<li>Economics and Computations</li>\n<li>Human-Computer interaction</li>\n<li>Robotics</li>\n<li>Machine learning &amp; data mining, Artificial intelligence</li>\n</ul>\n<p>Don’t be <strong>overwhelmed</strong>, I am just listing out. I will go into some details right now.</p>\n<p>Of course, learning about CS should start with <strong>basic programming</strong>. In the past, I participated in a summer programming course in Mr. Phuong’s in HUS and was given books on basic programming materials to learn. The first languages I learnt were C and C ++.<br>\nYou can choose one programming language that you feel most <strong>familiar</strong> with. It can be javascript, or java or python to start getting familiar with programming syntaxs. There are multiple of different sources you can learn online (tutorialspoint, we3school) and some cool websites for practicing <strong>algorithms</strong>: <a href=\"https://www.geeksforgeeks.org/\" target=\"_blank\" rel=\"noopener\">https://www.geeksforgeeks.org/</a>, <a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener\">https://www.hackerrank.com/</a>,  <a href=\"https://leetcode.com/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/</a></p>\n<p>Once you have understood the basics, there are <strong>4 directions</strong> that I think can be applicable in Vietnam (you can choose more than 1):</p>\n<ol>\n<li>Continue to learn more advanced programming algorithms so that you can take the city or the national team. If you enter the team, you will learn a lot more advanced knowledge about algorithms.</li>\n<li>Can learn statistics and code about Python and R to learn machine learning or learn advanced math to learn about artificial intelligence.</li>\n<li>Can learn programming in robotics and participate in a number of contests such as WRO, First Robotics Competition (FRC of the GART team from Hanoi Amsterdam), First Lego League</li>\n<li>Can explore other industries in CS such as web-developer, app-developer</li>\n</ol>\n<p>So, lets dive into these 4 directions and what you can do for your <strong>extracurricular activities</strong>:</p>\n<h3><span id=\"direction-1-only-follow-this-direction-if-you-feel-you-can-learn-and-enter-the-national-team-or-the-international-team-these-are-experiences-that-i-learnt-from-my-best-friend-who-is-in-the-national-team-of-informatics\">Direction 1: Only follow this direction if you feel you can learn and enter the national team or the international team (these are experiences that I learnt from my best friend who is in the national team of informatics)</span></h3>\n<ul>\n<li>There are many self-help books such as <strong>specialized</strong> textbooks, programming algorithms (Le Minh Hoang) or Introduction to Algorithms.</li>\n<li>After that you can go to the pages listed above, especially <strong>codeforce</strong> to practice and increase your level</li>\n<li>Join forums like VNOI on facebook or practice in websites such as codeforce (this should be familiar to most students taking this direction)</li>\n<li>In addition to the national or international examinations, you can take <strong>examinations</strong> such as ACM, ICPC or the Northern coastal examination, google codejam, top coder, AT coder or IOM exam of Russia</li>\n<li>Learn <strong>algorithm</strong> courses on coursera (there is a course of princeton free which is quite complete <a href=\"https://www.coursera.org/learn/algorithms-part1\" target=\"_blank\" rel=\"noopener\">https://www.coursera.org/learn/algorithms-part1</a>, <a href=\"https://www.coursera.org/learn/algorithms-part2\" target=\"_blank\" rel=\"noopener\">https://www.coursera.org/learn/algorithms-part2</a>)</li>\n</ul>\n<h3><span id=\"direction-2-in-this-direction-it-is-currently-very-popular-in-vietnam-and-there-are-many-projects-that-can-be-implemented-if-followed\">Direction 2: In this direction, it is currently very popular in Vietnam and there are many projects that can be implemented if followed.</span></h3>\n<ul>\n<li>A number of free Harvard courses you can find the link in <a href=\"https://online-learning.harvard.edu/catalog?keywords&amp;subject%5B0%5D=84&amp;paid%5B1%5D=1&amp;max_price&amp;start_date_range%5Bmin%5D%5Bdate%5D&amp;start_date_range%5Bmax%5D%5Bdate%5D\" target=\"_blank\" rel=\"noopener\">here</a></li>\n<li>An extremely popular Stanford course on <strong>machine learning</strong> and artificial intelligence by Andrew Nguyen, if you can you should take for $ 79 for a certificate <a href=\"https://www.coursera.org/learn/machine-learning\" target=\"_blank\" rel=\"noopener\">this course</a></li>\n<li>Should learn and participate in 1 of 2 (or both) Massp AI summer camps or PiMA the Mathematics of <strong>Machine Learning</strong> (in terms of difficulty, I think PiMA is more difficult than Massp)</li>\n<li>There is another summer camp but much harder is Southest Asia Machine Learning School (tps: <a href=\"//www.seamls.ai\">//www.seamls.ai</a>)</li>\n<li>This is a Playlist of basic concepts in machine learning <a href=\"https://www.youtube.com/playlist?list=PLeFDKx7ZCnBZlZCiXnbs2vberhDgSUGge\" target=\"_blank\" rel=\"noopener\">Here</a>. You can read the <a href=\"https://www.pimavn.com/blog/\" target=\"_blank\" rel=\"noopener\">blog of PiMA summer camp</a></li>\n<li>Since the nature of this field is really <strong>difficult</strong>, one good path to follow is to find a mentor that can help you go through all the knowledge and basics to build or rebuild a simple Machine Learning <strong>product</strong> (could be anything from voice recognition to image filtering). This mentor could be a person from the camps that I listed above or one of your teachers. I used to go to AI Academy Vietnam and they had great teachers there.</li>\n</ul>\n<h3><span id=\"direction-3-this-direction-will-be-mainly-towards-the-famous-competitions-in-vietnam-for-robots-for-high-school-students-such-as-world-robot-olympiad-first-robotics-competition-first-lego-league-or-patent-exams\">Direction 3: This direction will be mainly towards the famous competitions in Vietnam for robots for high school students such as World Robot Olympiad, First Robotics Competition, First Lego League or patent exams.</span></h3>\n<ul>\n<li>You can buy the <strong>Lego Mindstorm</strong> Education core set (about 15 million) and watch the tutorial online and explore this type of coding.</li>\n<li>Normally, if you want to study robots, you should aim for some <strong>specific exams</strong>, for example, to study for the World Robot Olympiad, you can take a look at the courses of Mr. Nguyen Tien Phong Stem or TEKY (if in Hanoi) and in Ho Chi Minh City, Vietrobot. Education.</li>\n<li>You can join the <strong>robotics club</strong> at school or even start one. It is up to you.</li>\n<li>I learnt about Java Object Oriented (Programming with Mosh on Youtube and at the robotics club at my school) as well as Lego Mindstorm EV3. There are many other types of coding that can be included while handling robotics so I will not go into the details here.</li>\n<li>Lastly, robotics designs are highly valued in <strong>invention competitions</strong> so what you can do is pay attention to some competitions at International Federation of Inventors’ Associations (IFIA) and maybe form a team and compete in one of these competitions.</li>\n</ul>\n<h3><span id=\"direction-4-this-is-the-main-direction-that-i-chose-for-myself-and-it-has-proven-its-efficiency-at-least-during-my-application-process-this-direction-is-characterized-by-still-learning-average-algorithms-but-focusing-more-about-web-app-programming-to-create-real-products-that-can-be-associated-with-extra-curricular-activities\">Direction 4: This is the main direction that I chose for myself and it has proven its efficiency at least during my application process. This direction is characterized by still learning average algorithms but focusing more about web app programming to create real products that can be associated with extra-curricular activities.</span></h3>\n<p>The thing that I was <strong>confident</strong> about my profile was that I was able to <strong>connect</strong> my interests and majors together. For example, I was the president of an environmental club so seeing that many clubs and organizations nowadays have super awesome <strong>websites</strong>, I tried to build my own website from front to backend. This not only enabled me to expand my organization and spread my <strong>influences</strong> to more people but also showed that I was able to use my coding knowledge to build a product.</p>\n<p>Therefore, you should try to learn how to create your <strong>website</strong> (if you don’t want to code everything like I did), you can always use famous tools like Wixsite, Wordpress or Squarespace and try to <strong>integrate</strong> this website in whatever extra curricular activities you are doing. Moreover, if you can’t create a product, you can help or support in developing a full product. Personally, I used to create my first website using <strong>python flask</strong>, javascript, html, css and tried to learn new ways to create website (you can check out the M.E.R.N stack in my <a href=\"https://decodecraft.com/2020/03/27/CreateBlog/\">last post</a>).</p>\n<p>Last but not least, software or applications products are highly valued in different <strong>inventions</strong> or sciences or entrepreneur activities or contests. Thus, you should always check out for entrepreneurial or inventions competition and kick up with your own idea for an application (things like Conrad Challenge, Google Science Fair, LaunchX).</p>\n<p>Regularly pay attention to some events that Big4 or big organizations such as Google Codein and participate in trying to get cert and experience. Or join programming events or clubs at your high schools (I can recommend Shecodes, Vietcode, Algoventure).</p>\n<p>It’s important to find yourself a mentor (if possible) and make your own personal code <strong>projects</strong> that can be anything that <strong>applies</strong> to what you’ve learned: blog, news web, weather app, film store, etc just be able to apply your hobby to reality.</p>\n<p>One important thing you should have in your profile is <strong>leadership</strong>. The Adcom always seek to search for this characteristic since they always find potential future leaders and organizers, and if you possess that talent in high school, your profile would be more valuable. This is not to say that you should have dozens of leadership projects that go nowhere. You should focus on a few major personal projects, <strong>commit</strong> and develop the most out of them.</p>\n<p>One last thing I want to include is that it is really advantageous for an engineering or heavily STEM student like me to have EXCAs related to <strong>charity or social work</strong>. Thus, if you are applying for CS, you should consider looking and participating in more social and volunteer work or find international programs that are related to these things. I used to apply to UWC (summer camp) and Asia Pacific Youth Week and were speaker in some activities.</p>\n<p><strong>WOW if you are still reading at this point, it means that this blog should be quite interesting to you right 😊.</strong></p>\n<h2><span id=\"essays-personal-statement-and-supplemental-essays\">Essays (Personal Statement and Supplemental Essays)</span></h2>\n<h3><span id=\"personal-statement\">Personal Statement</span></h3>\n<p>I cannot stress the <strong>importance</strong> of these essays to your profile enough since they can add up to about 40% chance of success in your application. I am a moderate writer (not that good tbh as you can see in this post) but that doesn’t mean I cannot have good essays. There are a few good <strong>points</strong> that you should keep in mind.</p>\n<p>Essays about computer science itself are either not that <strong>interesting</strong> or repetitive (means that that topic was already written before). This is true because since many many students are trying to apply to CS departments, the Adcom should have already read most of the possible topics if you are just writing about computer science. Therefore, I recommend doing this only if you can either take another interest of yours and <strong>combine</strong> it with CS or have a super cool and unique way to approach computer science.</p>\n<p>One thing I did is that I always brought a pen and a notebook (could be from your phone) and noted down my <strong>experience</strong> along the way of every programs and trips that I went to. I think this is a good practice to remember your <strong><em>feelings, observations and experiences</em></strong> to use later on. And since the main topic of your PS could be changed any second, reviewing these notes should be quite useful in choosing the best topic for your essay.</p>\n<p>Your essay should be something <strong>unique</strong> about you, your journey or your background. I know many people would want to read books such as 50 Successful Stanford/Harvard Application Essays and things like that, but it is not that beneficial. It’s true that you can have a glimpse of how a good essay might look like but what you should take away are how the <strong>words</strong> were chosen, how the <strong>sentences</strong> are organized in way that they can shine in 650 words, how the <strong>stories</strong> were told, … but not the main topic or content itself. Remember that the adcoms have been doing their jobs for years and detecting plagiarism in your essay shouldn’t be difficult.</p>\n<p>Hence, all in all, what you should do is:</p>\n<ul>\n<li>Try to collect ideas from your experiences, your past, your background or your field trips and programs</li>\n<li>Write as many extensive drafts as possible for these ideas and choose the best one later</li>\n<li>Try to redevelop and reorganize structures, sentences, words and try to add personal examples or anecdotes</li>\n<li>Let somebody else read and review your essay (could be your counselor or your teachers or anyone) to ensure that you will have an objective view of your essay</li>\n</ul>\n<h3><span id=\"supplemental-essays\">Supplemental Essays</span></h3>\n<p>Remember that I told you that you shouldn’t add CS to your PS, well this is the place that you should add it. These essays should be written even if they are optional or not.</p>\n<p>Many schools should have questions like</p>\n<blockquote>\n<p>“Why do you want to go to this school?”,<br>\n“Why did you choose this as your major?”<br>\n“What are your academic strengths?” “What is your extracurricular background?”, …<br>\nand paraphrased versions of these questions<br>\nThis is a great place to go into <strong>details</strong> in your CS profiles. However, instead of focusing on your CS skills (which you should have already listed in your resume), you should be focusing on how you can <strong>apply</strong> those skills in that university. It can be <strong>courses</strong> that you want to enroll, EXCAs that you want to take part, <strong>professors</strong> you like to meet, programs that you are interested in or even things that you want to build for the community there. Sometimes you can go to discussions forums such as Quora, Reddit, College Confidential to find out more about the schools and read past students’ <strong>comments and reviews.</strong></p>\n</blockquote>\n<p>Assuming that you are going to apply for a lot of schools, <strong>recycling</strong> your essays is inevitable. Recycling means that you take the structure of one of your written and edited essays and wrote another one with the similar question topic to another school and change the information respectively. Thus, you should prepare different <strong>wording versions</strong> of your essays (150, 200, 250, 350, …) based on the word limit of each school.</p>\n<p>Lastly, don’t be lazy not applying to multiple schools. Each time you go online and collect information about a school that you are interested in is a time you <strong>strengthen</strong> your research skills. Furthermore, many schools have very intrigue supplemental questions so it’s a good chance to practice creating drafts of your ideas and sharpen your writing skills.</p>\n<h2><span id=\"choosing-your-school\">Choosing your school</span></h2>\n<p>This is a broad topic and it’s very hard to narrow it down but I will try to give you as much <strong>insights</strong> as possible.<br>\nIn general, if you are picking a school to major Computer Science, you might want to take a look at this ranking list on <a href=\"https://www.usnews.com/best-graduate-schools/top-science-schools/computer-science-rankings\" target=\"_blank\" rel=\"noopener\">Usnews</a>. Even though this is for graduate school, the undergraduate CS department is still applicable. There are some other ranking lists that might be helpful on <a href=\"https://www.niche.com/colleges/search/best-colleges-for-computer-science/\" target=\"_blank\" rel=\"noopener\">Niche</a> and <a href=\"https://www.collegechoice.net/rankings/best-computer-science-degree/\" target=\"_blank\" rel=\"noopener\">CollegeChoice</a>. However, these lists just merely give you a sense of what are good CS schools. This is because there are many schools that have great and rigid <strong>CS curriculum</strong> but have a low overall ranking – the ranking you see on usnews is based on many factors – and these schools are usually <strong>ignored</strong> by parents and students (don’t know why overall ranking is so highly valued).</p>\n<p>Once you have added some schools to your lists, what you should do next is to <strong>check</strong> the cost, tuition and fees of that school. Many schools at the top of your list (which I know that some will be eager to pick) might be public schools and their <strong>financial aid</strong> is very <strong>limited</strong> to international students. Many schools will just pass your application, defer or waitlist it if you can pay less than what they require. From my experience, I would consider a 20k/year <strong>contribution</strong> is relatively low compared to the general amount Vietnamese students are willing to pay. So before locking in any schools, you need to discuss very carefully with your family about your family contributions per year and finally make a call.</p>\n<p>Another good habit is that you should research the each of your chosen school <strong>CS curriculum</strong>. Most schools should have a BA or BS degree in Computer Science and the required <strong>classes and credits</strong> should be included in their websites. That’s where you should take a look at those courses path and see what you want to study the most. For example, in my school, Rice University, the BS course includes probability of data science, algorithms, programming languages, object-oriented programming, computer system, game design… Understanding what is in the courses of the school would help you determine your <strong>wanted</strong> school easier.</p>\n<p>And the last thing I noticed is that the higher CS ranking the school is, the harder it is for you to get admitted majoring CS. This is obvious because these schools are either not want to take more CS international students or requiring a superb CS profile and character. So, you should choose your school carefully based on the mentioned aspects.</p>\n<h2><span id=\"preparing-necessary-documents\">Preparing necessary documents</span></h2>\n<p>When applying to US colleges, you will need to prepare a lot of documents. I will list some of the major down here but there could be more based on the school that you are applying to. You should all be preparing these <strong>early</strong> (2-3 months before submitting your application) to avoid unwanted situations such as not getting enough documents by the deadline. All of these documents should be <strong>scanned</strong> and upload wherever necessary.</p>\n<h3><span id=\"your-high-school-grade-transcripts\">Your high school grade (transcripts)</span></h3>\n<p>These are your GPAs at school from grade 9 to grade 11 (for ED applicants) and the first semester of grade 12 (for RD applicants) aggregated into 1 file. You should constantly check out for your grades at school and try to maintain an <strong>increasing GPA</strong> from grade 9 to 11. For example, in my school Hanoi Amsterdam, getting the transcript might take up to a week or more, so I would get them signed ahead to avoid rushing. Also, you should make sure that your transcripts are the <strong>same forms</strong> as the peers from your school.</p>\n<h3><span id=\"your-certificates\">Your certificates</span></h3>\n<p>This might seem weird since during the application process, you don’t really need to submit your <strong>certificates</strong> of competitions or EXCAs. However, when applying to CS, you will go through a lot of programs or online courses (such as on Coursera) and these courses will give you <strong>certificates</strong> up on completion and you can <strong>attach</strong> some of these to your resume. Therefore, it is not an unnecessary practice to scan your certificates every time you have them and store them in your phone or computer.</p>\n<h3><span id=\"your-resume-and-portfolio\">Your resume and portfolio</span></h3>\n<h4><span id=\"resume\">Resume</span></h4>\n<p>This is optional still I recommend you having one. Your resume should be the place where you insert your most <strong>standout</strong> honors, awards, programs, activities, writings, researches, or self-development, skills, talents and hobbies. Seems a lot right! Well, you don’t need to include all of those as they are just my suggestions. When you are applying for CS, you might want to consider <strong>linking</strong> some of your products in the resume (maybe link to a website, or to a google file). Even though that you usually they would print the resume out and read them, it would be helpful if you can show some kind of <strong>authority</strong> over your products. And the resume is normally 2 pages long so you need to choose your activities to show that you are not only a heavily STEM-oriented student but a <strong>well-rounded</strong> student as well.</p>\n<h4><span id=\"portfolio\">Portfolio</span></h4>\n<p>For CS majors, this can be a thing that sums up your professional development in programming or coding. It can be anything from a video to a personal <strong>website page</strong> (this is the most common I think).This is a great method for you to show more about your specific skillset for the hobbies or majors that you intended.</p>\n<h3><span id=\"common-app-and-coalition-app\">Common App and Coalition App</span></h3>\n<p>These are 2 platforms that allow you to submit your application to multiple US universities and colleges. Common App might be more popular and more university accepts this platform.<br>\nIt is important that you <strong>filled out</strong> all the information in the Common App (there is a lot so it might take even a few days) and you should be constantly <strong>checking and updating</strong> information here too. Furthermore, adding your intended schools to the Dashboard would help you figure out the specific requirements and deadline of each school and help you keep track of them. There is a maximum of 20 schools in the Common App so if you cannot apply to all the schools you want you can add a Coalition App.</p>\n<h3><span id=\"financial-documents\">Financial Documents</span></h3>\n<p>When I was applying to Rice, there are 5 main things I need to prepare.<br>\n•\tParents’ salary in the last year both before and after taxed.<br>\n•\tFamily’s savings certification<br>\n•\tIDOC income statement of me<br>\n•\tIDOC income statement of my parents<br>\n•\t<a href=\"https://cssprofile.collegeboard.org/\" target=\"_blank\" rel=\"noopener\">CSS</a> profile<br>\nThe first 2 things are quite obvious. In order to process your financial aid package, the school needs to know your family’s <strong>annual income and savings</strong> and decide whether it is suitable or not. The <a href=\"https://pages.collegeboard.org/idoc\" target=\"_blank\" rel=\"noopener\">IDOC</a>(Institutional Documentation Service) provides more information on your non-taxed family income, which not all schools required. The last thing is that you need to fill out, if your school requires it, your CSS profile, which contains all kinds of sources of your income and the exact spending per year, …etc.</p>\n<h3><span id=\"letters-of-recommendations\">Letters of Recommendations</span></h3>\n<p>These also varies among the schools but usually (this is my case) when applying to CS or engineering, you should have at least 4 recommendations letters: one from your form teacher, 2 subject teachers at school (I would recommend having a least 1 <strong>social</strong> subject) and one from your advisor (could be any teacher, college access counselor, employer, research mentor, …)<br>\nOne thing to notice is that these letters and the transcripts that I have mentioned above must be <strong>submitted</strong> directly from the teacher common app account.</p>\n<h2><span id=\"internships\">Internships</span></h2>\n<p>This is actually a very <strong>impactful</strong> part of an application for CS majors. When studying computer science, it is important that you work in groups and show out your collaborative skills to build a <strong>complete product</strong>. Therefore, internships at real technologies companies could really reveal that you not only a student but you have also worked in a <strong>professional</strong> environment and you can work as a team. It will also show that your skills are recognized and valued by some companies just by passing the internship tests.<br>\nYou don’t need to find a top tech company and try to do internship there for 1 or 2 days and quit. It can be anywhere <strong>authorized</strong> in CS. What you need is the commitment to that internship maybe 1 to 6 months, showing that you have developed quality skills and helped created some cool products.</p>\n<h2><span id=\"interview\">Interview</span></h2>\n<p>This is actually the part that I am most confident in my application profile. Some schools have optional interviews other have required ones. However, if you have the chance to be in an interview and you are <strong>confident</strong> with your speaking ability, you should definitely take it. It is really beneficial and <strong>advantageous</strong> for students interviewing since the adcom gets to see us both in words (your application profile) and in <strong>real-life</strong> (by talking to you). So here are a few tips for interviewing for universities (these are the things that I have applied to my interview):</p>\n<ul>\n<li>You need to make and remember (if you can) a <strong>list</strong>of your main attributes, characteristics, activities, honors that you want them to know. They are not going to ask you all the questions you wanted so you need to <strong>incorporate</strong> these attributes while you are answer and you should miss none.</li>\n<li>Once you have received an <strong>email</strong> of your interview, you should already have the interviewer name, contacts, specialization, current jobs and interested areas. You can use this information to <strong>search out</strong> their profiles online on pages like LinkedIn, Facebook, Twitter, … and see what are they interested in. Note down a few key points and try to <strong>connect</strong> some of these things to your conversation</li>\n<li>Sometimes, the interviewer might not have your resume so you can expect them to ask both <strong>specialized</strong> questions related to your profile and <strong>general</strong> questions. For example, since my interviewer was also major in computer science and she was also a science enthusiast, I got a lot of technical questions relating to some of the coding products that I created and detailed question concerning my research project.</li>\n<li>Don’t put too much pressure on yourself and just <strong>relax</strong> and consider it as a <strong>normal</strong> conversation. Both you and the interviewer would be much more satisfied if 2 people are just like chatting.</li>\n<li>You want to specifically and clearly mention your intended major and your <strong>goals</strong> in your years in college and after that if possible.</li>\n<li>Prepare some questions to <strong>ask</strong> the interviewer at the end. This makes the interview 2-sided and more like a <strong>normal</strong> conversation (back and forth talking) Questions such as what is the life there, or what unique experiences I can have show that you actually care about the school and the surrounding environments.</li>\n<li>Lastly, carefully setting up your backgrounds. Remember all those days that you were playing online games and got disconnected. Well make sure that doesn’t happen. Get yourself the top speed 3g, 4g or 5g, … or whatever internet you can find that is <strong>stable</strong>. And leave your phone out of your interviewing room since you don’t want any interruptions.</li>\n</ul>\n<h2><span id=\"maintain-your-spirit\">Maintain your spirit</span></h2>\n<p>In the stressful time, especially during the intensive time of an application season, everyone will at some time feel so tired, so taken down, so strained out. But it is important to <strong>surround</strong> yourself with the people that always support you and maintain a good poise and temper. Sometimes, you just gotta rest and spend some time <strong>relaxing</strong> yourself maybe going out, enjoying movies, … Don’t care too much about other people’s profiles but stay focused on <strong>finishing yours</strong>.</p>\n<p>I was so lucky that I was always accompanied and supported by my family, my mother, my father and my brother. Thanks to all people that have been with me during last intensive year. There are many good friends that I have in my group at my class that always support me and we usually hang out for lunch after school to relieve the tension. There is my squad that always give each other compliments even if we were competing against each other. There is my girlfriend and my “catalyst” who cheered me up and always assured me in the most intense time during the application season which is the October and November just before I submitted my documents. Without these people, I would have never achieved what I have done today.</p>\n<h2><span id=\"ending\">ENDING</span></h2>\n<p>So as I have said in the beginning, there are no magical formulas that can assure you a spot in a US University but there are always quantitative things during the application process that might help you get an edge. One thing I believe in is that</p>\n<blockquote>\n<p>Even though the application process somewhat depends on luck, you can dramatically increase your luck by constantly working harder.</p>\n</blockquote>\n<p>I hope that this post has given you some insight of the application process of US University in general and of CS students in specific. If you find this post helpful, please share it and follow <a href=\"https://decodecraft.com/\">my blog</a> (this website) for more cool and informative posts !!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>First few words</h2>\n<p>Sounds like a clickbait title but it is not.</p>\n<p>Let me repeat this <strong><em>important</em></strong> thing: There is no <strong>magical</strong> formulas or certain ways that can make you admitted to a university in US. I got the <strong>scholarship</strong> from Rice University doesn’t mean that I am better than anyone, just because I am slightly luckier.</p>\n<img src=\"/Scholarship/test6.PNG\">\n<p>I have been writing a lot recently both technical (coding related) and critical thinking essays (felt like I was back to the application process days…). There are 3 ways that you would make it into a CS department in a school: applying to CS department after you got admitted, declare your CS major before applying and transferring to CS department. Therefore, I decided to write this post to share my <strong>experiences</strong> and some <strong>advices</strong> for applying <strong>Computer Science</strong> as your major for US Universities.</p>\n<p>This post would be very helpful to students trying to apply for CS – aka one of the hottest major in Vietnam – or just apply for US universities in general. Since its popularity, most students would want to go to a top Computer Science school, making it increasingly <strong>harder</strong> to apply for CS as major. If you can see in the table below, the CS admission rates in some top CS schools are <strong>critically low</strong>.</p>\n<img src=\"/Scholarship/cspic.PNG\">\n<p>(Extracted from <a href=\"http://junilearning.com\" target=\"_blank\" rel=\"noopener\">junilearning.com</a>)<br>\nTherefore, in order to support students in need of help, I want to reveal some real <strong>experiences</strong> that I have gone through during my application process this year. I am also new to writing blog like this so please <strong>excuse</strong> my writing.</p>\n<p>Let’s get right into it!! First, you can have a look at my <strong>“general”</strong> path of the last application season.</p>\n<h2>My general path</h2>\n<ul>\n<li>\n<p>Grade 10: study <strong>SAT</strong>, explore some clubs and <strong>activities</strong> at school -&gt; finish SAT by May 2018 -&gt; Summer of grade 10: Going to programs, coming with personal project <strong>ideas</strong>, study for National Math Team.</p>\n</li>\n<li>\n<p>Grade 11: September 2018: got into the <strong>National</strong> Math Team, October 2018: finished TOEFL, <strong>developing</strong> personal project (CLEEN) -&gt; January 2019: finish National Contest, starting my project Cleen and create the website -&gt; March 2019 to May 2019: <strong>recruit</strong> members for CLEEN, study and finish SAT2.</p>\n</li>\n<li>\n<p>Summer of 2019: going to programs, do the main events of CLEEN, forming <strong>Personal</strong> Statement ideas -&gt; October and November 2019: <strong>completing</strong> both personal statement and supplement essays, collecting the necessary documents, filling Common App and Submit Application!!</p>\n</li>\n</ul>\n<h2>Honors and Awards</h2>\n<p>I am a math-oriented since secondary school and a math major in high school. This gives me a small <strong>edge</strong> since the number of mathematics contest (state, regional, national, international) available in Vietnam is <strong>tremendous</strong>. However, not all of these math contests should be that appealing in your resume. One post that I find really catagorized the Math contests could be found <a href=\"https://vnexpress.net/nhan-dien-thuong-hieu-mot-so-cuoc-thi-toan-quoc-te-3500285.html\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<p>However, that being said, I always tried my best to be involved in any possible <strong>competitions</strong> that I was interested in, or which my friends were competing (sounds competitive huh), or the standard <strong>contests</strong> that math majors should be aware of already. Some of the competitions that I was involved in were (National Math, International Math Modelling, Hanoi Municipal Math, American Invitational Mathematics Examination, …). Remember that the most <strong>significant</strong> awards of yours should be from high school or at most <strong>grade 9</strong> since too many competitions from early secondary school should too long ago for the Adcom to process.</p>\n<p>So, you should always on the lookout for the contests and competitions related to your <strong>major subject</strong> at school or your <strong>intended major</strong>. It does not matter whether they are the state contests or international, they will be valuable in your profile. One of my main interest was environment so besides mathematics competitions, I was looking for competition involving new environmental ideas or youth speaking forums.</p>\n<p>Also, there is a lot of things that can be included in your Honors and Awards section. If you are applying for a prestigious or <strong>competitive program</strong> and got selected, you should be listing it in your <strong>profile</strong> even if you can’t make it to the actual program since I know that many students in next year application season could be affected by the current pandemic Covid19 (many programs may get cancelled or postponed). Furthermore, if you are trying hard at school, you can receive some kind of <strong>scholarships</strong> (At my school Hanoi Amsterdam, there are school’s honor scholarships at the end of each semester) so you can remember this for your profile.</p>\n<p>You might be wondering how I got into <strong>CS department</strong> of Rice University with few honors or awards related to CS. Well, we would discuss that later in the post so stay tuned!</p>\n<h2>Setting an early path for yourself</h2>\n<p>This doesn’t mean that if you start or change your mind <strong>late</strong> about studying in the US, you will fail or anything. However, if you have the chance, you should set an <strong>early route</strong> for yourself: When will you be studying for <strong>standardized</strong> tests, when will you be studying at <em>schools</em>, when will you spend time doing EXCAs (Extra curricular activities), when will you be doing the <strong>competitions</strong>, when will be the <strong>essays</strong>, when will be the time for resting (if there is such kind of thing …). Just kidding, all of these might not be as crystal-clear right at first but you should always envision a <strong>path</strong> in your mind.</p>\n<p>One thing to note is that you should divide your path into different <strong>sections</strong> (an example is above), and once you finished a section, you can get rid of it from your head and <strong>focus</strong> on other stuffs. For example, you should try to finish your standard tests (SAT/ACT -&gt; TOEFL/IELTS -&gt; SAT2) as soon as possible so that you may concentrate on your EXCAs instead.</p>\n<p>I was lucky that I finished my SAT quite early (at the end of my 10th grade) since I was spending all my time in grade 10 to study (Not really a recommended thing since you should be <strong>balancing</strong> your time studying and <strong>exploring</strong> different clubs at school). I finished my TOEFL just about the time I got into the National Mathematics Team and after the National Math, I finished my SAT2 (at the end of my 11th grade) and spend my 11th grade summer for <strong>extracurricular</strong> activities so I think I did a good job on drawing a good path for myself.</p>\n<h2>Standardized Tests</h2>\n<p>Despite the fact that these tests are not the <strong>determining</strong> factor in your application anymore, I think that this only applies to students getting a high score. These tests are a way to show the Adcom that you actually studied for them.</p>\n<p>For the standardize test, I <strong>recommend</strong> learning by dividing into 2 phases. My first phase was when I was getting to know SAT, TOEFL.</p>\n<h3>SAT:</h3>\n<ul>\n<li>\n<p><strong>Phase 1</strong>: I would try to read literature and history passages (since they are my <strong>biggest fear</strong>) as much as I can. I went to some extra classes but not too intensive at this moment. And you SHOULD NOT do too much real tests since they would run out by the time you need to study <strong>intensively</strong>. Don’t worry if you don’t get a high score at this time because it is common for most people to struggle at this stage. And remember to write and learn by heart as many SAT words as possible. I have a strategy to write the <strong>meaning</strong> of a new word as another new word so that you can learn more words at a time (since many SAT words are kind of synonyms)</p>\n</li>\n<li>\n<p><strong>Phase 2</strong>: study intensively. I would read multiple critical passages and note down my <strong>mistakes</strong> after each mock test (take this as many as you can and reflect on your score progress). At this stage, I began to do more real tests from the College Board. And you should make sure that your <strong>math score</strong> is always high (since to get max score in Math you only need to be careful without knowing too much).</p>\n</li>\n</ul>\n<h3>TOEFL:</h3>\n<ul>\n<li>I would do the same as above but remember that you should always <strong>practice</strong> toefl on your computer so that you can be familiar with taking the test online. And before taking the real test, you should have some days clearing your voice and practice <strong>intensive</strong> speaking (since this is the disadvantaged part of most Vietnamese student).</li>\n<li>I used to learn 54 TPOs on these 3 websites but I don’t know if they are still available<br>\n(Toefl.kmf, Top.zhan, langlib)</li>\n</ul>\n<h2>Extracurricular Activities and More about Computer Science</h2>\n<p>OKAYYY!! It’s time for that part that you came here to <strong>read</strong>. One thing I like to mention is that I am writing this section not in the perspective of an Informatics major but of a <strong>computer science</strong> applicant.</p>\n<p>According to CS ranking (a page that ranks CS departments in universities), there is a number of explorable fields of CS in Vietnam. You can learn some of them and do related projects:</p>\n<ul>\n<li>Software engineering</li>\n<li>Programming languages</li>\n<li>Algorithms and complexity</li>\n<li>Economics and Computations</li>\n<li>Human-Computer interaction</li>\n<li>Robotics</li>\n<li>Machine learning &amp; data mining, Artificial intelligence</li>\n</ul>\n<p>Don’t be <strong>overwhelmed</strong>, I am just listing out. I will go into some details right now.</p>\n<p>Of course, learning about CS should start with <strong>basic programming</strong>. In the past, I participated in a summer programming course in Mr. Phuong’s in HUS and was given books on basic programming materials to learn. The first languages I learnt were C and C ++.<br>\nYou can choose one programming language that you feel most <strong>familiar</strong> with. It can be javascript, or java or python to start getting familiar with programming syntaxs. There are multiple of different sources you can learn online (tutorialspoint, we3school) and some cool websites for practicing <strong>algorithms</strong>: <a href=\"https://www.geeksforgeeks.org/\" target=\"_blank\" rel=\"noopener\">https://www.geeksforgeeks.org/</a>, <a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener\">https://www.hackerrank.com/</a>,  <a href=\"https://leetcode.com/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/</a></p>\n<p>Once you have understood the basics, there are <strong>4 directions</strong> that I think can be applicable in Vietnam (you can choose more than 1):</p>\n<ol>\n<li>Continue to learn more advanced programming algorithms so that you can take the city or the national team. If you enter the team, you will learn a lot more advanced knowledge about algorithms.</li>\n<li>Can learn statistics and code about Python and R to learn machine learning or learn advanced math to learn about artificial intelligence.</li>\n<li>Can learn programming in robotics and participate in a number of contests such as WRO, First Robotics Competition (FRC of the GART team from Hanoi Amsterdam), First Lego League</li>\n<li>Can explore other industries in CS such as web-developer, app-developer</li>\n</ol>\n<p>So, lets dive into these 4 directions and what you can do for your <strong>extracurricular activities</strong>:</p>\n<h3>Direction 1: Only follow this direction if you feel you can learn and enter the national team or the international team (these are experiences that I learnt from my best friend who is in the national team of informatics)</h3>\n<ul>\n<li>There are many self-help books such as <strong>specialized</strong> textbooks, programming algorithms (Le Minh Hoang) or Introduction to Algorithms.</li>\n<li>After that you can go to the pages listed above, especially <strong>codeforce</strong> to practice and increase your level</li>\n<li>Join forums like VNOI on facebook or practice in websites such as codeforce (this should be familiar to most students taking this direction)</li>\n<li>In addition to the national or international examinations, you can take <strong>examinations</strong> such as ACM, ICPC or the Northern coastal examination, google codejam, top coder, AT coder or IOM exam of Russia</li>\n<li>Learn <strong>algorithm</strong> courses on coursera (there is a course of princeton free which is quite complete <a href=\"https://www.coursera.org/learn/algorithms-part1\" target=\"_blank\" rel=\"noopener\">https://www.coursera.org/learn/algorithms-part1</a>, <a href=\"https://www.coursera.org/learn/algorithms-part2\" target=\"_blank\" rel=\"noopener\">https://www.coursera.org/learn/algorithms-part2</a>)</li>\n</ul>\n<h3>Direction 2: In this direction, it is currently very popular in Vietnam and there are many projects that can be implemented if followed.</h3>\n<ul>\n<li>A number of free Harvard courses you can find the link in <a href=\"https://online-learning.harvard.edu/catalog?keywords&amp;subject%5B0%5D=84&amp;paid%5B1%5D=1&amp;max_price&amp;start_date_range%5Bmin%5D%5Bdate%5D&amp;start_date_range%5Bmax%5D%5Bdate%5D\" target=\"_blank\" rel=\"noopener\">here</a></li>\n<li>An extremely popular Stanford course on <strong>machine learning</strong> and artificial intelligence by Andrew Nguyen, if you can you should take for $ 79 for a certificate <a href=\"https://www.coursera.org/learn/machine-learning\" target=\"_blank\" rel=\"noopener\">this course</a></li>\n<li>Should learn and participate in 1 of 2 (or both) Massp AI summer camps or PiMA the Mathematics of <strong>Machine Learning</strong> (in terms of difficulty, I think PiMA is more difficult than Massp)</li>\n<li>There is another summer camp but much harder is Southest Asia Machine Learning School (tps: <a href=\"//www.seamls.ai\">//www.seamls.ai</a>)</li>\n<li>This is a Playlist of basic concepts in machine learning <a href=\"https://www.youtube.com/playlist?list=PLeFDKx7ZCnBZlZCiXnbs2vberhDgSUGge\" target=\"_blank\" rel=\"noopener\">Here</a>. You can read the <a href=\"https://www.pimavn.com/blog/\" target=\"_blank\" rel=\"noopener\">blog of PiMA summer camp</a></li>\n<li>Since the nature of this field is really <strong>difficult</strong>, one good path to follow is to find a mentor that can help you go through all the knowledge and basics to build or rebuild a simple Machine Learning <strong>product</strong> (could be anything from voice recognition to image filtering). This mentor could be a person from the camps that I listed above or one of your teachers. I used to go to AI Academy Vietnam and they had great teachers there.</li>\n</ul>\n<h3>Direction 3: This direction will be mainly towards the famous competitions in Vietnam for robots for high school students such as World Robot Olympiad, First Robotics Competition, First Lego League or patent exams.</h3>\n<ul>\n<li>You can buy the <strong>Lego Mindstorm</strong> Education core set (about 15 million) and watch the tutorial online and explore this type of coding.</li>\n<li>Normally, if you want to study robots, you should aim for some <strong>specific exams</strong>, for example, to study for the World Robot Olympiad, you can take a look at the courses of Mr. Nguyen Tien Phong Stem or TEKY (if in Hanoi) and in Ho Chi Minh City, Vietrobot. Education.</li>\n<li>You can join the <strong>robotics club</strong> at school or even start one. It is up to you.</li>\n<li>I learnt about Java Object Oriented (Programming with Mosh on Youtube and at the robotics club at my school) as well as Lego Mindstorm EV3. There are many other types of coding that can be included while handling robotics so I will not go into the details here.</li>\n<li>Lastly, robotics designs are highly valued in <strong>invention competitions</strong> so what you can do is pay attention to some competitions at International Federation of Inventors’ Associations (IFIA) and maybe form a team and compete in one of these competitions.</li>\n</ul>\n<h3>Direction 4: This is the main direction that I chose for myself and it has proven its efficiency at least during my application process. This direction is characterized by still learning average algorithms but focusing more about web app programming to create real products that can be associated with extra-curricular activities.</h3>\n<p>The thing that I was <strong>confident</strong> about my profile was that I was able to <strong>connect</strong> my interests and majors together. For example, I was the president of an environmental club so seeing that many clubs and organizations nowadays have super awesome <strong>websites</strong>, I tried to build my own website from front to backend. This not only enabled me to expand my organization and spread my <strong>influences</strong> to more people but also showed that I was able to use my coding knowledge to build a product.</p>\n<p>Therefore, you should try to learn how to create your <strong>website</strong> (if you don’t want to code everything like I did), you can always use famous tools like Wixsite, Wordpress or Squarespace and try to <strong>integrate</strong> this website in whatever extra curricular activities you are doing. Moreover, if you can’t create a product, you can help or support in developing a full product. Personally, I used to create my first website using <strong>python flask</strong>, javascript, html, css and tried to learn new ways to create website (you can check out the M.E.R.N stack in my <a href=\"https://decodecraft.com/2020/03/27/CreateBlog/\">last post</a>).</p>\n<p>Last but not least, software or applications products are highly valued in different <strong>inventions</strong> or sciences or entrepreneur activities or contests. Thus, you should always check out for entrepreneurial or inventions competition and kick up with your own idea for an application (things like Conrad Challenge, Google Science Fair, LaunchX).</p>\n<p>Regularly pay attention to some events that Big4 or big organizations such as Google Codein and participate in trying to get cert and experience. Or join programming events or clubs at your high schools (I can recommend Shecodes, Vietcode, Algoventure).</p>\n<p>It’s important to find yourself a mentor (if possible) and make your own personal code <strong>projects</strong> that can be anything that <strong>applies</strong> to what you’ve learned: blog, news web, weather app, film store, etc just be able to apply your hobby to reality.</p>\n<p>One important thing you should have in your profile is <strong>leadership</strong>. The Adcom always seek to search for this characteristic since they always find potential future leaders and organizers, and if you possess that talent in high school, your profile would be more valuable. This is not to say that you should have dozens of leadership projects that go nowhere. You should focus on a few major personal projects, <strong>commit</strong> and develop the most out of them.</p>\n<p>One last thing I want to include is that it is really advantageous for an engineering or heavily STEM student like me to have EXCAs related to <strong>charity or social work</strong>. Thus, if you are applying for CS, you should consider looking and participating in more social and volunteer work or find international programs that are related to these things. I used to apply to UWC (summer camp) and Asia Pacific Youth Week and were speaker in some activities.</p>\n<p><strong>WOW if you are still reading at this point, it means that this blog should be quite interesting to you right 😊.</strong></p>\n<h2>Essays (Personal Statement and Supplemental Essays)</h2>\n<h3>Personal Statement</h3>\n<p>I cannot stress the <strong>importance</strong> of these essays to your profile enough since they can add up to about 40% chance of success in your application. I am a moderate writer (not that good tbh as you can see in this post) but that doesn’t mean I cannot have good essays. There are a few good <strong>points</strong> that you should keep in mind.</p>\n<p>Essays about computer science itself are either not that <strong>interesting</strong> or repetitive (means that that topic was already written before). This is true because since many many students are trying to apply to CS departments, the Adcom should have already read most of the possible topics if you are just writing about computer science. Therefore, I recommend doing this only if you can either take another interest of yours and <strong>combine</strong> it with CS or have a super cool and unique way to approach computer science.</p>\n<p>One thing I did is that I always brought a pen and a notebook (could be from your phone) and noted down my <strong>experience</strong> along the way of every programs and trips that I went to. I think this is a good practice to remember your <strong><em>feelings, observations and experiences</em></strong> to use later on. And since the main topic of your PS could be changed any second, reviewing these notes should be quite useful in choosing the best topic for your essay.</p>\n<p>Your essay should be something <strong>unique</strong> about you, your journey or your background. I know many people would want to read books such as 50 Successful Stanford/Harvard Application Essays and things like that, but it is not that beneficial. It’s true that you can have a glimpse of how a good essay might look like but what you should take away are how the <strong>words</strong> were chosen, how the <strong>sentences</strong> are organized in way that they can shine in 650 words, how the <strong>stories</strong> were told, … but not the main topic or content itself. Remember that the adcoms have been doing their jobs for years and detecting plagiarism in your essay shouldn’t be difficult.</p>\n<p>Hence, all in all, what you should do is:</p>\n<ul>\n<li>Try to collect ideas from your experiences, your past, your background or your field trips and programs</li>\n<li>Write as many extensive drafts as possible for these ideas and choose the best one later</li>\n<li>Try to redevelop and reorganize structures, sentences, words and try to add personal examples or anecdotes</li>\n<li>Let somebody else read and review your essay (could be your counselor or your teachers or anyone) to ensure that you will have an objective view of your essay</li>\n</ul>\n<h3>Supplemental Essays</h3>\n<p>Remember that I told you that you shouldn’t add CS to your PS, well this is the place that you should add it. These essays should be written even if they are optional or not.</p>\n<p>Many schools should have questions like</p>\n<blockquote>\n<p>“Why do you want to go to this school?”,<br>\n“Why did you choose this as your major?”<br>\n“What are your academic strengths?” “What is your extracurricular background?”, …<br>\nand paraphrased versions of these questions<br>\nThis is a great place to go into <strong>details</strong> in your CS profiles. However, instead of focusing on your CS skills (which you should have already listed in your resume), you should be focusing on how you can <strong>apply</strong> those skills in that university. It can be <strong>courses</strong> that you want to enroll, EXCAs that you want to take part, <strong>professors</strong> you like to meet, programs that you are interested in or even things that you want to build for the community there. Sometimes you can go to discussions forums such as Quora, Reddit, College Confidential to find out more about the schools and read past students’ <strong>comments and reviews.</strong></p>\n</blockquote>\n<p>Assuming that you are going to apply for a lot of schools, <strong>recycling</strong> your essays is inevitable. Recycling means that you take the structure of one of your written and edited essays and wrote another one with the similar question topic to another school and change the information respectively. Thus, you should prepare different <strong>wording versions</strong> of your essays (150, 200, 250, 350, …) based on the word limit of each school.</p>\n<p>Lastly, don’t be lazy not applying to multiple schools. Each time you go online and collect information about a school that you are interested in is a time you <strong>strengthen</strong> your research skills. Furthermore, many schools have very intrigue supplemental questions so it’s a good chance to practice creating drafts of your ideas and sharpen your writing skills.</p>\n<h2>Choosing your school</h2>\n<p>This is a broad topic and it’s very hard to narrow it down but I will try to give you as much <strong>insights</strong> as possible.<br>\nIn general, if you are picking a school to major Computer Science, you might want to take a look at this ranking list on <a href=\"https://www.usnews.com/best-graduate-schools/top-science-schools/computer-science-rankings\" target=\"_blank\" rel=\"noopener\">Usnews</a>. Even though this is for graduate school, the undergraduate CS department is still applicable. There are some other ranking lists that might be helpful on <a href=\"https://www.niche.com/colleges/search/best-colleges-for-computer-science/\" target=\"_blank\" rel=\"noopener\">Niche</a> and <a href=\"https://www.collegechoice.net/rankings/best-computer-science-degree/\" target=\"_blank\" rel=\"noopener\">CollegeChoice</a>. However, these lists just merely give you a sense of what are good CS schools. This is because there are many schools that have great and rigid <strong>CS curriculum</strong> but have a low overall ranking – the ranking you see on usnews is based on many factors – and these schools are usually <strong>ignored</strong> by parents and students (don’t know why overall ranking is so highly valued).</p>\n<p>Once you have added some schools to your lists, what you should do next is to <strong>check</strong> the cost, tuition and fees of that school. Many schools at the top of your list (which I know that some will be eager to pick) might be public schools and their <strong>financial aid</strong> is very <strong>limited</strong> to international students. Many schools will just pass your application, defer or waitlist it if you can pay less than what they require. From my experience, I would consider a 20k/year <strong>contribution</strong> is relatively low compared to the general amount Vietnamese students are willing to pay. So before locking in any schools, you need to discuss very carefully with your family about your family contributions per year and finally make a call.</p>\n<p>Another good habit is that you should research the each of your chosen school <strong>CS curriculum</strong>. Most schools should have a BA or BS degree in Computer Science and the required <strong>classes and credits</strong> should be included in their websites. That’s where you should take a look at those courses path and see what you want to study the most. For example, in my school, Rice University, the BS course includes probability of data science, algorithms, programming languages, object-oriented programming, computer system, game design… Understanding what is in the courses of the school would help you determine your <strong>wanted</strong> school easier.</p>\n<p>And the last thing I noticed is that the higher CS ranking the school is, the harder it is for you to get admitted majoring CS. This is obvious because these schools are either not want to take more CS international students or requiring a superb CS profile and character. So, you should choose your school carefully based on the mentioned aspects.</p>\n<h2>Preparing necessary documents</h2>\n<p>When applying to US colleges, you will need to prepare a lot of documents. I will list some of the major down here but there could be more based on the school that you are applying to. You should all be preparing these <strong>early</strong> (2-3 months before submitting your application) to avoid unwanted situations such as not getting enough documents by the deadline. All of these documents should be <strong>scanned</strong> and upload wherever necessary.</p>\n<h3>Your high school grade (transcripts)</h3>\n<p>These are your GPAs at school from grade 9 to grade 11 (for ED applicants) and the first semester of grade 12 (for RD applicants) aggregated into 1 file. You should constantly check out for your grades at school and try to maintain an <strong>increasing GPA</strong> from grade 9 to 11. For example, in my school Hanoi Amsterdam, getting the transcript might take up to a week or more, so I would get them signed ahead to avoid rushing. Also, you should make sure that your transcripts are the <strong>same forms</strong> as the peers from your school.</p>\n<h3>Your certificates</h3>\n<p>This might seem weird since during the application process, you don’t really need to submit your <strong>certificates</strong> of competitions or EXCAs. However, when applying to CS, you will go through a lot of programs or online courses (such as on Coursera) and these courses will give you <strong>certificates</strong> up on completion and you can <strong>attach</strong> some of these to your resume. Therefore, it is not an unnecessary practice to scan your certificates every time you have them and store them in your phone or computer.</p>\n<h3>Your resume and portfolio</h3>\n<h4>Resume</h4>\n<p>This is optional still I recommend you having one. Your resume should be the place where you insert your most <strong>standout</strong> honors, awards, programs, activities, writings, researches, or self-development, skills, talents and hobbies. Seems a lot right! Well, you don’t need to include all of those as they are just my suggestions. When you are applying for CS, you might want to consider <strong>linking</strong> some of your products in the resume (maybe link to a website, or to a google file). Even though that you usually they would print the resume out and read them, it would be helpful if you can show some kind of <strong>authority</strong> over your products. And the resume is normally 2 pages long so you need to choose your activities to show that you are not only a heavily STEM-oriented student but a <strong>well-rounded</strong> student as well.</p>\n<h4>Portfolio</h4>\n<p>For CS majors, this can be a thing that sums up your professional development in programming or coding. It can be anything from a video to a personal <strong>website page</strong> (this is the most common I think).This is a great method for you to show more about your specific skillset for the hobbies or majors that you intended.</p>\n<h3>Common App and Coalition App</h3>\n<p>These are 2 platforms that allow you to submit your application to multiple US universities and colleges. Common App might be more popular and more university accepts this platform.<br>\nIt is important that you <strong>filled out</strong> all the information in the Common App (there is a lot so it might take even a few days) and you should be constantly <strong>checking and updating</strong> information here too. Furthermore, adding your intended schools to the Dashboard would help you figure out the specific requirements and deadline of each school and help you keep track of them. There is a maximum of 20 schools in the Common App so if you cannot apply to all the schools you want you can add a Coalition App.</p>\n<h3>Financial Documents</h3>\n<p>When I was applying to Rice, there are 5 main things I need to prepare.<br>\n•\tParents’ salary in the last year both before and after taxed.<br>\n•\tFamily’s savings certification<br>\n•\tIDOC income statement of me<br>\n•\tIDOC income statement of my parents<br>\n•\t<a href=\"https://cssprofile.collegeboard.org/\" target=\"_blank\" rel=\"noopener\">CSS</a> profile<br>\nThe first 2 things are quite obvious. In order to process your financial aid package, the school needs to know your family’s <strong>annual income and savings</strong> and decide whether it is suitable or not. The <a href=\"https://pages.collegeboard.org/idoc\" target=\"_blank\" rel=\"noopener\">IDOC</a>(Institutional Documentation Service) provides more information on your non-taxed family income, which not all schools required. The last thing is that you need to fill out, if your school requires it, your CSS profile, which contains all kinds of sources of your income and the exact spending per year, …etc.</p>\n<h3>Letters of Recommendations</h3>\n<p>These also varies among the schools but usually (this is my case) when applying to CS or engineering, you should have at least 4 recommendations letters: one from your form teacher, 2 subject teachers at school (I would recommend having a least 1 <strong>social</strong> subject) and one from your advisor (could be any teacher, college access counselor, employer, research mentor, …)<br>\nOne thing to notice is that these letters and the transcripts that I have mentioned above must be <strong>submitted</strong> directly from the teacher common app account.</p>\n<h2>Internships</h2>\n<p>This is actually a very <strong>impactful</strong> part of an application for CS majors. When studying computer science, it is important that you work in groups and show out your collaborative skills to build a <strong>complete product</strong>. Therefore, internships at real technologies companies could really reveal that you not only a student but you have also worked in a <strong>professional</strong> environment and you can work as a team. It will also show that your skills are recognized and valued by some companies just by passing the internship tests.<br>\nYou don’t need to find a top tech company and try to do internship there for 1 or 2 days and quit. It can be anywhere <strong>authorized</strong> in CS. What you need is the commitment to that internship maybe 1 to 6 months, showing that you have developed quality skills and helped created some cool products.</p>\n<h2>Interview</h2>\n<p>This is actually the part that I am most confident in my application profile. Some schools have optional interviews other have required ones. However, if you have the chance to be in an interview and you are <strong>confident</strong> with your speaking ability, you should definitely take it. It is really beneficial and <strong>advantageous</strong> for students interviewing since the adcom gets to see us both in words (your application profile) and in <strong>real-life</strong> (by talking to you). So here are a few tips for interviewing for universities (these are the things that I have applied to my interview):</p>\n<ul>\n<li>You need to make and remember (if you can) a <strong>list</strong>of your main attributes, characteristics, activities, honors that you want them to know. They are not going to ask you all the questions you wanted so you need to <strong>incorporate</strong> these attributes while you are answer and you should miss none.</li>\n<li>Once you have received an <strong>email</strong> of your interview, you should already have the interviewer name, contacts, specialization, current jobs and interested areas. You can use this information to <strong>search out</strong> their profiles online on pages like LinkedIn, Facebook, Twitter, … and see what are they interested in. Note down a few key points and try to <strong>connect</strong> some of these things to your conversation</li>\n<li>Sometimes, the interviewer might not have your resume so you can expect them to ask both <strong>specialized</strong> questions related to your profile and <strong>general</strong> questions. For example, since my interviewer was also major in computer science and she was also a science enthusiast, I got a lot of technical questions relating to some of the coding products that I created and detailed question concerning my research project.</li>\n<li>Don’t put too much pressure on yourself and just <strong>relax</strong> and consider it as a <strong>normal</strong> conversation. Both you and the interviewer would be much more satisfied if 2 people are just like chatting.</li>\n<li>You want to specifically and clearly mention your intended major and your <strong>goals</strong> in your years in college and after that if possible.</li>\n<li>Prepare some questions to <strong>ask</strong> the interviewer at the end. This makes the interview 2-sided and more like a <strong>normal</strong> conversation (back and forth talking) Questions such as what is the life there, or what unique experiences I can have show that you actually care about the school and the surrounding environments.</li>\n<li>Lastly, carefully setting up your backgrounds. Remember all those days that you were playing online games and got disconnected. Well make sure that doesn’t happen. Get yourself the top speed 3g, 4g or 5g, … or whatever internet you can find that is <strong>stable</strong>. And leave your phone out of your interviewing room since you don’t want any interruptions.</li>\n</ul>\n<h2>Maintain your spirit</h2>\n<p>In the stressful time, especially during the intensive time of an application season, everyone will at some time feel so tired, so taken down, so strained out. But it is important to <strong>surround</strong> yourself with the people that always support you and maintain a good poise and temper. Sometimes, you just gotta rest and spend some time <strong>relaxing</strong> yourself maybe going out, enjoying movies, … Don’t care too much about other people’s profiles but stay focused on <strong>finishing yours</strong>.</p>\n<p>I was so lucky that I was always accompanied and supported by my family, my mother, my father and my brother. Thanks to all people that have been with me during last intensive year. There are many good friends that I have in my group at my class that always support me and we usually hang out for lunch after school to relieve the tension. There is my squad that always give each other compliments even if we were competing against each other. There is my girlfriend and my “catalyst” who cheered me up and always assured me in the most intense time during the application season which is the October and November just before I submitted my documents. Without these people, I would have never achieved what I have done today.</p>\n<h2>ENDING</h2>\n<p>So as I have said in the beginning, there are no magical formulas that can assure you a spot in a US University but there are always quantitative things during the application process that might help you get an edge. One thing I believe in is that</p>\n<blockquote>\n<p>Even though the application process somewhat depends on luck, you can dramatically increase your luck by constantly working harder.</p>\n</blockquote>\n<p>I hope that this post has given you some insight of the application process of US University in general and of CS students in specific. If you find this post helpful, please share it and follow <a href=\"https://decodecraft.com/\">my blog</a> (this website) for more cool and informative posts !!</p>\n"},{"title":"RiceCS","catalog":true,"subtitle":null,"header-img":null,"_content":"","source":"_drafts/RiceCS.md","raw":"---\ntitle: RiceCS\ncatalog: true\nsubtitle:\nheader-img:\ntags:\n---\n","slug":"RiceCS","published":0,"date":"2021-06-15T18:07:50.000Z","updated":"2021-06-15T18:07:50.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq5zemtb000fc6sbeuk0zm8p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"My Projects","catalog":true,"date":"2021-06-21T12:21:45.000Z","subtitle":"15 min read","header-img":"software_shutterstock_1290773869.jpg","readtime":null,"_content":"\n## In this post, I am going to summarize all the projects that I have done in the past. I will keep updating this. \n\n### 1. Dashboard: Track your training - Mobile Application \n- **When**: May 2021 - now\n- **Where**: **Dashboard: Track your training** is available on App Store and Google Play Store. **Go download it** !\n- **Additional Information**: check out this [Post](https://decodecraft.com/Dashboard-App/)\n- **What is this project**: DASH across your favorite route, pin the location of new eateries, and share your favorite running selfies on the BOARD! Taking inspiration from this simple wordplay, DASHBOARD emerges: a free sports management app with a friendly UI design that accurately records your training routes while helping you pin locations at ease and share your achievements with the DASHBOARD network. Whether you are training as part of a routine or practicing for a race, this all-in-one app is the perfect platform for tracking journeys and connecting with others.\n\n{% asset_img 3.record.png %}\n\n- **Where is it**: It is now available on both App Store and Google Play Store. You guys can check it out [here](\"https://linktr.ee/quangnguyen14\")\n\n### 2. Messaging Platform \n- **When**: Dec 2020\n- **Where**: https://todoapp-aaff8.web.app.\n- **Additional Information**: check out this [Post](https://decodecraft.com/MessengerClone/)\n- **What is this project**: This is a real-time messaging platform based on the functions of Facebook Messenger (or a Messenger Clone). You can make friend requests and chat with each other right on the web. You can also change avatars, create group conversations, upload images.\n\n{% asset_img messenger.png %}\n\n- **Where is it**: You can look at the source code of the project here [Github](\"https://github.com/QuangNg14/Messenger-Clone-New\")\n\n### 3. Link - Rice Datathon \n- **When**: Feb 2021\n- **Where**: 3rd Rice Datathon 2021.\n- **Additional Information**: check out this [Post](https://devpost.com/software/link-ot1d9k?ref_content=contribution-prompt&ref_feature=engagement&ref_medium=email&utm_campaign=contribution-prompt&utm_content=contribution_reminder&utm_medium=email&utm_source=transactional#app-team)\n- **Teammates**: Marc Shen, Christine Lee, Thomas Yeum\n- **What is this project**: Given the wealth of transaction data provided by Bill.com, we sought to identify vendor-to-vendor, agency-to-agency, and agency-to-vendor relationships that could be used to identify similar agencies and vendors. Specifically, our goal was to identify a quantitative method of measuring similarity among vendors and agencies in order to make custom-tailored recommendations.\n\n{% asset_img link.png %}\n\n- **Where is it**: We eventually won **First** Place in the Bill.com Track and received really cool prizes from the company. You guys can check out the [Github](\"https://github.com/QuangNg14/Datathon\")\n\n\n### 4. Riceapps - NextStep - realtime SMS-textbot\n- **When**: Aug 2020 - Now\n- **Where**: Rice PDI (Patient Discharge Initiative) Riceapps - A computer science club in Rice University that build digital solutions such as applications and softwares.\n- **Additional Information**: check out this [post](https://medium.com/riceapps/riceapps-2020-2021-projects-a9b705391790)\n- **Teammates**: Shreya Nidadavolu, Quang Nguyen, Ryan Draper, Peter Jia, Willie Yao, Namita Davey, Graham Curtis, Janet Lu, Zhihan Lu\n- **What is this project**: A collaboration with PDI to build an SMS-based chatbot to help patients discharged from hospitals, providing them with help and relevant resources. We expect 10,000 users in Harris County once launched. During the Covid19 pandemic, our team is trying to create a product that helps the hospitals in ways we can.\n\n{% asset_img riceapps.PNG %}\n\n- **Where is it**: Right now, our product is being used by Texas Children Hospital serving more than 5000 users.\n\n\n### 5. Doctorally - Healthcare Worker supporting platform \n- **When**: Apr 2020\n- **Where**: For the Vietnam Angel Hackcovy Hackathon \n- **Teammates**: Hoang Lam, Hong Minh, Tuan Hoang, Hoang Minh\n- **What is this project**: To know more about Doctorally, you can check this post [here](https://devpost.com/software/doctorally). I also explained how to create Doctorally platform in this [post](https://decodecraft.com/Doctorally/)\n During the Covid19 pandemic, now more than ever, it's important for health systems, health care organizations and volunteers to create and ensure an infrastructure and resources to support physicians, nurses, and care team members.\n\n{% asset_img doctorally.PNG %}\n\n- **Where is it**: https://doctorally-test.herokuapp.com/\n- **Where is the code**: https://github.com/MRSNOO/doctorally-test-deploy\n- **What we won**: Qualified as finalists. Top 17 over 70 teams. Top 3 best medical track team\n\n### 6. ChatApp - Socketio\n- **When**: Oct 2020\n- **Where**: It is just a personal project I did. I usually do personal projects to sharpen my skills.\n- **Teammates**: I learnt how to do it from the documentation and tutorials online\n- **What is this project**: It is a chat app similar to Messenger (of course it is no where near Messenger). It has basic functions of creating rooms. People in the same room can chat with each other.\n\n{% asset_img chatapp.PNG %}\n\n- **Where is it**: https://chat-app-socketio-test.herokuapp.com/\n- **Where is the code**: https://github.com/MRSNOO/chat-app-socketio\n\n### 7. CLEEN Website\n- **When**: Jul 2018\n- **Where**: For CLEEN Organization \n- **Teammates**: I create everything from scratch. **This is the first project I have ever created**\n- **What is this project**: Cleen Project is a project that raises funds to install water filters in villages through selling environmentally friendly bags. I am the cofounder of Cleen and I am the president of the project in 2019. I developed CLEEN Website using Python flask and JavaScript; update site continuously with latest environmental news. I also created an admin page to manage the posts and news. I also use my website as a way to promote my organization, spread the influence and call for sponsorship.\n\n{% asset_img cleen.png %}\n\n- **Where is it**: http://cleen.herokuapp.com/\n- **Where is the code**: https://github.com/MRSNOO/CleenWeb \n\n### 8. FUSION - Online Learning Platform\n- **When**: Oct 2018 - Dec 2018\n- **Where**: For Conrad Spirit of Innovation Challenge  \n- **Teammates**: Hoang Lam, Tuan Hoang\n- **What is this project**: When we were doing the Conrad Challenge in the Education Challenge, we came up with the idea of making a competitive online learning platform. In this platform, we prepared tests of all type of subjects such as Mathematics, English, Chemistry and Physics with the help of our teachers in class. We also have a elo-based ranking system to give student motivation. \n\n{% asset_img fusion.PNG %}\n\n- **Where is the code**: https://github.com/MRSNOO/Fusion-Updated\n\n\n### 9. Movies Hub - for Marvel fans\n- **When**: May 2019\n- **Where**: I love watching movies so I created a project so that everyone can get in and enjoy movies \n- **Teammates**: I create everything from scratch again \n- **What is this project**: As a long Marvel fan, I always love to have a website to watch free Movies whenever I like. So I created this movie hub for my friends to get in and enjoy the movies together.\n\n{% asset_img movie.png %}\n\n- **Where is it**: https://movies-view.firebaseapp.com/\n- **Where is the code**: https://github.com/MRSNOO/CI-Final-Project-FilmWeb \n- **What I won**: first place in the Mindx Hackathon\n\n### 10. Face Detection Tool\n- **When**: Aug 2019\n- **Where**: For the Mathematics and Science Summer Program (MaSSP) \n- **Teammates**: Anh Thu, Quang Huy\n- **What is this project**: In the summer program, our team tried to create an artificial intelligence product of facial detection and recognition. We synthesized the model github repositories found online to code the face detection function, using Python and Google collaboration. We also took pictures of all mentors and mentees in the camp to collect data for our model. Below is a picture of our group's mentor after testing the model.\n\n{% asset_img frame7.png %}\n\n- **Where is the code**: https://github.com/MRSNOO/Final-Project-MaSSP\n###\n\n### 11. Birthday Gift for my girlfriend\n- **When**: Feb 9, 2020\n- **Where**: My girlfriend Minh Anh 18th birthday\n- **What is this project**: I wanted to give something special to my girlfriend to express my love. She loved this website. \n\n{% asset_img minhanh.png %}\n\n\n## This is the end, for now. I will updating new things. I hoped you understand some projects that I did and find it interesting.\n\n\n\n\n\n\n","source":"_posts/MyProject.md","raw":"---\ntitle: My Projects\ncatalog: true\ndate: 2021-06-21 19:21:45\nsubtitle: 15 min read\nheader-img: \"software_shutterstock_1290773869.jpg\"\ntags: [all projects, reactjs, javascript, python, php]\nreadtime:\n---\n\n## In this post, I am going to summarize all the projects that I have done in the past. I will keep updating this. \n\n### 1. Dashboard: Track your training - Mobile Application \n- **When**: May 2021 - now\n- **Where**: **Dashboard: Track your training** is available on App Store and Google Play Store. **Go download it** !\n- **Additional Information**: check out this [Post](https://decodecraft.com/Dashboard-App/)\n- **What is this project**: DASH across your favorite route, pin the location of new eateries, and share your favorite running selfies on the BOARD! Taking inspiration from this simple wordplay, DASHBOARD emerges: a free sports management app with a friendly UI design that accurately records your training routes while helping you pin locations at ease and share your achievements with the DASHBOARD network. Whether you are training as part of a routine or practicing for a race, this all-in-one app is the perfect platform for tracking journeys and connecting with others.\n\n{% asset_img 3.record.png %}\n\n- **Where is it**: It is now available on both App Store and Google Play Store. You guys can check it out [here](\"https://linktr.ee/quangnguyen14\")\n\n### 2. Messaging Platform \n- **When**: Dec 2020\n- **Where**: https://todoapp-aaff8.web.app.\n- **Additional Information**: check out this [Post](https://decodecraft.com/MessengerClone/)\n- **What is this project**: This is a real-time messaging platform based on the functions of Facebook Messenger (or a Messenger Clone). You can make friend requests and chat with each other right on the web. You can also change avatars, create group conversations, upload images.\n\n{% asset_img messenger.png %}\n\n- **Where is it**: You can look at the source code of the project here [Github](\"https://github.com/QuangNg14/Messenger-Clone-New\")\n\n### 3. Link - Rice Datathon \n- **When**: Feb 2021\n- **Where**: 3rd Rice Datathon 2021.\n- **Additional Information**: check out this [Post](https://devpost.com/software/link-ot1d9k?ref_content=contribution-prompt&ref_feature=engagement&ref_medium=email&utm_campaign=contribution-prompt&utm_content=contribution_reminder&utm_medium=email&utm_source=transactional#app-team)\n- **Teammates**: Marc Shen, Christine Lee, Thomas Yeum\n- **What is this project**: Given the wealth of transaction data provided by Bill.com, we sought to identify vendor-to-vendor, agency-to-agency, and agency-to-vendor relationships that could be used to identify similar agencies and vendors. Specifically, our goal was to identify a quantitative method of measuring similarity among vendors and agencies in order to make custom-tailored recommendations.\n\n{% asset_img link.png %}\n\n- **Where is it**: We eventually won **First** Place in the Bill.com Track and received really cool prizes from the company. You guys can check out the [Github](\"https://github.com/QuangNg14/Datathon\")\n\n\n### 4. Riceapps - NextStep - realtime SMS-textbot\n- **When**: Aug 2020 - Now\n- **Where**: Rice PDI (Patient Discharge Initiative) Riceapps - A computer science club in Rice University that build digital solutions such as applications and softwares.\n- **Additional Information**: check out this [post](https://medium.com/riceapps/riceapps-2020-2021-projects-a9b705391790)\n- **Teammates**: Shreya Nidadavolu, Quang Nguyen, Ryan Draper, Peter Jia, Willie Yao, Namita Davey, Graham Curtis, Janet Lu, Zhihan Lu\n- **What is this project**: A collaboration with PDI to build an SMS-based chatbot to help patients discharged from hospitals, providing them with help and relevant resources. We expect 10,000 users in Harris County once launched. During the Covid19 pandemic, our team is trying to create a product that helps the hospitals in ways we can.\n\n{% asset_img riceapps.PNG %}\n\n- **Where is it**: Right now, our product is being used by Texas Children Hospital serving more than 5000 users.\n\n\n### 5. Doctorally - Healthcare Worker supporting platform \n- **When**: Apr 2020\n- **Where**: For the Vietnam Angel Hackcovy Hackathon \n- **Teammates**: Hoang Lam, Hong Minh, Tuan Hoang, Hoang Minh\n- **What is this project**: To know more about Doctorally, you can check this post [here](https://devpost.com/software/doctorally). I also explained how to create Doctorally platform in this [post](https://decodecraft.com/Doctorally/)\n During the Covid19 pandemic, now more than ever, it's important for health systems, health care organizations and volunteers to create and ensure an infrastructure and resources to support physicians, nurses, and care team members.\n\n{% asset_img doctorally.PNG %}\n\n- **Where is it**: https://doctorally-test.herokuapp.com/\n- **Where is the code**: https://github.com/MRSNOO/doctorally-test-deploy\n- **What we won**: Qualified as finalists. Top 17 over 70 teams. Top 3 best medical track team\n\n### 6. ChatApp - Socketio\n- **When**: Oct 2020\n- **Where**: It is just a personal project I did. I usually do personal projects to sharpen my skills.\n- **Teammates**: I learnt how to do it from the documentation and tutorials online\n- **What is this project**: It is a chat app similar to Messenger (of course it is no where near Messenger). It has basic functions of creating rooms. People in the same room can chat with each other.\n\n{% asset_img chatapp.PNG %}\n\n- **Where is it**: https://chat-app-socketio-test.herokuapp.com/\n- **Where is the code**: https://github.com/MRSNOO/chat-app-socketio\n\n### 7. CLEEN Website\n- **When**: Jul 2018\n- **Where**: For CLEEN Organization \n- **Teammates**: I create everything from scratch. **This is the first project I have ever created**\n- **What is this project**: Cleen Project is a project that raises funds to install water filters in villages through selling environmentally friendly bags. I am the cofounder of Cleen and I am the president of the project in 2019. I developed CLEEN Website using Python flask and JavaScript; update site continuously with latest environmental news. I also created an admin page to manage the posts and news. I also use my website as a way to promote my organization, spread the influence and call for sponsorship.\n\n{% asset_img cleen.png %}\n\n- **Where is it**: http://cleen.herokuapp.com/\n- **Where is the code**: https://github.com/MRSNOO/CleenWeb \n\n### 8. FUSION - Online Learning Platform\n- **When**: Oct 2018 - Dec 2018\n- **Where**: For Conrad Spirit of Innovation Challenge  \n- **Teammates**: Hoang Lam, Tuan Hoang\n- **What is this project**: When we were doing the Conrad Challenge in the Education Challenge, we came up with the idea of making a competitive online learning platform. In this platform, we prepared tests of all type of subjects such as Mathematics, English, Chemistry and Physics with the help of our teachers in class. We also have a elo-based ranking system to give student motivation. \n\n{% asset_img fusion.PNG %}\n\n- **Where is the code**: https://github.com/MRSNOO/Fusion-Updated\n\n\n### 9. Movies Hub - for Marvel fans\n- **When**: May 2019\n- **Where**: I love watching movies so I created a project so that everyone can get in and enjoy movies \n- **Teammates**: I create everything from scratch again \n- **What is this project**: As a long Marvel fan, I always love to have a website to watch free Movies whenever I like. So I created this movie hub for my friends to get in and enjoy the movies together.\n\n{% asset_img movie.png %}\n\n- **Where is it**: https://movies-view.firebaseapp.com/\n- **Where is the code**: https://github.com/MRSNOO/CI-Final-Project-FilmWeb \n- **What I won**: first place in the Mindx Hackathon\n\n### 10. Face Detection Tool\n- **When**: Aug 2019\n- **Where**: For the Mathematics and Science Summer Program (MaSSP) \n- **Teammates**: Anh Thu, Quang Huy\n- **What is this project**: In the summer program, our team tried to create an artificial intelligence product of facial detection and recognition. We synthesized the model github repositories found online to code the face detection function, using Python and Google collaboration. We also took pictures of all mentors and mentees in the camp to collect data for our model. Below is a picture of our group's mentor after testing the model.\n\n{% asset_img frame7.png %}\n\n- **Where is the code**: https://github.com/MRSNOO/Final-Project-MaSSP\n###\n\n### 11. Birthday Gift for my girlfriend\n- **When**: Feb 9, 2020\n- **Where**: My girlfriend Minh Anh 18th birthday\n- **What is this project**: I wanted to give something special to my girlfriend to express my love. She loved this website. \n\n{% asset_img minhanh.png %}\n\n\n## This is the end, for now. I will updating new things. I hoped you understand some projects that I did and find it interesting.\n\n\n\n\n\n\n","slug":"MyProject","published":1,"updated":"2021-06-21T13:55:51.359Z","_id":"ckq5zemtd000hc6sbjxzfcxwu","comments":1,"layout":"post","photos":[],"link":"","content":"<h2><span id=\"in-this-post-i-am-going-to-summarize-all-the-projects-that-i-have-done-in-the-past-i-will-keep-updating-this\">In this post, I am going to summarize all the projects that I have done in the past. I will keep updating this.</span></h2>\n<h3><span id=\"1-dashboard-track-your-training-mobile-application\">1. Dashboard: Track your training - Mobile Application</span></h3>\n<ul>\n<li><strong>When</strong>: May 2021 - now</li>\n<li><strong>Where</strong>: <strong>Dashboard: Track your training</strong> is available on App Store and Google Play Store. <strong>Go download it</strong> !</li>\n<li><strong>Additional Information</strong>: check out this <a href=\"https://decodecraft.com/Dashboard-App/\">Post</a></li>\n<li><strong>What is this project</strong>: DASH across your favorite route, pin the location of new eateries, and share your favorite running selfies on the BOARD! Taking inspiration from this simple wordplay, DASHBOARD emerges: a free sports management app with a friendly UI design that accurately records your training routes while helping you pin locations at ease and share your achievements with the DASHBOARD network. Whether you are training as part of a routine or practicing for a race, this all-in-one app is the perfect platform for tracking journeys and connecting with others.</li>\n</ul>\n<img src=\"/MyProject/3.record.png\">\n<ul>\n<li><strong>Where is it</strong>: It is now available on both App Store and Google Play Store. You guys can check it out <a href=\"%22https://linktr.ee/quangnguyen14%22\">here</a></li>\n</ul>\n<h3><span id=\"2-messaging-platform\">2. Messaging Platform</span></h3>\n<ul>\n<li><strong>When</strong>: Dec 2020</li>\n<li><strong>Where</strong>: <a href=\"https://todoapp-aaff8.web.app\" target=\"_blank\" rel=\"noopener\">https://todoapp-aaff8.web.app</a>.</li>\n<li><strong>Additional Information</strong>: check out this <a href=\"https://decodecraft.com/MessengerClone/\">Post</a></li>\n<li><strong>What is this project</strong>: This is a real-time messaging platform based on the functions of Facebook Messenger (or a Messenger Clone). You can make friend requests and chat with each other right on the web. You can also change avatars, create group conversations, upload images.</li>\n</ul>\n<img src=\"/MyProject/messenger.png\">\n<ul>\n<li><strong>Where is it</strong>: You can look at the source code of the project here <a href=\"%22https://github.com/QuangNg14/Messenger-Clone-New%22\">Github</a></li>\n</ul>\n<h3><span id=\"3-link-rice-datathon\">3. Link - Rice Datathon</span></h3>\n<ul>\n<li><strong>When</strong>: Feb 2021</li>\n<li><strong>Where</strong>: 3rd Rice Datathon 2021.</li>\n<li><strong>Additional Information</strong>: check out this <a href=\"https://devpost.com/software/link-ot1d9k?ref_content=contribution-prompt&amp;ref_feature=engagement&amp;ref_medium=email&amp;utm_campaign=contribution-prompt&amp;utm_content=contribution_reminder&amp;utm_medium=email&amp;utm_source=transactional#app-team\" target=\"_blank\" rel=\"noopener\">Post</a></li>\n<li><strong>Teammates</strong>: Marc Shen, Christine Lee, Thomas Yeum</li>\n<li><strong>What is this project</strong>: Given the wealth of transaction data provided by <a href=\"http://Bill.com\" target=\"_blank\" rel=\"noopener\">Bill.com</a>, we sought to identify vendor-to-vendor, agency-to-agency, and agency-to-vendor relationships that could be used to identify similar agencies and vendors. Specifically, our goal was to identify a quantitative method of measuring similarity among vendors and agencies in order to make custom-tailored recommendations.</li>\n</ul>\n<img src=\"/MyProject/link.png\">\n<ul>\n<li><strong>Where is it</strong>: We eventually won <strong>First</strong> Place in the <a href=\"http://Bill.com\" target=\"_blank\" rel=\"noopener\">Bill.com</a> Track and received really cool prizes from the company. You guys can check out the <a href=\"%22https://github.com/QuangNg14/Datathon%22\">Github</a></li>\n</ul>\n<h3><span id=\"4-riceapps-nextstep-realtime-sms-textbot\">4. Riceapps - NextStep - realtime SMS-textbot</span></h3>\n<ul>\n<li><strong>When</strong>: Aug 2020 - Now</li>\n<li><strong>Where</strong>: Rice PDI (Patient Discharge Initiative) Riceapps - A computer science club in Rice University that build digital solutions such as applications and softwares.</li>\n<li><strong>Additional Information</strong>: check out this <a href=\"https://medium.com/riceapps/riceapps-2020-2021-projects-a9b705391790\" target=\"_blank\" rel=\"noopener\">post</a></li>\n<li><strong>Teammates</strong>: Shreya Nidadavolu, Quang Nguyen, Ryan Draper, Peter Jia, Willie Yao, Namita Davey, Graham Curtis, Janet Lu, Zhihan Lu</li>\n<li><strong>What is this project</strong>: A collaboration with PDI to build an SMS-based chatbot to help patients discharged from hospitals, providing them with help and relevant resources. We expect 10,000 users in Harris County once launched. During the Covid19 pandemic, our team is trying to create a product that helps the hospitals in ways we can.</li>\n</ul>\n<img src=\"/MyProject/riceapps.PNG\">\n<ul>\n<li><strong>Where is it</strong>: Right now, our product is being used by Texas Children Hospital serving more than 5000 users.</li>\n</ul>\n<h3><span id=\"5-doctorally-healthcare-worker-supporting-platform\">5. Doctorally - Healthcare Worker supporting platform</span></h3>\n<ul>\n<li><strong>When</strong>: Apr 2020</li>\n<li><strong>Where</strong>: For the Vietnam Angel Hackcovy Hackathon</li>\n<li><strong>Teammates</strong>: Hoang Lam, Hong Minh, Tuan Hoang, Hoang Minh</li>\n<li><strong>What is this project</strong>: To know more about Doctorally, you can check this post <a href=\"https://devpost.com/software/doctorally\" target=\"_blank\" rel=\"noopener\">here</a>. I also explained how to create Doctorally platform in this <a href=\"https://decodecraft.com/Doctorally/\">post</a><br>\nDuring the Covid19 pandemic, now more than ever, it’s important for health systems, health care organizations and volunteers to create and ensure an infrastructure and resources to support physicians, nurses, and care team members.</li>\n</ul>\n<img src=\"/MyProject/doctorally.PNG\">\n<ul>\n<li><strong>Where is it</strong>: <a href=\"https://doctorally-test.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">https://doctorally-test.herokuapp.com/</a></li>\n<li><strong>Where is the code</strong>: <a href=\"https://github.com/MRSNOO/doctorally-test-deploy\" target=\"_blank\" rel=\"noopener\">https://github.com/MRSNOO/doctorally-test-deploy</a></li>\n<li><strong>What we won</strong>: Qualified as finalists. Top 17 over 70 teams. Top 3 best medical track team</li>\n</ul>\n<h3><span id=\"6-chatapp-socketio\">6. ChatApp - Socketio</span></h3>\n<ul>\n<li><strong>When</strong>: Oct 2020</li>\n<li><strong>Where</strong>: It is just a personal project I did. I usually do personal projects to sharpen my skills.</li>\n<li><strong>Teammates</strong>: I learnt how to do it from the documentation and tutorials online</li>\n<li><strong>What is this project</strong>: It is a chat app similar to Messenger (of course it is no where near Messenger). It has basic functions of creating rooms. People in the same room can chat with each other.</li>\n</ul>\n<img src=\"/MyProject/chatapp.PNG\">\n<ul>\n<li><strong>Where is it</strong>: <a href=\"https://chat-app-socketio-test.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">https://chat-app-socketio-test.herokuapp.com/</a></li>\n<li><strong>Where is the code</strong>: <a href=\"https://github.com/MRSNOO/chat-app-socketio\" target=\"_blank\" rel=\"noopener\">https://github.com/MRSNOO/chat-app-socketio</a></li>\n</ul>\n<h3><span id=\"7-cleen-website\">7. CLEEN Website</span></h3>\n<ul>\n<li><strong>When</strong>: Jul 2018</li>\n<li><strong>Where</strong>: For CLEEN Organization</li>\n<li><strong>Teammates</strong>: I create everything from scratch. <strong>This is the first project I have ever created</strong></li>\n<li><strong>What is this project</strong>: Cleen Project is a project that raises funds to install water filters in villages through selling environmentally friendly bags. I am the cofounder of Cleen and I am the president of the project in 2019. I developed CLEEN Website using Python flask and JavaScript; update site continuously with latest environmental news. I also created an admin page to manage the posts and news. I also use my website as a way to promote my organization, spread the influence and call for sponsorship.</li>\n</ul>\n<img src=\"/MyProject/cleen.png\">\n<ul>\n<li><strong>Where is it</strong>: <a href=\"http://cleen.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">http://cleen.herokuapp.com/</a></li>\n<li><strong>Where is the code</strong>: <a href=\"https://github.com/MRSNOO/CleenWeb\" target=\"_blank\" rel=\"noopener\">https://github.com/MRSNOO/CleenWeb</a></li>\n</ul>\n<h3><span id=\"8-fusion-online-learning-platform\">8. FUSION - Online Learning Platform</span></h3>\n<ul>\n<li><strong>When</strong>: Oct 2018 - Dec 2018</li>\n<li><strong>Where</strong>: For Conrad Spirit of Innovation Challenge</li>\n<li><strong>Teammates</strong>: Hoang Lam, Tuan Hoang</li>\n<li><strong>What is this project</strong>: When we were doing the Conrad Challenge in the Education Challenge, we came up with the idea of making a competitive online learning platform. In this platform, we prepared tests of all type of subjects such as Mathematics, English, Chemistry and Physics with the help of our teachers in class. We also have a elo-based ranking system to give student motivation.</li>\n</ul>\n<img src=\"/MyProject/fusion.PNG\">\n<ul>\n<li><strong>Where is the code</strong>: <a href=\"https://github.com/MRSNOO/Fusion-Updated\" target=\"_blank\" rel=\"noopener\">https://github.com/MRSNOO/Fusion-Updated</a></li>\n</ul>\n<h3><span id=\"9-movies-hub-for-marvel-fans\">9. Movies Hub - for Marvel fans</span></h3>\n<ul>\n<li><strong>When</strong>: May 2019</li>\n<li><strong>Where</strong>: I love watching movies so I created a project so that everyone can get in and enjoy movies</li>\n<li><strong>Teammates</strong>: I create everything from scratch again</li>\n<li><strong>What is this project</strong>: As a long Marvel fan, I always love to have a website to watch free Movies whenever I like. So I created this movie hub for my friends to get in and enjoy the movies together.</li>\n</ul>\n<img src=\"/MyProject/movie.png\">\n<ul>\n<li><strong>Where is it</strong>: <a href=\"https://movies-view.firebaseapp.com/\" target=\"_blank\" rel=\"noopener\">https://movies-view.firebaseapp.com/</a></li>\n<li><strong>Where is the code</strong>: <a href=\"https://github.com/MRSNOO/CI-Final-Project-FilmWeb\" target=\"_blank\" rel=\"noopener\">https://github.com/MRSNOO/CI-Final-Project-FilmWeb</a></li>\n<li><strong>What I won</strong>: first place in the Mindx Hackathon</li>\n</ul>\n<h3><span id=\"10-face-detection-tool\">10. Face Detection Tool</span></h3>\n<ul>\n<li><strong>When</strong>: Aug 2019</li>\n<li><strong>Where</strong>: For the Mathematics and Science Summer Program (MaSSP)</li>\n<li><strong>Teammates</strong>: Anh Thu, Quang Huy</li>\n<li><strong>What is this project</strong>: In the summer program, our team tried to create an artificial intelligence product of facial detection and recognition. We synthesized the model github repositories found online to code the face detection function, using Python and Google collaboration. We also took pictures of all mentors and mentees in the camp to collect data for our model. Below is a picture of our group’s mentor after testing the model.</li>\n</ul>\n<img src=\"/MyProject/frame7.png\">\n<ul>\n<li><strong>Where is the code</strong>: <a href=\"https://github.com/MRSNOO/Final-Project-MaSSP\" target=\"_blank\" rel=\"noopener\">https://github.com/MRSNOO/Final-Project-MaSSP</a></li>\n</ul>\n<h3><span id></span></h3>\n<h3><span id=\"11-birthday-gift-for-my-girlfriend\">11. Birthday Gift for my girlfriend</span></h3>\n<ul>\n<li><strong>When</strong>: Feb 9, 2020</li>\n<li><strong>Where</strong>: My girlfriend Minh Anh 18th birthday</li>\n<li><strong>What is this project</strong>: I wanted to give something special to my girlfriend to express my love. She loved this website.</li>\n</ul>\n<img src=\"/MyProject/minhanh.png\">\n<h2><span id=\"this-is-the-end-for-now-i-will-updating-new-things-i-hoped-you-understand-some-projects-that-i-did-and-find-it-interesting\">This is the end, for now. I will updating new things. I hoped you understand some projects that I did and find it interesting.</span></h2>\n","site":{"data":{}},"excerpt":"","more":"<h2>In this post, I am going to summarize all the projects that I have done in the past. I will keep updating this.</h2>\n<h3>1. Dashboard: Track your training - Mobile Application</h3>\n<ul>\n<li><strong>When</strong>: May 2021 - now</li>\n<li><strong>Where</strong>: <strong>Dashboard: Track your training</strong> is available on App Store and Google Play Store. <strong>Go download it</strong> !</li>\n<li><strong>Additional Information</strong>: check out this <a href=\"https://decodecraft.com/Dashboard-App/\">Post</a></li>\n<li><strong>What is this project</strong>: DASH across your favorite route, pin the location of new eateries, and share your favorite running selfies on the BOARD! Taking inspiration from this simple wordplay, DASHBOARD emerges: a free sports management app with a friendly UI design that accurately records your training routes while helping you pin locations at ease and share your achievements with the DASHBOARD network. Whether you are training as part of a routine or practicing for a race, this all-in-one app is the perfect platform for tracking journeys and connecting with others.</li>\n</ul>\n<img src=\"/MyProject/3.record.png\">\n<ul>\n<li><strong>Where is it</strong>: It is now available on both App Store and Google Play Store. You guys can check it out <a href=\"%22https://linktr.ee/quangnguyen14%22\">here</a></li>\n</ul>\n<h3>2. Messaging Platform</h3>\n<ul>\n<li><strong>When</strong>: Dec 2020</li>\n<li><strong>Where</strong>: <a href=\"https://todoapp-aaff8.web.app\" target=\"_blank\" rel=\"noopener\">https://todoapp-aaff8.web.app</a>.</li>\n<li><strong>Additional Information</strong>: check out this <a href=\"https://decodecraft.com/MessengerClone/\">Post</a></li>\n<li><strong>What is this project</strong>: This is a real-time messaging platform based on the functions of Facebook Messenger (or a Messenger Clone). You can make friend requests and chat with each other right on the web. You can also change avatars, create group conversations, upload images.</li>\n</ul>\n<img src=\"/MyProject/messenger.png\">\n<ul>\n<li><strong>Where is it</strong>: You can look at the source code of the project here <a href=\"%22https://github.com/QuangNg14/Messenger-Clone-New%22\">Github</a></li>\n</ul>\n<h3>3. Link - Rice Datathon</h3>\n<ul>\n<li><strong>When</strong>: Feb 2021</li>\n<li><strong>Where</strong>: 3rd Rice Datathon 2021.</li>\n<li><strong>Additional Information</strong>: check out this <a href=\"https://devpost.com/software/link-ot1d9k?ref_content=contribution-prompt&amp;ref_feature=engagement&amp;ref_medium=email&amp;utm_campaign=contribution-prompt&amp;utm_content=contribution_reminder&amp;utm_medium=email&amp;utm_source=transactional#app-team\" target=\"_blank\" rel=\"noopener\">Post</a></li>\n<li><strong>Teammates</strong>: Marc Shen, Christine Lee, Thomas Yeum</li>\n<li><strong>What is this project</strong>: Given the wealth of transaction data provided by <a href=\"http://Bill.com\" target=\"_blank\" rel=\"noopener\">Bill.com</a>, we sought to identify vendor-to-vendor, agency-to-agency, and agency-to-vendor relationships that could be used to identify similar agencies and vendors. Specifically, our goal was to identify a quantitative method of measuring similarity among vendors and agencies in order to make custom-tailored recommendations.</li>\n</ul>\n<img src=\"/MyProject/link.png\">\n<ul>\n<li><strong>Where is it</strong>: We eventually won <strong>First</strong> Place in the <a href=\"http://Bill.com\" target=\"_blank\" rel=\"noopener\">Bill.com</a> Track and received really cool prizes from the company. You guys can check out the <a href=\"%22https://github.com/QuangNg14/Datathon%22\">Github</a></li>\n</ul>\n<h3>4. Riceapps - NextStep - realtime SMS-textbot</h3>\n<ul>\n<li><strong>When</strong>: Aug 2020 - Now</li>\n<li><strong>Where</strong>: Rice PDI (Patient Discharge Initiative) Riceapps - A computer science club in Rice University that build digital solutions such as applications and softwares.</li>\n<li><strong>Additional Information</strong>: check out this <a href=\"https://medium.com/riceapps/riceapps-2020-2021-projects-a9b705391790\" target=\"_blank\" rel=\"noopener\">post</a></li>\n<li><strong>Teammates</strong>: Shreya Nidadavolu, Quang Nguyen, Ryan Draper, Peter Jia, Willie Yao, Namita Davey, Graham Curtis, Janet Lu, Zhihan Lu</li>\n<li><strong>What is this project</strong>: A collaboration with PDI to build an SMS-based chatbot to help patients discharged from hospitals, providing them with help and relevant resources. We expect 10,000 users in Harris County once launched. During the Covid19 pandemic, our team is trying to create a product that helps the hospitals in ways we can.</li>\n</ul>\n<img src=\"/MyProject/riceapps.PNG\">\n<ul>\n<li><strong>Where is it</strong>: Right now, our product is being used by Texas Children Hospital serving more than 5000 users.</li>\n</ul>\n<h3>5. Doctorally - Healthcare Worker supporting platform</h3>\n<ul>\n<li><strong>When</strong>: Apr 2020</li>\n<li><strong>Where</strong>: For the Vietnam Angel Hackcovy Hackathon</li>\n<li><strong>Teammates</strong>: Hoang Lam, Hong Minh, Tuan Hoang, Hoang Minh</li>\n<li><strong>What is this project</strong>: To know more about Doctorally, you can check this post <a href=\"https://devpost.com/software/doctorally\" target=\"_blank\" rel=\"noopener\">here</a>. I also explained how to create Doctorally platform in this <a href=\"https://decodecraft.com/Doctorally/\">post</a><br>\nDuring the Covid19 pandemic, now more than ever, it’s important for health systems, health care organizations and volunteers to create and ensure an infrastructure and resources to support physicians, nurses, and care team members.</li>\n</ul>\n<img src=\"/MyProject/doctorally.PNG\">\n<ul>\n<li><strong>Where is it</strong>: <a href=\"https://doctorally-test.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">https://doctorally-test.herokuapp.com/</a></li>\n<li><strong>Where is the code</strong>: <a href=\"https://github.com/MRSNOO/doctorally-test-deploy\" target=\"_blank\" rel=\"noopener\">https://github.com/MRSNOO/doctorally-test-deploy</a></li>\n<li><strong>What we won</strong>: Qualified as finalists. Top 17 over 70 teams. Top 3 best medical track team</li>\n</ul>\n<h3>6. ChatApp - Socketio</h3>\n<ul>\n<li><strong>When</strong>: Oct 2020</li>\n<li><strong>Where</strong>: It is just a personal project I did. I usually do personal projects to sharpen my skills.</li>\n<li><strong>Teammates</strong>: I learnt how to do it from the documentation and tutorials online</li>\n<li><strong>What is this project</strong>: It is a chat app similar to Messenger (of course it is no where near Messenger). It has basic functions of creating rooms. People in the same room can chat with each other.</li>\n</ul>\n<img src=\"/MyProject/chatapp.PNG\">\n<ul>\n<li><strong>Where is it</strong>: <a href=\"https://chat-app-socketio-test.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">https://chat-app-socketio-test.herokuapp.com/</a></li>\n<li><strong>Where is the code</strong>: <a href=\"https://github.com/MRSNOO/chat-app-socketio\" target=\"_blank\" rel=\"noopener\">https://github.com/MRSNOO/chat-app-socketio</a></li>\n</ul>\n<h3>7. CLEEN Website</h3>\n<ul>\n<li><strong>When</strong>: Jul 2018</li>\n<li><strong>Where</strong>: For CLEEN Organization</li>\n<li><strong>Teammates</strong>: I create everything from scratch. <strong>This is the first project I have ever created</strong></li>\n<li><strong>What is this project</strong>: Cleen Project is a project that raises funds to install water filters in villages through selling environmentally friendly bags. I am the cofounder of Cleen and I am the president of the project in 2019. I developed CLEEN Website using Python flask and JavaScript; update site continuously with latest environmental news. I also created an admin page to manage the posts and news. I also use my website as a way to promote my organization, spread the influence and call for sponsorship.</li>\n</ul>\n<img src=\"/MyProject/cleen.png\">\n<ul>\n<li><strong>Where is it</strong>: <a href=\"http://cleen.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">http://cleen.herokuapp.com/</a></li>\n<li><strong>Where is the code</strong>: <a href=\"https://github.com/MRSNOO/CleenWeb\" target=\"_blank\" rel=\"noopener\">https://github.com/MRSNOO/CleenWeb</a></li>\n</ul>\n<h3>8. FUSION - Online Learning Platform</h3>\n<ul>\n<li><strong>When</strong>: Oct 2018 - Dec 2018</li>\n<li><strong>Where</strong>: For Conrad Spirit of Innovation Challenge</li>\n<li><strong>Teammates</strong>: Hoang Lam, Tuan Hoang</li>\n<li><strong>What is this project</strong>: When we were doing the Conrad Challenge in the Education Challenge, we came up with the idea of making a competitive online learning platform. In this platform, we prepared tests of all type of subjects such as Mathematics, English, Chemistry and Physics with the help of our teachers in class. We also have a elo-based ranking system to give student motivation.</li>\n</ul>\n<img src=\"/MyProject/fusion.PNG\">\n<ul>\n<li><strong>Where is the code</strong>: <a href=\"https://github.com/MRSNOO/Fusion-Updated\" target=\"_blank\" rel=\"noopener\">https://github.com/MRSNOO/Fusion-Updated</a></li>\n</ul>\n<h3>9. Movies Hub - for Marvel fans</h3>\n<ul>\n<li><strong>When</strong>: May 2019</li>\n<li><strong>Where</strong>: I love watching movies so I created a project so that everyone can get in and enjoy movies</li>\n<li><strong>Teammates</strong>: I create everything from scratch again</li>\n<li><strong>What is this project</strong>: As a long Marvel fan, I always love to have a website to watch free Movies whenever I like. So I created this movie hub for my friends to get in and enjoy the movies together.</li>\n</ul>\n<img src=\"/MyProject/movie.png\">\n<ul>\n<li><strong>Where is it</strong>: <a href=\"https://movies-view.firebaseapp.com/\" target=\"_blank\" rel=\"noopener\">https://movies-view.firebaseapp.com/</a></li>\n<li><strong>Where is the code</strong>: <a href=\"https://github.com/MRSNOO/CI-Final-Project-FilmWeb\" target=\"_blank\" rel=\"noopener\">https://github.com/MRSNOO/CI-Final-Project-FilmWeb</a></li>\n<li><strong>What I won</strong>: first place in the Mindx Hackathon</li>\n</ul>\n<h3>10. Face Detection Tool</h3>\n<ul>\n<li><strong>When</strong>: Aug 2019</li>\n<li><strong>Where</strong>: For the Mathematics and Science Summer Program (MaSSP)</li>\n<li><strong>Teammates</strong>: Anh Thu, Quang Huy</li>\n<li><strong>What is this project</strong>: In the summer program, our team tried to create an artificial intelligence product of facial detection and recognition. We synthesized the model github repositories found online to code the face detection function, using Python and Google collaboration. We also took pictures of all mentors and mentees in the camp to collect data for our model. Below is a picture of our group’s mentor after testing the model.</li>\n</ul>\n<img src=\"/MyProject/frame7.png\">\n<ul>\n<li><strong>Where is the code</strong>: <a href=\"https://github.com/MRSNOO/Final-Project-MaSSP\" target=\"_blank\" rel=\"noopener\">https://github.com/MRSNOO/Final-Project-MaSSP</a></li>\n</ul>\n<h3></h3>\n<h3>11. Birthday Gift for my girlfriend</h3>\n<ul>\n<li><strong>When</strong>: Feb 9, 2020</li>\n<li><strong>Where</strong>: My girlfriend Minh Anh 18th birthday</li>\n<li><strong>What is this project</strong>: I wanted to give something special to my girlfriend to express my love. She loved this website.</li>\n</ul>\n<img src=\"/MyProject/minhanh.png\">\n<h2>This is the end, for now. I will updating new things. I hoped you understand some projects that I did and find it interesting.</h2>\n"}],"PostAsset":[{"_id":"source/_posts/Dashboard-App/signup.png","slug":"signup.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Doctorally/doctorally.png","slug":"doctorally.png","post":"ckq5zemsu0006c6sbaodfwplv","modified":0,"renderable":0},{"_id":"source/_posts/Doctorally/material.png","slug":"material.png","post":"ckq5zemsu0006c6sbaodfwplv","modified":0,"renderable":0},{"_id":"source/_posts/Doctorally/mongodb.png","slug":"mongodb.png","post":"ckq5zemsu0006c6sbaodfwplv","modified":0,"renderable":0},{"_id":"source/_posts/Intro/codefun.png","slug":"codefun.png","post":"ckq5zemt10008c6sb3b5vot94","modified":0,"renderable":0},{"_id":"source/_posts/Intro/demo.jpg","slug":"demo.jpg","post":"ckq5zemt10008c6sb3b5vot94","modified":0,"renderable":0},{"_id":"source/_posts/MessengerClone/back4app-blackburn-resource-management-1140x515.png","slug":"back4app-blackburn-resource-management-1140x515.png","post":"ckq5zemt7000bc6sb7rvj55vw","modified":0,"renderable":0},{"_id":"source/_posts/MessengerClone/storage.png","slug":"storage.png","post":"ckq5zemt7000bc6sb7rvj55vw","modified":0,"renderable":0},{"_id":"source/_posts/MyProject/riceapps.PNG","slug":"riceapps.PNG","post":"ckq5zemtd000hc6sbjxzfcxwu","modified":0,"renderable":0},{"_id":"source/_posts/Heroku/flask2.jpg","slug":"flask2.jpg","post":"ckq5zemt50009c6sb9smtsi80","modified":0,"renderable":0},{"_id":"source/_posts/MyProject/doctorally.PNG","slug":"doctorally.PNG","post":"ckq5zemtd000hc6sbjxzfcxwu","modified":0,"renderable":0},{"_id":"source/_posts/Scholarship/test4.jpg","slug":"test4.jpg","post":"ckq5zemt9000ec6sbpptg10g6","modified":0,"renderable":0},{"_id":"source/_posts/TodoApp/addproject.png","slug":"addproject.png","post":"ckq5zemt8000cc6sbpw5ws18g","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/navigator.png","slug":"navigator.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/welcome.png","slug":"welcome.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/CreateBlog/actionFlow.PNG","slug":"actionFlow.PNG","post":"ckq5zemsj0001c6sbhxs3mskq","modified":0,"renderable":0},{"_id":"source/_posts/CreateBlog/folderStructure.PNG","slug":"folderStructure.PNG","post":"ckq5zemsj0001c6sbhxs3mskq","modified":0,"renderable":0},{"_id":"source/_posts/CreateBlog/mernpic.jpg","slug":"mernpic.jpg","post":"ckq5zemsj0001c6sbhxs3mskq","modified":0,"renderable":0},{"_id":"source/_posts/CreateBlog/mongodb.PNG","slug":"mongodb.PNG","post":"ckq5zemsj0001c6sbhxs3mskq","modified":0,"renderable":0},{"_id":"source/_posts/CreateBlog/mongoexample.PNG","slug":"mongoexample.PNG","post":"ckq5zemsj0001c6sbhxs3mskq","modified":0,"renderable":0},{"_id":"source/_posts/Doctorally/Hospital.png","slug":"Hospital.png","post":"ckq5zemsu0006c6sbaodfwplv","modified":0,"renderable":0},{"_id":"source/_posts/Doctorally/hospitalsign1.jpg","slug":"hospitalsign1.jpg","post":"ckq5zemsu0006c6sbaodfwplv","modified":0,"renderable":0},{"_id":"source/_posts/Intro/design1.PNG","slug":"design1.PNG","post":"ckq5zemt10008c6sb3b5vot94","modified":0,"renderable":0},{"_id":"source/_posts/Intro/design2.PNG","slug":"design2.PNG","post":"ckq5zemt10008c6sb3b5vot94","modified":0,"renderable":0},{"_id":"source/_posts/Intro/firstcode.PNG","slug":"firstcode.PNG","post":"ckq5zemt10008c6sb3b5vot94","modified":0,"renderable":0},{"_id":"source/_posts/Heroku/download.jpg","slug":"download.jpg","post":"ckq5zemt50009c6sb9smtsi80","modified":0,"renderable":0},{"_id":"source/_posts/Heroku/folder.png","slug":"folder.png","post":"ckq5zemt50009c6sb9smtsi80","modified":0,"renderable":0},{"_id":"source/_posts/Heroku/heroku.png","slug":"heroku.png","post":"ckq5zemt50009c6sb9smtsi80","modified":0,"renderable":0},{"_id":"source/_posts/Heroku/heroku1.png","slug":"heroku1.png","post":"ckq5zemt50009c6sb9smtsi80","modified":0,"renderable":0},{"_id":"source/_posts/Heroku/mongodb.png","slug":"mongodb.png","post":"ckq5zemt50009c6sb9smtsi80","modified":0,"renderable":0},{"_id":"source/_posts/MessengerClone/605f46e0efe323669bc2a5a5b7b3835b.png","slug":"605f46e0efe323669bc2a5a5b7b3835b.png","post":"ckq5zemt7000bc6sb7rvj55vw","modified":0,"renderable":0},{"_id":"source/_posts/MessengerClone/allusers.png","slug":"allusers.png","post":"ckq5zemt7000bc6sb7rvj55vw","modified":0,"renderable":0},{"_id":"source/_posts/MessengerClone/dashboard.png","slug":"dashboard.png","post":"ckq5zemt7000bc6sb7rvj55vw","modified":0,"renderable":0},{"_id":"source/_posts/MessengerClone/mainmessage.png","slug":"mainmessage.png","post":"ckq5zemt7000bc6sb7rvj55vw","modified":0,"renderable":0},{"_id":"source/_posts/MessengerClone/message.png","slug":"message.png","post":"ckq5zemt7000bc6sb7rvj55vw","modified":0,"renderable":0},{"_id":"source/_posts/MessengerClone/reduxstructure.png","slug":"reduxstructure.png","post":"ckq5zemt7000bc6sb7rvj55vw","modified":0,"renderable":0},{"_id":"source/_posts/MessengerClone/sideconver.png","slug":"sideconver.png","post":"ckq5zemt7000bc6sb7rvj55vw","modified":0,"renderable":0},{"_id":"source/_posts/MessengerClone/sideleft.png","slug":"sideleft.png","post":"ckq5zemt7000bc6sb7rvj55vw","modified":0,"renderable":0},{"_id":"source/_posts/Scholarship/test1.jpg","slug":"test1.jpg","post":"ckq5zemt9000ec6sbpptg10g6","modified":0,"renderable":0},{"_id":"source/_posts/TodoApp/1_PRfM4daPnB3mGU-CCAb7IQ.png","slug":"1_PRfM4daPnB3mGU-CCAb7IQ.png","post":"ckq5zemt8000cc6sbpw5ws18g","modified":0,"renderable":0},{"_id":"source/_posts/TodoApp/1_qK3XfC6olCxJcygxPx1zBA.png","slug":"1_qK3XfC6olCxJcygxPx1zBA.png","post":"ckq5zemt8000cc6sbpw5ws18g","modified":0,"renderable":0},{"_id":"source/_posts/TodoApp/env.png","slug":"env.png","post":"ckq5zemt8000cc6sbpw5ws18g","modified":0,"renderable":0},{"_id":"source/_posts/TodoApp/featured.png","slug":"featured.png","post":"ckq5zemt8000cc6sbpw5ws18g","modified":0,"renderable":0},{"_id":"source/_posts/TodoApp/firebase-blog.png","slug":"firebase-blog.png","post":"ckq5zemt8000cc6sbpw5ws18g","modified":0,"renderable":0},{"_id":"source/_posts/TodoApp/firebase.png","slug":"firebase.png","post":"ckq5zemt8000cc6sbpw5ws18g","modified":0,"renderable":0},{"_id":"source/_posts/TodoApp/maxresdefault (1).jpg","slug":"maxresdefault (1).jpg","post":"ckq5zemt8000cc6sbpw5ws18g","modified":0,"renderable":0},{"_id":"source/_posts/TodoApp/maxresdefault.jpg","slug":"maxresdefault.jpg","post":"ckq5zemt8000cc6sbpw5ws18g","modified":0,"renderable":0},{"_id":"source/_posts/TodoApp/todo.png","slug":"todo.png","post":"ckq5zemt8000cc6sbpw5ws18g","modified":0,"renderable":0},{"_id":"source/_posts/TodoApp/web.png","slug":"web.png","post":"ckq5zemt8000cc6sbpw5ws18g","modified":0,"renderable":0},{"_id":"source/_posts/MyProject/chatapp.PNG","slug":"chatapp.PNG","post":"ckq5zemtd000hc6sbjxzfcxwu","modified":0,"renderable":0},{"_id":"source/_posts/MyProject/cleen.png","slug":"cleen.png","post":"ckq5zemtd000hc6sbjxzfcxwu","modified":0,"renderable":0},{"_id":"source/_posts/MyProject/frame7.png","slug":"frame7.png","post":"ckq5zemtd000hc6sbjxzfcxwu","modified":0,"renderable":0},{"_id":"source/_posts/MyProject/fusion.PNG","slug":"fusion.PNG","post":"ckq5zemtd000hc6sbjxzfcxwu","modified":0,"renderable":0},{"_id":"source/_posts/MyProject/headerimg1.jpg","slug":"headerimg1.jpg","post":"ckq5zemtd000hc6sbjxzfcxwu","modified":0,"renderable":0},{"_id":"source/_posts/MyProject/minhanh.png","slug":"minhanh.png","post":"ckq5zemtd000hc6sbjxzfcxwu","modified":0,"renderable":0},{"_id":"source/_posts/MyProject/movie.png","slug":"movie.png","post":"ckq5zemtd000hc6sbjxzfcxwu","modified":0,"renderable":0},{"_id":"source/_posts/MyProject/software-engineering-stock.jpg","slug":"software-engineering-stock.jpg","post":"ckq5zemtd000hc6sbjxzfcxwu","modified":0,"renderable":0},{"_id":"source/_posts/MyProject/software_shutterstock_1290773869.jpg","slug":"software_shutterstock_1290773869.jpg","post":"ckq5zemtd000hc6sbjxzfcxwu","modified":0,"renderable":0},{"_id":"source/_posts/Scholarship/cspic.PNG","slug":"cspic.PNG","post":"ckq5zemt9000ec6sbpptg10g6","modified":0,"renderable":0},{"_id":"source/_posts/Scholarship/postimg.jpg","slug":"postimg.jpg","post":"ckq5zemt9000ec6sbpptg10g6","modified":0,"renderable":0},{"_id":"source/_posts/Scholarship/postimg2.jpg","slug":"postimg2.jpg","post":"ckq5zemt9000ec6sbpptg10g6","modified":0,"renderable":0},{"_id":"source/_posts/Scholarship/scholarship.jpg","slug":"scholarship.jpg","post":"ckq5zemt9000ec6sbpptg10g6","modified":0,"renderable":0},{"_id":"source/_posts/Scholarship/test2.jpg","slug":"test2.jpg","post":"ckq5zemt9000ec6sbpptg10g6","modified":0,"renderable":0},{"_id":"source/_posts/Scholarship/test3.jpg","slug":"test3.jpg","post":"ckq5zemt9000ec6sbpptg10g6","modified":0,"renderable":0},{"_id":"source/_posts/Scholarship/test3.jpg_fit=scale&background=000000","slug":"test3.jpg_fit=scale&background=000000","post":"ckq5zemt9000ec6sbpptg10g6","modified":0,"renderable":0},{"_id":"source/_posts/Scholarship/test5.PNG","slug":"test5.PNG","post":"ckq5zemt9000ec6sbpptg10g6","modified":0,"renderable":0},{"_id":"source/_posts/Scholarship/test6.PNG","slug":"test6.PNG","post":"ckq5zemt9000ec6sbpptg10g6","modified":0,"renderable":0},{"_id":"source/_posts/Scholarship/thumbnail.jpg","slug":"thumbnail.jpg","post":"ckq5zemt9000ec6sbpptg10g6","modified":0,"renderable":0},{"_id":"source/_posts/Scholarship/thumbnail2.jpg","slug":"thumbnail2.jpg","post":"ckq5zemt9000ec6sbpptg10g6","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/newapple.png","slug":"newapple.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/newapp2.png","slug":"newapp2.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/newapp3.png","slug":"newapp3.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/newapp.png","slug":"newapp.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/3.record.png","slug":"3.record.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/8.avatar.png","slug":"8.avatar.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/apikey.png","slug":"apikey.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/market.png","slug":"market.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/newapp4.png","slug":"newapp4.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/newapple2.png","slug":"newapple2.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/newapple3.png","slug":"newapple3.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/restrictkey.png","slug":"restrictkey.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/google.png","slug":"google.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/google2.png","slug":"google2.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/google3.png","slug":"google3.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/header.png","slug":"header.png","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0},{"_id":"source/_posts/MyProject/3.record.png","slug":"3.record.png","post":"ckq5zemtd000hc6sbjxzfcxwu","modified":0,"renderable":0},{"_id":"source/_posts/MyProject/link.png","slug":"link.png","post":"ckq5zemtd000hc6sbjxzfcxwu","modified":0,"renderable":0},{"_id":"source/_posts/MyProject/messenger.png","slug":"messenger.png","post":"ckq5zemtd000hc6sbjxzfcxwu","modified":0,"renderable":0},{"_id":"source/_posts/Dashboard-App/header2.jpg","slug":"header2.jpg","post":"ckq5zemsp0003c6sb0xenwvne","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ckq5zemsj0001c6sbhxs3mskq","tag_id":"ckq5zemss0005c6sb4zpyq6f3","_id":"ckq5zemtd000ic6sbcn92epgc"},{"post_id":"ckq5zemsj0001c6sbhxs3mskq","tag_id":"ckq5zemt6000ac6sbrca24myw","_id":"ckq5zemte000jc6sbxsckjuzt"},{"post_id":"ckq5zemsj0001c6sbhxs3mskq","tag_id":"ckq5zemt9000dc6sbxkrlgfr1","_id":"ckq5zemtg000lc6sbaef54ibn"},{"post_id":"ckq5zemsp0003c6sb0xenwvne","tag_id":"ckq5zemss0005c6sb4zpyq6f3","_id":"ckq5zemth000pc6sbtibjui5h"},{"post_id":"ckq5zemsp0003c6sb0xenwvne","tag_id":"ckq5zemt9000dc6sbxkrlgfr1","_id":"ckq5zemth000sc6sbvyk6pdp0"},{"post_id":"ckq5zemsp0003c6sb0xenwvne","tag_id":"ckq5zemtg000nc6sbtlxy4hp1","_id":"ckq5zemth000tc6sbvut3xaxt"},{"post_id":"ckq5zemsu0006c6sbaodfwplv","tag_id":"ckq5zemss0005c6sb4zpyq6f3","_id":"ckq5zemti000xc6sb9qqn3e97"},{"post_id":"ckq5zemsu0006c6sbaodfwplv","tag_id":"ckq5zemt6000ac6sbrca24myw","_id":"ckq5zemti000yc6sbh88rmaxx"},{"post_id":"ckq5zemsu0006c6sbaodfwplv","tag_id":"ckq5zemt9000dc6sbxkrlgfr1","_id":"ckq5zemti0010c6sbk8hnba13"},{"post_id":"ckq5zemsu0006c6sbaodfwplv","tag_id":"ckq5zemtg000nc6sbtlxy4hp1","_id":"ckq5zemti0011c6sbymzbctjm"},{"post_id":"ckq5zemt10008c6sb3b5vot94","tag_id":"ckq5zemti000wc6sbt3hjpn1o","_id":"ckq5zemtj0013c6sbkf8qu1b7"},{"post_id":"ckq5zemt50009c6sb9smtsi80","tag_id":"ckq5zemti000zc6sbz4ala1kk","_id":"ckq5zemtj0017c6sb1jh87xhi"},{"post_id":"ckq5zemt50009c6sb9smtsi80","tag_id":"ckq5zemt9000dc6sbxkrlgfr1","_id":"ckq5zemtj0018c6sb635fxu1k"},{"post_id":"ckq5zemt50009c6sb9smtsi80","tag_id":"ckq5zemt6000ac6sbrca24myw","_id":"ckq5zemtj001ac6sbtop79nx5"},{"post_id":"ckq5zemt50009c6sb9smtsi80","tag_id":"ckq5zemtj0015c6sbjgxs3egq","_id":"ckq5zemtk001bc6sbsi3ufsjv"},{"post_id":"ckq5zemt7000bc6sb7rvj55vw","tag_id":"ckq5zemss0005c6sb4zpyq6f3","_id":"ckq5zemtk001dc6sb4x7ra32q"},{"post_id":"ckq5zemt7000bc6sb7rvj55vw","tag_id":"ckq5zemt6000ac6sbrca24myw","_id":"ckq5zemtk001ec6sbyh1w32qv"},{"post_id":"ckq5zemt7000bc6sb7rvj55vw","tag_id":"ckq5zemt9000dc6sbxkrlgfr1","_id":"ckq5zemtk001gc6sbngy2s4al"},{"post_id":"ckq5zemt7000bc6sb7rvj55vw","tag_id":"ckq5zemtg000nc6sbtlxy4hp1","_id":"ckq5zemtk001hc6sb14cxm2i5"},{"post_id":"ckq5zemt8000cc6sbpw5ws18g","tag_id":"ckq5zemt6000ac6sbrca24myw","_id":"ckq5zemtk001jc6sbt8f3a9k9"},{"post_id":"ckq5zemt8000cc6sbpw5ws18g","tag_id":"ckq5zemtk001cc6sbu3mvmfnm","_id":"ckq5zemtk001kc6sbux2v2ltl"},{"post_id":"ckq5zemt9000ec6sbpptg10g6","tag_id":"ckq5zemtk001fc6sbruo2yuao","_id":"ckq5zemtk001mc6sbeuwfltsc"},{"post_id":"ckq5zemt9000ec6sbpptg10g6","tag_id":"ckq5zemtk001ic6sb98yrfpg3","_id":"ckq5zemtk001nc6sb6y7ug2eg"},{"post_id":"ckq5zemtd000hc6sbjxzfcxwu","tag_id":"ckq5zemtk001lc6sbmj38wozy","_id":"ckq5zemtl001qc6sb8mp2fxvk"},{"post_id":"ckq5zemtd000hc6sbjxzfcxwu","tag_id":"ckq5zemt6000ac6sbrca24myw","_id":"ckq5zemtl001rc6sb1rgtli2h"},{"post_id":"ckq5zemtd000hc6sbjxzfcxwu","tag_id":"ckq5zemss0005c6sb4zpyq6f3","_id":"ckq5zemtl001sc6sb1w4wm3hy"},{"post_id":"ckq5zemtd000hc6sbjxzfcxwu","tag_id":"ckq5zemtl001oc6sbyt5a5clr","_id":"ckq5zemtl001tc6sbl8u47qh5"},{"post_id":"ckq5zemtd000hc6sbjxzfcxwu","tag_id":"ckq5zemtl001pc6sbh3o0wcxv","_id":"ckq5zemtl001uc6sbmdafijwo"},{"post_id":"ckq5zemsp0003c6sb0xenwvne","tag_id":"ckq6nvv7a0000v4sbs1l9dckr","_id":"ckq6nvv7e0002v4sbpe8tmow8"},{"post_id":"ckq5zemsp0003c6sb0xenwvne","tag_id":"ckq6nvv7d0001v4sbq3yvg049","_id":"ckq6nvv7e0003v4sb4bj582pd"}],"Tag":[{"name":"javascript","_id":"ckq5zemss0005c6sb4zpyq6f3"},{"name":"reactjs","_id":"ckq5zemt6000ac6sbrca24myw"},{"name":"nodejs","_id":"ckq5zemt9000dc6sbxkrlgfr1"},{"name":"api","_id":"ckq5zemtg000nc6sbtlxy4hp1"},{"name":"intro","_id":"ckq5zemti000wc6sbt3hjpn1o"},{"name":"heroku","_id":"ckq5zemti000zc6sbz4ala1kk"},{"name":"mongodb","_id":"ckq5zemtj0015c6sbjgxs3egq"},{"name":"firebase","_id":"ckq5zemtk001cc6sbu3mvmfnm"},{"name":"scholarships","_id":"ckq5zemtk001fc6sbruo2yuao"},{"name":"CS","_id":"ckq5zemtk001ic6sb98yrfpg3"},{"name":"all projects","_id":"ckq5zemtk001lc6sbmj38wozy"},{"name":"python","_id":"ckq5zemtl001oc6sbyt5a5clr"},{"name":"php","_id":"ckq5zemtl001pc6sbh3o0wcxv"},{"name":"react-native","_id":"ckq6nvv7a0000v4sbs1l9dckr"},{"name":"expo","_id":"ckq6nvv7d0001v4sbq3yvg049"}]}}
